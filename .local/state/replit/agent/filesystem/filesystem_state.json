{"file_contents":{"ARCHITECTURE.md":{"content":"# DSAGrind - System Architecture Documentation\n\n## 🏗️ Overview\nDSAGrind is a modern competitive programming platform built with a microservices architecture, featuring AI-powered assistance, real-time collaboration, and comprehensive administrative tools.\n\n## 🔧 Technical Stack\n\n### Frontend\n- **Framework**: React 18 + Vite\n- **UI Library**: Tailwind CSS + Shadcn UI components\n- **State Management**: TanStack Query + Context API\n- **Routing**: Wouter (lightweight routing)\n- **Editor**: Monaco Editor (VS Code engine)\n- **Real-time**: WebSocket API\n- **Authentication**: JWT with refresh tokens\n\n### Backend\n- **Runtime**: .NET 8 (Latest LTS)\n- **Architecture**: Microservices with API Gateway\n- **Database**: MongoDB Atlas (Cloud NoSQL)\n- **Messaging**: Apache Kafka (Event-driven)\n- **Caching**: Redis (In-memory cache)\n- **AI**: OpenAI GPT-3.5 Turbo + Semantic Kernel\n- **Search**: Vector embeddings + Qdrant\n- **Authentication**: JWT + OAuth (Google, GitHub)\n- **Payments**: Stripe integration\n\n## 🏛️ Microservices Architecture\n\n```\n┌─────────────────────┐\n│   Frontend (React)  │\n│     Port: 5000      │\n└──────────┬──────────┘\n           │\n┌──────────▼──────────┐\n│   Node.js Proxy     │\n│     Port: 5000      │\n└──────────┬──────────┘\n           │\n┌──────────▼──────────┐\n│  .NET API Gateway   │\n│     Port: 8000      │\n└──────────┬──────────┘\n           │\n┌──────────▼──────────┐\n│    Microservices    │\n├─────────────────────┤\n│ Auth API     :8080  │\n│ Problems API :5001  │\n│ Submit API   :5002  │\n│ AI API       :5003  │\n│ Search API   :5004  │\n│ Admin API    :5005  │\n│ Payments API :5006  │\n└─────────────────────┘\n           │\n┌──────────▼──────────┐\n│   External Services │\n├─────────────────────┤\n│ MongoDB Atlas       │\n│ Apache Kafka        │\n│ Redis Cache         │\n│ OpenAI API          │\n│ Stripe Payments     │\n│ OAuth Providers     │\n└─────────────────────┘\n```\n\n## 🚀 Service Details\n\n### 1. Gateway API (Port 8000)\n**Purpose**: Main entry point and reverse proxy\n- Routes requests to appropriate microservices\n- Handles CORS and security policies\n- Load balancing and health checks\n- Rate limiting (configurable)\n\n### 2. Auth API (Port 8080)\n**Purpose**: Authentication and user management\n- JWT token generation/validation\n- OAuth integration (Google, GitHub)\n- User registration/login\n- Password reset functionality\n- Role-based access control\n\n### 3. Problems API (Port 5001)\n**Purpose**: Problem and category management\n- CRUD operations for problems\n- Category management\n- Test case handling\n- Difficulty estimation\n- Problem recommendations\n\n### 4. Submissions API (Port 5002)\n**Purpose**: Code execution and submissions\n- Multi-language code execution\n- Test case validation\n- Submission tracking\n- Performance metrics\n- Execution history\n\n### 5. AI API (Port 5003)\n**Purpose**: AI-powered assistance\n- Code analysis and review\n- Hint generation\n- Solution explanations\n- Test case generation\n- Debugging assistance\n- Code optimization suggestions\n\n### 6. Search API (Port 5004)\n**Purpose**: Advanced search and recommendations\n- Vector search with embeddings\n- Problem discovery\n- Personalized recommendations\n- Tag-based filtering\n- Semantic search\n\n### 7. Admin API (Port 5005)\n**Purpose**: Administrative functions\n- User management\n- Content moderation\n- System analytics\n- Bulk operations\n- Configuration management\n\n### 8. Payments API (Port 5006)\n**Purpose**: Subscription and payment handling\n- Stripe integration\n- Subscription management\n- Payment processing\n- Billing history\n- Plan upgrades/downgrades\n\n## 📊 Data Flow Architecture\n\n### Event-Driven Communication\n```\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│   Service   │───▶│    Kafka    │───▶│   Service   │\n│  Producer   │    │   Message   │    │  Consumer   │\n│             │    │    Queue    │    │             │\n└─────────────┘    └─────────────┘    └─────────────┘\n```\n\n### Event Types\n- **UserEvents**: Registration, login, logout, profile updates\n- **ProblemEvents**: Creation, updates, submissions\n- **SubmissionEvents**: Code execution, results, scoring\n- **PaymentEvents**: Subscriptions, renewals, cancellations\n\n## 🔐 Security Architecture\n\n### Authentication Flow\n```\n1. User Login Request\n   ↓\n2. Verify Credentials\n   ↓\n3. Generate JWT + Refresh Token\n   ↓\n4. Store in HTTP-only Cookie\n   ↓\n5. API Requests with Bearer Token\n   ↓\n6. JWT Validation on Each Request\n```\n\n### Authorization Matrix\n| Role     | Problems | Submissions | Admin | Payments |\n|----------|----------|-------------|-------|----------|\n| Guest    | Read     | -           | -     | -        |\n| User     | Read     | CRUD        | -     | Read     |\n| Premium  | Full     | CRUD        | -     | CRUD     |\n| Admin    | Full     | Full        | Full  | Full     |\n\n## 🧠 AI Integration Architecture\n\n### AI Service Pipeline\n```\nUser Request\n    ↓\nAI Service\n    ↓\nOpenAI API (GPT-3.5)\n    ↓\nResponse Processing\n    ↓\nStructured Output\n    ↓\nCache in Redis\n    ↓\nReturn to User\n```\n\n### AI Features\n- **Code Analysis**: Complexity, quality, best practices\n- **Debugging**: Error detection and suggestions\n- **Hints**: Progressive difficulty hints\n- **Test Generation**: Edge cases and boundary conditions\n- **Optimization**: Performance and readability improvements\n\n## 📈 Scalability Considerations\n\n### Horizontal Scaling\n- Each microservice can scale independently\n- Load balancing at Gateway level\n- Database sharding strategies\n- Kafka topic partitioning\n\n### Performance Optimizations\n- Redis caching for frequent queries\n- CDN for static assets\n- Database indexing strategies\n- Lazy loading and pagination\n\n### Monitoring & Observability\n- Structured logging with Serilog\n- Health checks for all services\n- Metrics collection and alerting\n- Distributed tracing\n\n## 🔄 Development Workflow\n\n### Local Development\n1. Start infrastructure (MongoDB, Kafka, Redis)\n2. Run microservices in parallel\n3. Frontend development server\n4. Hot reload for rapid iteration\n\n### Deployment Pipeline\n1. Code commit triggers CI/CD\n2. Automated testing suite\n3. Docker containerization\n4. Kubernetes deployment\n5. Health check validation\n\n## 📝 API Documentation\n\n### RESTful Endpoints\n- **GET /api/problems** - List problems\n- **POST /api/submissions** - Submit code\n- **GET /api/ai/hints** - Get AI hints\n- **POST /api/admin/problems** - Admin operations\n\n### WebSocket Events\n- **code:update** - Real-time code changes\n- **submission:result** - Execution results\n- **hint:available** - AI hint ready\n\n## 🛠️ Configuration Management\n\n### Environment Variables\n```bash\n# Database\nMONGODB_CONNECTION_STRING=mongodb+srv://...\nREDIS_CONNECTION_STRING=redis://...\n\n# External APIs\nOPENAI_API_KEY=sk-...\nSTRIPE_SECRET_KEY=sk_test_...\n\n# Kafka\nKAFKA_BOOTSTRAP_SERVERS=localhost:9092\n```\n\n### Service Configuration\nEach service has its own `appsettings.json` with:\n- Database connections\n- API endpoints\n- Security settings\n- Feature flags","size_bytes":7854},"README.md":{"content":"# DSAGrind - Competitive Programming Platform\n\nA comprehensive competitive programming platform built with .NET 8 microservices architecture and React TypeScript frontend, featuring AI-powered assistance, multi-language IDE, admin management, OAuth authentication, and premium subscription features.\n\n## Table of Contents\n\n- [Architecture Overview](#architecture-overview)\n- [Prerequisites](#prerequisites)\n- [Setup Scenarios](#setup-scenarios)\n  - [1. Running Individual Services (Without Docker)](#1-running-individual-services-without-docker)\n  - [2. Running with Docker Compose (Recommended)](#2-running-with-docker-compose-recommended)\n  - [3. Production Deployment](#3-production-deployment)\n- [Environment Variables & API Keys](#environment-variables--api-keys)\n- [Service Endpoints](#service-endpoints)\n- [Troubleshooting](#troubleshooting)\n\n## Architecture Overview\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development\n- **Tailwind CSS + Shadcn UI** for styling\n- **Monaco Editor** for code editing\n- **TanStack Query** for state management\n\n### Backend Microservices\n- **Gateway API** (Port 5000) - YARP reverse proxy\n- **Authentication API** (Port 8080) - JWT + OAuth\n- **Problems API** (Port 5001) - Problem management\n- **Submissions API** (Port 5002) - Code execution\n- **AI API** (Port 5003) - OpenAI integration\n- **Search API** (Port 5004) - Vector search with Qdrant\n- **Admin API** (Port 5005) - Admin dashboard\n- **Payments API** (Port 5006) - Stripe integration\n- **MCP API** (Port 5007) - Model Context Protocol\n\n### External Dependencies\n- **MongoDB** - Primary database\n- **Redis** - Caching and sessions\n- **Apache Kafka** - Message broker\n- **Qdrant** - Vector database\n- **OpenAI API** - AI assistance\n- **Stripe** - Payments\n- **Google/GitHub OAuth** - Authentication\n\n## Prerequisites\n\n### For All Scenarios\n- **.NET 8 SDK** - [Download](https://dotnet.microsoft.com/download/dotnet/8.0)\n- **Node.js 18+** - [Download](https://nodejs.org/)\n- **Git** - [Download](https://git-scm.com/)\n\n### For Docker Scenario\n- **Docker** - [Download](https://www.docker.com/get-started)\n- **Docker Compose** - Included with Docker Desktop\n\n### For Individual Services\n- **MongoDB** - [Download](https://www.mongodb.com/try/download/community)\n- **Redis** - [Download](https://redis.io/download)\n- **Apache Kafka** - [Download](https://kafka.apache.org/downloads)\n- **Qdrant** - [Download](https://qdrant.tech/documentation/quick-start/)\n\n## Setup Scenarios\n\n## 1. Running Individual Services (Without Docker)\n\n### Step 1: Clone and Setup\n```bash\ngit clone <your-repo-url>\ncd dsagrind\n```\n\n### Step 2: Install Dependencies\n```bash\n# Frontend dependencies\ncd client\nnpm install\ncd ..\n\n# Restore .NET packages\ncd backend\ndotnet restore\ncd ..\n```\n\n### Step 3: Setup External Services\n\n#### MongoDB\n```bash\n# Install and start MongoDB\nmongod --dbpath /path/to/your/data/directory\n\n# Create database (optional, auto-created)\nmongosh\nuse dsagrind\n```\n\n#### Redis\n```bash\n# Install and start Redis\nredis-server\n\n# Test connection\nredis-cli ping\n```\n\n#### Apache Kafka & Zookeeper\n```bash\n# Start Zookeeper\nbin/zookeeper-server-start.sh config/zookeeper.properties\n\n# Start Kafka\nbin/kafka-server-start.sh config/server.properties\n```\n\n#### Qdrant\n```bash\n# Using Docker (recommended for Qdrant)\ndocker run -p 6333:6333 qdrant/qdrant\n\n# Or install locally - see Qdrant documentation\n```\n\n### Step 4: Configure Environment Variables\nCreate `appsettings.Development.json` in each service directory:\n\n**Authentication API** (`backend/src/Services/DSAGrind.Auth.API/appsettings.Development.json`):\n```json\n{\n  \"ConnectionStrings\": {\n    \"MongoDB\": \"mongodb://localhost:27017\",\n    \"Redis\": \"localhost:6379\"\n  },\n  \"MongoDbSettings\": {\n    \"ConnectionString\": \"mongodb://localhost:27017\",\n    \"DatabaseName\": \"dsagrind\"\n  },\n  \"JwtSettings\": {\n    \"Secret\": \"your-super-secret-jwt-key-minimum-32-characters\",\n    \"Issuer\": \"DSAGrind\",\n    \"Audience\": \"DSAGrind-Users\",\n    \"ExpiryMinutes\": 60\n  },\n  \"OAuthSettings\": {\n    \"Google\": {\n      \"ClientId\": \"your-google-oauth-client-id\",\n      \"ClientSecret\": \"your-google-oauth-client-secret\"\n    },\n    \"GitHub\": {\n      \"ClientId\": \"your-github-oauth-client-id\",\n      \"ClientSecret\": \"your-github-oauth-client-secret\"\n    }\n  },\n  \"Kafka\": {\n    \"BootstrapServers\": \"localhost:9092\",\n    \"GroupId\": \"auth-service\"\n  }\n}\n```\n\n**Problems API** (`backend/src/Services/DSAGrind.Problems.API/appsettings.Development.json`):\n```json\n{\n  \"MongoDbSettings\": {\n    \"ConnectionString\": \"mongodb://localhost:27017\",\n    \"DatabaseName\": \"dsagrind\"\n  },\n  \"JwtSettings\": {\n    \"Audience\": \"DSAGrind-Users\"\n  },\n  \"Auth\": {\n    \"Authority\": \"http://localhost:8080\"\n  },\n  \"Kafka\": {\n    \"BootstrapServers\": \"localhost:9092\",\n    \"GroupId\": \"problems-service\"\n  }\n}\n```\n\n**AI API** (`backend/src/Services/DSAGrind.AI.API/appsettings.Development.json`):\n```json\n{\n  \"OpenAI\": {\n    \"ApiKey\": \"your-openai-api-key-here\"\n  },\n  \"JwtSettings\": {\n    \"Audience\": \"DSAGrind-Users\"\n  },\n  \"Auth\": {\n    \"Authority\": \"http://localhost:8080\"\n  },\n  \"Kafka\": {\n    \"BootstrapServers\": \"localhost:9092\",\n    \"GroupId\": \"ai-service\"\n  }\n}\n```\n\n**Payments API** (`backend/src/Services/DSAGrind.Payments.API/appsettings.Development.json`):\n```json\n{\n  \"MongoDbSettings\": {\n    \"ConnectionString\": \"mongodb://localhost:27017\",\n    \"DatabaseName\": \"dsagrind\"\n  },\n  \"Stripe\": {\n    \"SecretKey\": \"your-stripe-secret-key-here\",\n    \"PublishableKey\": \"your-stripe-publishable-key-here\"\n  },\n  \"Payments\": {\n    \"UseHttps\": false\n  },\n  \"PaymentSettings\": {\n    \"UseMockData\": true,\n    \"EnableStripeIntegration\": false\n  }\n}\n```\n\n### Step 5: Start Services Individually\n\n#### Terminal 1 - Authentication API\n```bash\ncd backend/src/Services/DSAGrind.Auth.API\ndotnet run\n```\n\n#### Terminal 2 - Problems API\n```bash\ncd backend/src/Services/DSAGrind.Problems.API\ndotnet run\n```\n\n#### Terminal 3 - Submissions API\n```bash\ncd backend/src/Services/DSAGrind.Submissions.API\ndotnet run\n```\n\n#### Terminal 4 - AI API\n```bash\ncd backend/src/Services/DSAGrind.AI.API\ndotnet run\n```\n\n#### Terminal 5 - Search API\n```bash\ncd backend/src/Services/DSAGrind.Search.API\ndotnet run\n```\n\n#### Terminal 6 - Admin API\n```bash\ncd backend/src/Services/DSAGrind.Admin.API\ndotnet run\n```\n\n#### Terminal 7 - Payments API\n```bash\ncd backend/src/Services/DSAGrind.Payments.API\ndotnet run\n```\n\n#### Terminal 8 - MCP API\n```bash\ncd backend/src/Services/DSAGrind.MCP.API\ndotnet run\n```\n\n#### Terminal 9 - Gateway API\n```bash\ncd backend/src/Services/DSAGrind.Gateway.API\ndotnet run\n```\n\n#### Terminal 10 - Frontend\n```bash\ncd client\nnpm run dev\n```\n\n## 2. Running with Docker Compose (Recommended)\n\n### Step 1: Clone Repository\n```bash\ngit clone <your-repo-url>\ncd dsagrind\n```\n\n### Step 2: Create Environment File\nCreate `backend/.env` file:\n```bash\n# Required API Keys\nOPENAI_API_KEY=your-openai-api-key-here\nSTRIPE_SECRET_KEY=your-stripe-secret-key-here\nJWT_SECRET_KEY=your-super-secret-jwt-key-minimum-32-characters\n\n# OAuth Configuration\nGOOGLE_CLIENT_ID=your-google-oauth-client-id\nGOOGLE_CLIENT_SECRET=your-google-oauth-client-secret\nGITHUB_CLIENT_ID=your-github-oauth-client-id\nGITHUB_CLIENT_SECRET=your-github-oauth-client-secret\n\n# Optional: Email Configuration\nSENDGRID_API_KEY=your-sendgrid-api-key\nEMAIL_FROM=noreply@your-domain.com\n```\n\n### Step 3: Build and Start All Services\n```bash\ncd backend\ndocker-compose up --build\n```\n\nThis will start:\n- ✅ MongoDB (Port 27017)\n- ✅ Redis (Port 6379)\n- ✅ Apache Kafka (Port 9092)\n- ✅ Zookeeper (Port 2181)\n- ✅ Qdrant (Port 6333)\n- ✅ All 9 Backend APIs\n- ⚠️ Frontend needs to be started separately\n\n### Step 4: Start Frontend\n```bash\ncd client\nnpm install\nnpm run dev\n```\n\n### Step 5: Access Application\n- **Frontend**: http://localhost:3000\n- **Gateway API**: http://localhost:5000\n- **MongoDB**: mongodb://localhost:27017\n- **Redis**: redis://localhost:6379\n\n### Useful Docker Commands\n```bash\n# View logs\ndocker-compose logs -f [service-name]\n\n# Stop all services\ndocker-compose down\n\n# Remove volumes (reset data)\ndocker-compose down -v\n\n# Rebuild specific service\ndocker-compose up --build [service-name]\n```\n\n## 3. Production Deployment\n\n### Option A: Cloud Platform (Azure/AWS/GCP)\n\n#### Prerequisites\n- Container registry (Docker Hub, Azure Container Registry, etc.)\n- Kubernetes cluster or container service\n- Managed MongoDB (Atlas, Cosmos DB, etc.)\n- Managed Redis (Redis Cloud, ElastiCache, etc.)\n\n#### Steps\n1. **Build and Push Images**\n```bash\n# Build all images\ndocker-compose build\n\n# Tag and push to registry\ndocker tag dsagrind-gateway your-registry/dsagrind-gateway:latest\ndocker push your-registry/dsagrind-gateway:latest\n# Repeat for all services\n```\n\n2. **Deploy Database Services**\n```bash\n# MongoDB Atlas\n# Create cluster at https://cloud.mongodb.com\n# Get connection string\n\n# Redis Cloud\n# Create instance at https://redis.com\n# Get connection string\n\n# Qdrant Cloud\n# Create cluster at https://cloud.qdrant.io\n# Get API endpoint and key\n```\n\n3. **Configure Production Environment Variables**\n```bash\n# In your cloud deployment platform\nASPNETCORE_ENVIRONMENT=Production\nMONGODB_CONNECTION_STRING=mongodb+srv://user:pass@cluster.mongodb.net/dsagrind\nREDIS_CONNECTION_STRING=redis://your-redis-cloud-endpoint:port\nQDRANT_HOST=your-qdrant-cloud-endpoint\nQDRANT_API_KEY=your-qdrant-api-key\n\n# API Keys (same as development but production keys)\nOPENAI_API_KEY=your-production-openai-key\nSTRIPE_SECRET_KEY=your-production-stripe-key\nJWT_SECRET_KEY=your-production-jwt-secret\n\n# OAuth (configure production URLs)\nGOOGLE_CLIENT_ID=your-production-google-client-id\nGOOGLE_CLIENT_SECRET=your-production-google-client-secret\nGITHUB_CLIENT_ID=your-production-github-client-id\nGITHUB_CLIENT_SECRET=your-production-github-client-secret\n\n# Domain configuration\nCORS_ALLOWED_ORIGINS=https://your-domain.com,https://www.your-domain.com\n```\n\n### Option B: VPS/Dedicated Server\n\n#### Prerequisites\n- Ubuntu/CentOS server with Docker installed\n- Domain name and SSL certificate\n- Nginx for reverse proxy\n\n#### Steps\n1. **Setup Server**\n```bash\n# Install Docker and Docker Compose\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n2. **Configure Nginx**\n```nginx\n# /etc/nginx/sites-available/dsagrind\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n    \n    location /api/ {\n        proxy_pass http://localhost:5000/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n3. **Setup SSL with Certbot**\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n```\n\n4. **Deploy Application**\n```bash\n# Clone repo on server\ngit clone <your-repo-url>\ncd dsagrind\n\n# Set environment variables\ncp backend/.env.example backend/.env\n# Edit with your production values\n\n# Start services\ncd backend\ndocker-compose up -d\n```\n\n### Option C: Replit Deployment\n\n#### Prerequisites\n- Replit account\n- All API keys configured\n\n#### Steps\n1. **Configure Environment Variables in Replit**\n```bash\n# In Replit Secrets tab, add:\nOPENAI_API_KEY=your-openai-api-key\nSTRIPE_SECRET_KEY=your-stripe-secret-key  \nJWT_SECRET_KEY=your-jwt-secret\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n2. **Use Replit Database**\n```bash\n# MongoDB Atlas connection string\nMONGODB_CONNECTION_STRING=mongodb+srv://user:pass@cluster.mongodb.net/dsagrind\n\n# Or use Replit PostgreSQL if preferred (requires code changes)\n```\n\n3. **Deploy**\n```bash\n# Frontend runs automatically on port 3000\n# Gateway API runs on port 5000\n# Configure production URLs in OAuth providers\n```\n\n## Environment Variables & API Keys\n\n### Required API Keys Setup\n\n#### 1. OpenAI API Key\n```bash\n# Get from: https://platform.openai.com/api-keys\n# Steps:\n# 1. Sign up/login to OpenAI\n# 2. Go to API Keys section\n# 3. Create new secret key\n# 4. Copy the key (starts with sk-)\n\nOPENAI_API_KEY=sk-...your-key-here\n```\n\n#### 2. Stripe Keys\n```bash\n# Get from: https://dashboard.stripe.com/apikeys\n# Steps:\n# 1. Create Stripe account\n# 2. Go to Developers > API Keys\n# 3. Get both secret and publishable keys\n\n# For Development\nSTRIPE_SECRET_KEY=sk_test_...your-test-key\nSTRIPE_PUBLISHABLE_KEY=pk_test_...your-test-publishable-key\n\n# For Production  \nSTRIPE_SECRET_KEY=sk_live_...your-live-key\nSTRIPE_PUBLISHABLE_KEY=pk_live_...your-live-publishable-key\n```\n\n#### 3. OAuth Applications\n\n**Google OAuth:**\n```bash\n# Setup at: https://console.developers.google.com\n# Steps:\n# 1. Create new project or select existing\n# 2. Enable Google+ API\n# 3. Go to Credentials > Create Credentials > OAuth 2.0 Client ID\n# 4. Set application type to \"Web application\"\n# 5. Add authorized redirect URIs:\n\n# Development\nhttp://localhost:5000/auth/google/callback\nhttp://localhost:8080/auth/google/callback\n\n# Production\nhttps://your-domain.com/auth/google/callback\n\nGOOGLE_CLIENT_ID=your-app-id.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=GOCSPX-your-secret\n```\n\n**GitHub OAuth:**\n```bash\n# Setup at: https://github.com/settings/applications/new\n# Steps:\n# 1. Go to Settings > Developer settings > OAuth Apps\n# 2. Click \"New OAuth App\"\n# 3. Fill in details:\n#    - Application name: DSAGrind\n#    - Homepage URL: http://localhost:3000 (dev) or https://your-domain.com (prod)\n#    - Authorization callback URL: http://localhost:5000/auth/github/callback\n\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n#### 4. JWT Secret\n```bash\n# Generate a secure random key (minimum 32 characters)\n# You can use online generators or:\nopenssl rand -base64 32\n\nJWT_SECRET_KEY=your-super-secure-jwt-secret-key-minimum-32-characters-long\n```\n\n#### 5. Email Service (Optional)\n```bash\n# SendGrid setup: https://sendgrid.com\n# Steps:\n# 1. Create SendGrid account\n# 2. Go to Settings > API Keys\n# 3. Create new API key with Mail Send permissions\n\nSENDGRID_API_KEY=SG.your-sendgrid-api-key\nEMAIL_FROM=noreply@your-domain.com\n```\n\n### Environment Configuration Examples\n\n#### Development (.env)\n```bash\n# Database connections (local)\nMONGODB_CONNECTION_STRING=mongodb://localhost:27017\nREDIS_CONNECTION_STRING=localhost:6379\nKAFKA_BOOTSTRAP_SERVERS=localhost:9092\nQDRANT_HOST=localhost\nQDRANT_PORT=6333\n\n# API Keys\nOPENAI_API_KEY=sk-your-dev-key\nSTRIPE_SECRET_KEY=sk_test_your-test-key\nJWT_SECRET_KEY=your-dev-jwt-secret\n\n# OAuth (use test apps)\nGOOGLE_CLIENT_ID=your-dev-google-id\nGOOGLE_CLIENT_SECRET=your-dev-google-secret\nGITHUB_CLIENT_ID=your-dev-github-id\nGITHUB_CLIENT_SECRET=your-dev-github-secret\n\n# CORS\nCORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5000\n```\n\n#### Production (.env)\n```bash\n# Managed database services\nMONGODB_CONNECTION_STRING=mongodb+srv://user:pass@cluster.mongodb.net/dsagrind\nREDIS_CONNECTION_STRING=rediss://user:pass@redis-cluster.cloud.redislabs.com:port\nKAFKA_BOOTSTRAP_SERVERS=your-kafka-cluster:9092\nQDRANT_HOST=your-qdrant-cluster.qdrant.cloud\nQDRANT_API_KEY=your-qdrant-api-key\n\n# Production API Keys\nOPENAI_API_KEY=sk-your-production-key\nSTRIPE_SECRET_KEY=sk_live_your-live-key\nJWT_SECRET_KEY=your-super-secure-production-jwt-secret\n\n# Production OAuth\nGOOGLE_CLIENT_ID=your-prod-google-id\nGOOGLE_CLIENT_SECRET=your-prod-google-secret\nGITHUB_CLIENT_ID=your-prod-github-id\nGITHUB_CLIENT_SECRET=your-prod-github-secret\n\n# Production CORS\nCORS_ALLOWED_ORIGINS=https://your-domain.com,https://www.your-domain.com\n```\n\n## Service Endpoints\n\n### Frontend\n- **Development**: http://localhost:3000\n- **Production**: https://your-domain.com\n\n### Backend APIs\n| Service | Port | Endpoint | Purpose |\n|---------|------|----------|---------|\n| Gateway | 5000 | http://localhost:5000 | Main API entry point |\n| Auth | 8080 | http://localhost:8080 | Authentication & OAuth |\n| Problems | 5001 | http://localhost:5001 | Problem management |\n| Submissions | 5002 | http://localhost:5002 | Code execution |\n| AI | 5003 | http://localhost:5003 | AI assistance |\n| Search | 5004 | http://localhost:5004 | Search & recommendations |\n| Admin | 5005 | http://localhost:5005 | Admin dashboard |\n| Payments | 5006 | http://localhost:5006 | Stripe integration |\n| MCP | 5007 | http://localhost:5007 | Model Context Protocol |\n\n### Health Checks\n- Gateway: http://localhost:5000/health\n- Auth: http://localhost:8080/health\n- Each service: http://localhost:{port}/health\n\n### API Documentation\n- Gateway Swagger: http://localhost:5000/swagger\n- Auth Swagger: http://localhost:8080/swagger\n- Each service: http://localhost:{port}/swagger\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. Port Already in Use\n```bash\n# Find process using port\nlsof -i :5000\nnetstat -tulpn | grep :5000\n\n# Kill process\nkill -9 <process-id>\n```\n\n#### 2. MongoDB Connection Issues\n```bash\n# Check if MongoDB is running\nsudo systemctl status mongod\n\n# Check connection\nmongosh \"mongodb://localhost:27017/dsagrind\"\n```\n\n#### 3. Redis Connection Issues\n```bash\n# Check if Redis is running\nredis-cli ping\n\n# Should return \"PONG\"\n```\n\n#### 4. Docker Issues\n```bash\n# Check container status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f [service-name]\n\n# Restart services\ndocker-compose restart [service-name]\n\n# Clean rebuild\ndocker-compose down -v\ndocker-compose up --build\n```\n\n#### 5. HTTPS/Certificate Issues\n- Development: All services use HTTP (certificate issues are disabled)\n- Production: Use proper SSL certificates with nginx or load balancer\n\n#### 6. CORS Issues\n```bash\n# Update CORS settings in appsettings.json\n\"Cors\": {\n  \"AllowedOrigins\": [\"http://localhost:3000\", \"https://your-domain.com\"]\n}\n```\n\n### Performance Optimization\n\n#### Production Settings\n```bash\n# In appsettings.Production.json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  },\n  \"ConnectionStrings\": {\n    \"MongoDB\": \"your-optimized-connection-string-with-connection-pooling\"\n  }\n}\n```\n\n#### Database Indexing\n```javascript\n// MongoDB indexes for better performance\ndb.problems.createIndex({ \"difficulty\": 1, \"category\": 1 })\ndb.submissions.createIndex({ \"userId\": 1, \"createdAt\": -1 })\ndb.users.createIndex({ \"email\": 1 }, { unique: true })\n```\n\n### Deployment Checklist\n\n#### Before Deployment\n- [ ] All API keys configured\n- [ ] OAuth redirect URIs updated for production domain\n- [ ] Database connection strings updated\n- [ ] CORS origins configured for production domain\n- [ ] SSL certificates configured\n- [ ] Environment variables set to Production\n- [ ] Database indexes created\n- [ ] Monitoring and logging configured\n\n#### Production Environment Variables\n```bash\n# Essential production settings\nASPNETCORE_ENVIRONMENT=Production\nASPNETCORE_URLS=http://+:5000\n\n# Security\nJWT_SECRET_KEY=production-secret-minimum-32-chars\nSTRIPE_SECRET_KEY=sk_live_production-stripe-key\n\n# Databases (use managed services)\nMONGODB_CONNECTION_STRING=mongodb+srv://production-connection\nREDIS_CONNECTION_STRING=production-redis-connection\n\n# OAuth production apps\nGOOGLE_CLIENT_ID=production-google-client-id\nGITHUB_CLIENT_ID=production-github-client-id\n\n# Domain configuration\nCORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\n```\n\n### Support\nFor issues and questions:\n1. Check this README first\n2. Review service logs: `docker-compose logs -f [service-name]`\n3. Check GitHub issues\n4. Contact support team\n\n---\n\n**DSAGrind** - Empowering developers through competitive programming! 🚀","size_bytes":19923},"replit.md":{"content":"# DSAGrind - Competitive Programming Platform\n\n## Overview\n\nDSAGrind is a comprehensive competitive programming platform designed to help developers practice coding problems with AI-powered assistance. The platform features a microservices architecture built with .NET 8 backend and React TypeScript frontend, providing multi-language IDE support, real-time code execution, AI-powered hints, admin management capabilities, OAuth authentication, and premium subscription features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build System**: Vite for fast development and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management with Context API for global application state\n- **UI Framework**: Tailwind CSS with Shadcn UI component library for consistent design system\n- **Code Editor**: Monaco Editor (VS Code engine) for multi-language code editing\n- **Authentication**: JWT-based authentication with refresh token rotation\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Microservices Design**: 8 independent services communicating through an API Gateway\n- **API Gateway**: YARP reverse proxy handling routing, rate limiting, and load balancing\n- **Authentication Service**: JWT + OAuth (Google, GitHub) with refresh token management\n- **Problems Service**: CRUD operations for coding problems and categories\n- **Submissions Service**: Code execution engine with Docker sandboxing\n- **AI Service**: OpenAI integration for hints, explanations, and problem analysis\n- **Search Service**: Vector search using Qdrant for semantic problem discovery\n- **Admin Service**: Content management and user administration\n- **Payments Service**: Stripe integration for subscription management\n\n### Data Layer\n- **Primary Database**: MongoDB Atlas for document storage with flexible schema\n- **Caching**: Redis for session management, query caching, and real-time data\n- **Message Queue**: Apache Kafka for event-driven communication between services\n- **Vector Database**: Qdrant for semantic search and problem recommendations\n\n### Authentication & Authorization\n- **JWT Tokens**: Access tokens (15-60 min) with refresh tokens (7-30 days)\n- **OAuth Integration**: Google and GitHub OAuth with PKCE flow\n- **Role-based Access**: User, Premium, Admin roles with granular permissions\n- **Session Management**: Distributed sessions with Redis backing\n\n### Code Execution Engine\n- **Sandboxing**: Docker containers for secure code execution\n- **Multi-language Support**: Python, JavaScript, Java, C++, C#, Go, Rust, PHP\n- **Test Case Validation**: Hidden and visible test cases with performance metrics\n- **Real-time Results**: WebSocket-based live execution feedback\n\n## External Dependencies\n\n### Third-Party Services\n- **MongoDB Atlas**: Cloud NoSQL database for primary data storage\n- **Redis Cloud**: In-memory caching and session store\n- **Stripe**: Payment processing for premium subscriptions\n- **OpenAI API**: AI-powered hints, explanations, and code analysis\n- **Qdrant**: Vector database for semantic search capabilities\n- **SendGrid**: Email service for user verification and notifications\n\n### Development & Infrastructure\n- **Docker**: Containerization for consistent deployment environments\n- **Apache Kafka**: Message broker for microservices communication\n- **YARP**: .NET reverse proxy for API Gateway functionality\n- **Monaco Editor**: Web-based code editor with syntax highlighting\n- **Font Awesome**: Icon library for UI components\n\n### Authentication Providers\n- **Google OAuth 2.0**: Social login integration\n- **GitHub OAuth**: Developer-focused authentication\n- **JWT**: Self-contained token-based authentication\n\n### Monitoring & Logging\n- **Serilog**: Structured logging across all .NET services\n- **Application Insights**: Performance monitoring and telemetry (production)\n\n### Frontend Dependencies\n- **Radix UI**: Headless UI components for accessibility\n- **Framer Motion**: Animation library for smooth interactions\n- **React Hook Form**: Form state management with validation\n- **Recharts**: Data visualization for analytics dashboards","size_bytes":4356},"start-all.sh":{"content":"#!/bin/bash\n# DSAGrind - Complete Application Startup Script (Linux/macOS)\n# Starts both backend microservices and frontend React application\n\nset -e\n\necho \"🚀 Starting DSAGrind Complete Application...\"\necho \"=============================================\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if a port is available\ncheck_port() {\n    local port=$1\n    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null; then\n        return 1  # Port is in use\n    else\n        return 0  # Port is available\n    fi\n}\n\n# Function to wait for service to be ready\nwait_for_service() {\n    local name=$1\n    local port=$2\n    local max_attempts=30\n    local attempt=1\n    \n    print_status \"Waiting for $name to be ready on port $port...\"\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -f -s \"http://localhost:$port/health\" > /dev/null 2>&1 || \\\n           curl -f -s \"http://localhost:$port/api/health\" > /dev/null 2>&1 || \\\n           curl -f -s \"http://localhost:$port/\" > /dev/null 2>&1; then\n            print_success \"$name is ready!\"\n            return 0\n        fi\n        \n        echo -n \".\"\n        sleep 2\n        attempt=$((attempt + 1))\n    done\n    \n    print_warning \"$name didn't respond after $((max_attempts * 2)) seconds\"\n    return 1\n}\n\n# Cleanup function\ncleanup() {\n    print_status \"Stopping all services...\"\n    \n    # Kill backend services\n    pkill -f \"dotnet.*DSAGrind\" || true\n    \n    # Kill frontend\n    pkill -f \"vite.*client\" || true\n    pkill -f \"npm.*dev\" || true\n    \n    # Remove PID files\n    rm -f backend/pids.txt\n    rm -f client/vite.pid\n    \n    print_success \"All services stopped\"\n    exit 0\n}\n\n# Set up signal handlers\ntrap cleanup SIGINT SIGTERM\n\n# Check prerequisites\nprint_status \"Checking prerequisites...\"\n\n# Check .NET\nif ! command -v dotnet &> /dev/null; then\n    print_error \".NET 8 SDK is required but not installed\"\n    exit 1\nfi\n\n# Check Node.js\nif ! command -v node &> /dev/null; then\n    print_error \"Node.js is required but not installed\"\n    exit 1\nfi\n\n# Check npm\nif ! command -v npm &> /dev/null; then\n    print_error \"npm is required but not installed\"\n    exit 1\nfi\n\nprint_success \"All prerequisites are available\"\n\n# Check ports\nprint_status \"Checking port availability...\"\nports=(3000 5000 5001 5002 5003 5004 5005 5006 8080)\nfor port in \"${ports[@]}\"; do\n    if ! check_port $port; then\n        print_error \"Port $port is already in use. Please stop the service using this port.\"\n        exit 1\n    fi\ndone\nprint_success \"All required ports are available\"\n\n# Create logs directory\nmkdir -p backend/logs\nmkdir -p logs\n\n# Install frontend dependencies if needed\nif [ ! -d \"client/node_modules\" ]; then\n    print_status \"Installing frontend dependencies...\"\n    cd client\n    npm install\n    cd ..\n    print_success \"Frontend dependencies installed\"\nfi\n\n# Build backend services\nprint_status \"Building backend services...\"\ncd backend\ndotnet build --configuration Release --no-restore\nif [ $? -ne 0 ]; then\n    print_error \"Backend build failed\"\n    exit 1\nfi\ncd ..\nprint_success \"Backend services built successfully\"\n\n# Start backend services\nprint_status \"Starting backend microservices...\"\n\n# Start Gateway API (Port 5000)\nprint_status \"Starting Gateway API on port 5000...\"\ncd backend/src/Services/DSAGrind.Gateway.API\nnohup dotnet run --urls=\"http://0.0.0.0:5000\" > ../../logs/gateway.log 2>&1 &\nGATEWAY_PID=$!\ncd ../../..\n\n# Start Auth API (Port 8080)\nprint_status \"Starting Auth API on port 8080...\"\ncd backend/src/Services/DSAGrind.Auth.API\nnohup dotnet run --urls=\"http://0.0.0.0:8080\" > ../../logs/auth.log 2>&1 &\nAUTH_PID=$!\ncd ../../..\n\n# Start Problems API (Port 5001)\nprint_status \"Starting Problems API on port 5001...\"\ncd backend/src/Services/DSAGrind.Problems.API\nnohup dotnet run --urls=\"http://0.0.0.0:5001\" > ../../logs/problems.log 2>&1 &\nPROBLEMS_PID=$!\ncd ../../..\n\n# Start Submissions API (Port 5002)\nprint_status \"Starting Submissions API on port 5002...\"\ncd backend/src/Services/DSAGrind.Submissions.API\nnohup dotnet run --urls=\"http://0.0.0.0:5002\" > ../../logs/submissions.log 2>&1 &\nSUBMISSIONS_PID=$!\ncd ../../..\n\n# Start AI API (Port 5003)\nprint_status \"Starting AI API on port 5003...\"\ncd backend/src/Services/DSAGrind.AI.API\nnohup dotnet run --urls=\"http://0.0.0.0:5003\" > ../../logs/ai.log 2>&1 &\nAI_PID=$!\ncd ../../..\n\n# Start Search API (Port 5004)\nprint_status \"Starting Search API on port 5004...\"\ncd backend/src/Services/DSAGrind.Search.API\nnohup dotnet run --urls=\"http://0.0.0.0:5004\" > ../../logs/search.log 2>&1 &\nSEARCH_PID=$!\ncd ../../..\n\n# Start Admin API (Port 5005)\nprint_status \"Starting Admin API on port 5005...\"\ncd backend/src/Services/DSAGrind.Admin.API\nnohup dotnet run --urls=\"http://0.0.0.0:5005\" > ../../logs/admin.log 2>&1 &\nADMIN_PID=$!\ncd ../../..\n\n# Start Payments API (Port 5006)\nprint_status \"Starting Payments API on port 5006...\"\ncd backend/src/Services/DSAGrind.Payments.API\nnohup dotnet run --urls=\"http://0.0.0.0:5006\" > ../../logs/payments.log 2>&1 &\nPAYMENTS_PID=$!\ncd ../../..\n\n# Store PIDs\necho \"$GATEWAY_PID $AUTH_PID $PROBLEMS_PID $SUBMISSIONS_PID $AI_PID $SEARCH_PID $ADMIN_PID $PAYMENTS_PID\" > backend/pids.txt\n\n# Wait for backend services to start\nprint_status \"Waiting for backend services to initialize...\"\nsleep 10\n\n# Check backend services health\nprint_status \"Performing health checks on backend services...\"\nservices=(\n    \"Gateway:5000\"\n    \"Auth:8080\"\n    \"Problems:5001\"\n    \"Submissions:5002\"\n    \"AI:5003\"\n    \"Search:5004\"\n    \"Admin:5005\"\n    \"Payments:5006\"\n)\n\nbackend_ready=true\nfor service in \"${services[@]}\"; do\n    name=$(echo $service | cut -d: -f1)\n    port=$(echo $service | cut -d: -f2)\n    \n    if wait_for_service \"$name\" \"$port\"; then\n        print_success \"$name API is ready\"\n    else\n        print_warning \"$name API is not responding (will continue anyway)\"\n        backend_ready=false\n    fi\ndone\n\n# Start frontend\nprint_status \"Starting React frontend on port 3000...\"\ncd client\nnohup npm run dev > ../logs/frontend.log 2>&1 &\nFRONTEND_PID=$!\necho $FRONTEND_PID > vite.pid\ncd ..\n\n# Wait for frontend to start\nwait_for_service \"Frontend\" \"3000\"\n\nprint_success \"🎉 DSAGrind application started successfully!\"\necho \"\"\necho \"📚 Service URLs:\"\necho \"   🌐 Frontend:        http://localhost:3000\"\necho \"   🔧 Gateway API:     http://localhost:5000\"\necho \"   🔐 Auth API:        http://localhost:8080\"\necho \"   📝 Problems API:    http://localhost:5001\"\necho \"   ⚡ Submissions API:  http://localhost:5002\"\necho \"   🤖 AI API:          http://localhost:5003\"\necho \"   🔍 Search API:      http://localhost:5004\"\necho \"   👑 Admin API:       http://localhost:5005\"\necho \"   💳 Payments API:    http://localhost:5006\"\necho \"\"\necho \"📖 Additional Resources:\"\necho \"   📋 API Documentation: http://localhost:5000/swagger\"\necho \"   📊 Admin Dashboard:   http://localhost:3000/admin\"\necho \"   📝 Logs Directory:    ./logs/\"\necho \"\"\necho \"🛑 To stop all services: Press Ctrl+C or run ./stop-all.sh\"\necho \"\"\n\nif [ \"$backend_ready\" = true ]; then\n    print_success \"All services are running and healthy!\"\nelse\n    print_warning \"Some services may not be fully ready. Check logs in ./logs/ for details.\"\nfi\n\n# Keep script running and monitor services\nprint_status \"Monitoring services... Press Ctrl+C to stop all services\"\n\nwhile true; do\n    sleep 30\n    \n    # Check if main processes are still running\n    if ! kill -0 $GATEWAY_PID 2>/dev/null; then\n        print_error \"Gateway API stopped unexpectedly!\"\n        cleanup\n    fi\n    \n    if ! kill -0 $FRONTEND_PID 2>/dev/null; then\n        print_error \"Frontend stopped unexpectedly!\"\n        cleanup\n    fi\ndone","size_bytes":8020},"backend/start-all-services.sh":{"content":"#!/bin/bash\n\n# DSA Grind - Start All Microservices\necho \"🚀 Starting DSA Grind Microservices...\"\n\n# Check if MongoDB connection string is set\nif [ -z \"$MONGODB_CONNECTION_STRING\" ]; then\n    echo \"⚠️  Warning: MONGODB_CONNECTION_STRING environment variable not set\"\n    echo \"Please set it in your .env file or environment\"\nfi\n\n# Function to start a service in background\nstart_service() {\n    local service_name=$1\n    local port=$2\n    local project_path=$3\n    \n    echo \"🌱 Starting $service_name on port $port...\"\n    cd \"$project_path\"\n    dotnet run --urls=\"http://0.0.0.0:$port\" &\n    echo $! > \"/tmp/dsagrind_${service_name}.pid\"\n    cd - > /dev/null\n}\n\n# Kill any existing processes\necho \"🧹 Cleaning up existing processes...\"\npkill -f \"dotnet.*DSAGrind\" || true\nrm -f /tmp/dsagrind_*.pid\n\n# Start all services\nstart_service \"gateway\" 5000 \"src/Services/DSAGrind.Gateway.API\"\nsleep 2\n\nstart_service \"auth\" 8080 \"src/Services/DSAGrind.Auth.API\"\nsleep 2\n\nstart_service \"problems\" 5001 \"src/Services/DSAGrind.Problems.API\"\nsleep 2\n\nstart_service \"submissions\" 5002 \"src/Services/DSAGrind.Submissions.API\"\nsleep 2\n\nstart_service \"ai\" 5003 \"src/Services/DSAGrind.AI.API\"\nsleep 2\n\nstart_service \"search\" 5004 \"src/Services/DSAGrind.Search.API\"\nsleep 2\n\nstart_service \"admin\" 5005 \"src/Services/DSAGrind.Admin.API\"\nsleep 2\n\nstart_service \"payments\" 5006 \"src/Services/DSAGrind.Payments.API\"\n\necho \"\"\necho \"✅ All services started!\"\necho \"\"\necho \"📊 Service Status:\"\necho \"🌐 Gateway API:    http://localhost:5000\"\necho \"🔐 Auth API:       http://localhost:8080\"\necho \"📝 Problems API:   http://localhost:5001\"\necho \"⚡ Submissions API: http://localhost:5002\"\necho \"🤖 AI API:         http://localhost:5003\"\necho \"🔍 Search API:     http://localhost:5004\"\necho \"👑 Admin API:      http://localhost:5005\"\necho \"💳 Payments API:   http://localhost:5006\"\necho \"\"\necho \"🛑 To stop all services, run: ./stop-all-services.sh\"\necho \"📋 To view logs: docker logs <service_name>\"\necho \"🩺 Health checks: curl http://localhost:<port>/health\"\n\n# Wait for user input to keep script running\necho \"\"\necho \"Press Ctrl+C to stop all services...\"\ntrap 'echo \"🛑 Stopping all services...\"; pkill -f \"dotnet.*DSAGrind\"; rm -f /tmp/dsagrind_*.pid; echo \"✅ All services stopped!\"; exit 0' INT\n\n# Keep script running\nwhile true; do\n    sleep 1\ndone","size_bytes":2366},"client/postcss.config.js":{"content":"export default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}","size_bytes":90},"client/tailwind.config.ts":{"content":"import type { Config } from 'tailwindcss'\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n    './index.html',\n  ],\n  prefix: '',\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', 'monospace'],\n        display: ['Poppins', 'Inter', 'system-ui', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config\n\nexport default config","size_bytes":2439},"client/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { resolve } from 'node:path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src'),\n      '@/components': resolve(__dirname, './src/components'),\n      '@/lib': resolve(__dirname, './src/lib'),\n      '@/hooks': resolve(__dirname, './src/hooks'),\n      '@/types': resolve(__dirname, './src/types'),\n      '@/contexts': resolve(__dirname, './src/contexts'),\n      '@/pages': resolve(__dirname, './src/pages'),\n    },\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 3000,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu', '@radix-ui/react-select'],\n          monaco: ['monaco-editor', '@monaco-editor/react'],\n        },\n      },\n    },\n  },\n  optimizeDeps: {\n    include: ['monaco-editor'],\n  },\n})","size_bytes":1195},"docs/FEATURES_DOCUMENTATION.md":{"content":"# DSAGrind Features Documentation\n\n## Table of Contents\n1. [Authentication & User Management](#authentication--user-management)\n2. [Problem Management System](#problem-management-system)\n3. [Code Editor & Execution](#code-editor--execution)\n4. [AI-Powered Assistance](#ai-powered-assistance)\n5. [Admin Dashboard](#admin-dashboard)\n6. [Subscription & Payments](#subscription--payments)\n7. [Search & Discovery](#search--discovery)\n8. [Analytics & Progress Tracking](#analytics--progress-tracking)\n9. [Real-time Features](#real-time-features)\n10. [Mobile Responsiveness](#mobile-responsiveness)\n\n## Authentication & User Management\n\n### 1.1 User Registration & Email Verification\n\n**Features:**\n- Secure user registration with email verification\n- Password strength requirements\n- Username uniqueness validation\n- Email confirmation workflow\n\n**Implementation:**\n```typescript\n// Registration form with validation\nconst registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  username: z.string().min(3).max(30),\n  password: z.string().min(8).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1)\n});\n\n// Email verification flow\nconst verifyEmail = async (token: string) => {\n  const response = await api.post('/auth/verify-email', { token });\n  if (response.success) {\n    toast.success('Email verified successfully!');\n    router.push('/dashboard');\n  }\n};\n```\n\n**Backend Implementation:**\n```csharp\npublic async Task<AuthResponseDto> RegisterAsync(RegisterRequestDto request, string ipAddress)\n{\n    // Validate input\n    var validator = new RegisterRequestValidator();\n    var validationResult = await validator.ValidateAsync(request);\n    \n    if (!validationResult.IsValid)\n        throw new ValidationException(validationResult.Errors);\n\n    // Check if user exists\n    var existingUser = await _userRepository.GetByEmailAsync(request.Email);\n    if (existingUser != null)\n        throw new InvalidOperationException(\"User already exists\");\n\n    // Hash password\n    var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.Password);\n\n    // Generate email verification token\n    var verificationToken = GenerateSecureToken();\n\n    var user = new User\n    {\n        Username = request.Username,\n        Email = request.Email,\n        PasswordHash = passwordHash,\n        FirstName = request.FirstName,\n        LastName = request.LastName,\n        EmailVerificationToken = verificationToken,\n        Role = \"user\",\n        CreatedAt = DateTime.UtcNow,\n        UpdatedAt = DateTime.UtcNow\n    };\n\n    await _userRepository.CreateAsync(user, cancellationToken);\n\n    // Send verification email\n    await _emailService.SendEmailVerificationAsync(user.Email, user.Username, verificationToken, cancellationToken);\n\n    // Generate JWT tokens\n    var accessToken = _jwtService.GenerateAccessToken(user);\n    var refreshToken = _jwtService.GenerateRefreshToken();\n\n    return new AuthResponseDto\n    {\n        AccessToken = accessToken,\n        RefreshToken = refreshToken,\n        User = _mapper.Map<UserDto>(user)\n    };\n}\n```\n\n### 1.2 OAuth Integration (Google & GitHub)\n\n**Features:**\n- Seamless OAuth login with Google and GitHub\n- Automatic account creation for new OAuth users\n- Profile synchronization\n- Secure token management\n\n**Frontend Implementation:**\n```typescript\n// OAuth login buttons\nconst OAuthButton: React.FC<{ provider: 'google' | 'github' }> = ({ provider }) => {\n  const handleOAuthLogin = () => {\n    const authUrl = `${API_BASE_URL}/auth/oauth/${provider}`;\n    window.location.href = authUrl;\n  };\n\n  return (\n    <Button\n      onClick={handleOAuthLogin}\n      variant=\"outline\"\n      className=\"w-full\"\n    >\n      <Icon name={provider} className=\"mr-2\" />\n      Continue with {provider === 'google' ? 'Google' : 'GitHub'}\n    </Button>\n  );\n};\n```\n\n**Backend OAuth Controller:**\n```csharp\n[HttpGet(\"oauth/{provider}\")]\npublic IActionResult OAuth(string provider)\n{\n    var authUrl = provider.ToLower() switch\n    {\n        \"google\" => _oAuthService.GetGoogleAuthUrl(),\n        \"github\" => _oAuthService.GetGitHubAuthUrl(),\n        _ => throw new ArgumentException(\"Invalid OAuth provider\")\n    };\n\n    return Redirect(authUrl);\n}\n\n[HttpGet(\"oauth/{provider}/callback\")]\npublic async Task<IActionResult> OAuthCallback(string provider, string code, string state)\n{\n    try\n    {\n        var result = await _oAuthService.HandleCallbackAsync(provider, code, state);\n        \n        // Set refresh token cookie\n        SetRefreshTokenCookie(result.RefreshToken);\n        \n        // Redirect to frontend with success\n        return Redirect($\"{_frontendUrl}/auth/success?token={result.AccessToken}\");\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, \"OAuth callback error for provider: {Provider}\", provider);\n        return Redirect($\"{_frontendUrl}/auth/error\");\n    }\n}\n```\n\n### 1.3 JWT Authentication & Token Management\n\n**Features:**\n- Secure JWT access tokens (15-minute expiry)\n- Long-lived refresh tokens (30-day expiry)\n- Automatic token refresh\n- Secure HttpOnly cookie storage for refresh tokens\n\n**JWT Service Implementation:**\n```csharp\npublic string GenerateAccessToken(User user)\n{\n    var claims = new List<Claim>\n    {\n        new(ClaimTypes.NameIdentifier, user.Id),\n        new(ClaimTypes.Email, user.Email),\n        new(ClaimTypes.Name, user.Username),\n        new(ClaimTypes.Role, user.Role),\n        new(\"email_verified\", user.IsEmailVerified.ToString())\n    };\n\n    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtSettings.Secret));\n    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n    var token = new JwtSecurityToken(\n        issuer: _jwtSettings.Issuer,\n        audience: _jwtSettings.Audience,\n        claims: claims,\n        expires: DateTime.UtcNow.AddMinutes(_jwtSettings.AccessTokenExpirationMinutes),\n        signingCredentials: credentials\n    );\n\n    return new JwtSecurityTokenHandler().WriteToken(token);\n}\n```\n\n### 1.4 Password Reset & Security\n\n**Features:**\n- Secure password reset via email\n- Rate limiting for reset requests\n- Token expiration (1-hour)\n- Password strength validation\n\n## Problem Management System\n\n### 2.1 Category Management\n\n**Features:**\n- Hierarchical category structure\n- Free problem limits per category\n- Category-based progression tracking\n- Admin category management\n\n**Category Model:**\n```typescript\ninterface Category {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  icon: string;\n  freeQuestionLimit: number;\n  totalQuestions: number;\n  userProgress?: {\n    solved: number;\n    attempted: number;\n    percentage: number;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n```\n\n**Category Management Component:**\n```typescript\nconst CategoryManager: React.FC = () => {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [isAddingCategory, setIsAddingCategory] = useState(false);\n\n  const { data: categoriesData, isLoading } = useQuery({\n    queryKey: ['/api/categories'],\n    queryFn: () => api.get('/api/categories')\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: (categoryData: CreateCategoryDto) => \n      api.post('/api/categories', categoryData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast.success('Category created successfully!');\n      setIsAddingCategory(false);\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Category creation form */}\n      <CategoryForm \n        onSubmit={createCategoryMutation.mutate}\n        isOpen={isAddingCategory}\n        onClose={() => setIsAddingCategory(false)}\n      />\n      \n      {/* Categories grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {categories.map(category => (\n          <CategoryCard \n            key={category.id} \n            category={category}\n            onEdit={handleEditCategory}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n```\n\n### 2.2 Problem Creation & Management\n\n**Features:**\n- Rich text editor for problem descriptions\n- Multiple test case management\n- Solution template creation\n- Difficulty assessment\n- Tag management system\n\n**Problem Creation Form:**\n```typescript\nconst ProblemForm: React.FC = () => {\n  const form = useForm<CreateProblemDto>({\n    resolver: zodResolver(createProblemSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      difficulty: 'Easy',\n      tags: [],\n      isPremium: false,\n      testCases: [],\n      examples: []\n    }\n  });\n\n  const createProblemMutation = useMutation({\n    mutationFn: (data: CreateProblemDto) => api.post('/api/problems', data),\n    onSuccess: () => {\n      toast.success('Problem created successfully!');\n      form.reset();\n    }\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(createProblemMutation.mutate)}>\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Title</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Two Sum\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"difficulty\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Difficulty</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Easy\">Easy</SelectItem>\n                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                    <SelectItem value=\"Hard\">Hard</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Description */}\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <RichTextEditor\n                  value={field.value}\n                  onChange={field.onChange}\n                  placeholder=\"Describe the problem...\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Test Cases */}\n        <TestCaseManager\n          testCases={form.watch('testCases')}\n          onChange={(testCases) => form.setValue('testCases', testCases)}\n        />\n\n        <Button type=\"submit\" disabled={createProblemMutation.isPending}>\n          {createProblemMutation.isPending ? 'Creating...' : 'Create Problem'}\n        </Button>\n      </form>\n    </Form>\n  );\n};\n```\n\n### 2.3 Bulk Import System\n\n**Features:**\n- Excel/CSV file upload\n- Data validation and sanitization\n- AI-powered data enhancement\n- Import preview and confirmation\n- Error reporting and handling\n\n**Bulk Import Component:**\n```typescript\nconst BulkImport: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [previewData, setPreviewData] = useState<BulkProblemDto[]>([]);\n  const [importResults, setImportResults] = useState<ImportResult | null>(null);\n\n  const uploadMutation = useMutation({\n    mutationFn: (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      return api.post('/api/problems/bulk-import', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n    },\n    onSuccess: (result) => {\n      setImportResults(result);\n      toast.success(`${result.successCount} problems imported successfully!`);\n    },\n    onError: (error) => {\n      toast.error('Import failed. Please check your file format.');\n    }\n  });\n\n  const downloadTemplate = () => {\n    const headers = [\n      'title', 'description', 'difficulty', 'categorySlug', 'tags',\n      'isPremium', 'constraints', 'examples', 'testCases', 'solution', 'hints'\n    ];\n    \n    const csvContent = headers.join(',') + '\\n' + \n      '\"Two Sum\",\"Given array find sum\",\"Easy\",\"arrays\",\"Array,Hash\",\"false\",...';\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'problems-template.csv';\n    a.click();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Bulk Import Problems</CardTitle>\n          <CardDescription>\n            Upload an Excel or CSV file to import multiple problems at once.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Button onClick={downloadTemplate} variant=\"outline\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Download Template\n            </Button>\n            \n            <FileUpload\n              accept=\".csv,.xlsx,.xls\"\n              onFileSelect={setFile}\n              maxSize={10 * 1024 * 1024} // 10MB\n            />\n            \n            {file && (\n              <Button \n                onClick={() => uploadMutation.mutate(file)}\n                disabled={uploadMutation.isPending}\n              >\n                {uploadMutation.isPending ? 'Importing...' : 'Import Problems'}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {importResults && (\n        <ImportResults results={importResults} />\n      )}\n    </div>\n  );\n};\n```\n\n**Backend Bulk Import Service:**\n```csharp\npublic async Task<List<ProblemDto>> BulkImportProblemsAsync(BulkImportRequestDto request, string userId, CancellationToken cancellationToken = default)\n{\n    var problems = new List<Problem>();\n\n    foreach (var item in request.Problems)\n    {\n        var problem = new Problem\n        {\n            Id = Guid.NewGuid().ToString(),\n            Title = item.Title,\n            Slug = GenerateSlug(item.Title),\n            Description = item.Description,\n            Difficulty = item.Difficulty,\n            CategoryId = item.CategoryId,\n            Tags = item.Tags ?? new List<string>(),\n            IsPaid = item.IsPaid,\n            Status = \"pending\",\n            CreatedBy = userId,\n            CreatedAt = DateTime.UtcNow,\n            UpdatedAt = DateTime.UtcNow,\n            Statistics = new ProblemStatistics()\n        };\n\n        problems.Add(problem);\n    }\n\n    await _problemRepository.CreateManyAsync(problems, cancellationToken);\n\n    // Publish event\n    await _eventPublisher.PublishAsync(\"problems.bulk_imported\", new { Count = problems.Count, UserId = userId }, cancellationToken);\n\n    return _mapper.Map<List<ProblemDto>>(problems);\n}\n```\n\n## Code Editor & Execution\n\n### 3.1 Monaco Editor Integration\n\n**Features:**\n- VS Code-like editing experience\n- Multi-language syntax highlighting\n- IntelliSense and auto-completion\n- Code formatting and linting\n- Customizable themes (light/dark)\n\n**Monaco Editor Component:**\n```typescript\nconst CodeEditor: React.FC<CodeEditorProps> = ({\n  language,\n  value,\n  onChange,\n  theme = 'vs-dark'\n}) => {\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor>();\n\n  const handleEditorDidMount = (editor: monaco.editor.IStandaloneCodeEditor) => {\n    editorRef.current = editor;\n    \n    // Configure editor options\n    editor.updateOptions({\n      fontSize: 14,\n      lineHeight: 20,\n      fontFamily: 'JetBrains Mono, Consolas, monospace',\n      minimap: { enabled: true },\n      scrollBeyondLastLine: false,\n      automaticLayout: true\n    });\n\n    // Add custom key bindings\n    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {\n      onRunCode?.();\n    });\n  };\n\n  return (\n    <div className=\"relative h-full\">\n      <Editor\n        height=\"100%\"\n        defaultLanguage={language}\n        defaultValue={value}\n        theme={theme}\n        onChange={onChange}\n        onMount={handleEditorDidMount}\n        options={{\n          selectOnLineNumbers: true,\n          roundedSelection: false,\n          readOnly: false,\n          cursorStyle: 'line',\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n```\n\n### 3.2 Multi-Language Support\n\n**Supported Languages:**\n- Python 3.x\n- JavaScript (Node.js)\n- TypeScript\n- Java 11+\n- C++ (GCC 9+)\n- C# (.NET 6+)\n- Go 1.18+\n- Rust 1.60+\n\n**Language Configuration:**\n```typescript\nconst languageConfigs = {\n  python: {\n    extension: '.py',\n    template: `def solution():\\n    # Your code here\\n    pass\\n\\nif __name__ == \"__main__\":\\n    solution()`,\n    judge0Id: 71\n  },\n  javascript: {\n    extension: '.js',\n    template: `function solution() {\\n    // Your code here\\n}\\n\\nsolution();`,\n    judge0Id: 63\n  },\n  java: {\n    extension: '.java',\n    template: `public class Solution {\\n    public static void main(String[] args) {\\n        // Your code here\\n    }\\n}`,\n    judge0Id: 62\n  },\n  cpp: {\n    extension: '.cpp',\n    template: `#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    // Your code here\\n    return 0;\\n}`,\n    judge0Id: 54\n  }\n};\n```\n\n### 3.3 Code Execution & Testing\n\n**Features:**\n- Real-time code execution with Judge0 API\n- Custom test case validation\n- Performance metrics (time, memory)\n- Detailed error reporting\n- Code execution history\n\n**Code Execution Service:**\n```typescript\nconst CodeExecutionService = {\n  async executeCode(code: string, language: string, testCases: TestCase[]): Promise<ExecutionResult> {\n    const results: TestCaseResult[] = [];\n    \n    for (const testCase of testCases) {\n      const submission = await this.submitToJudge0({\n        source_code: code,\n        language_id: languageConfigs[language].judge0Id,\n        stdin: testCase.input,\n        expected_output: testCase.expectedOutput\n      });\n      \n      const result = await this.pollSubmissionResult(submission.token);\n      results.push({\n        testCase,\n        passed: result.status.id === 3, // Accepted\n        actualOutput: result.stdout,\n        executionTime: result.time,\n        memoryUsed: result.memory,\n        error: result.stderr\n      });\n    }\n    \n    return {\n      results,\n      allPassed: results.every(r => r.passed),\n      totalTime: results.reduce((sum, r) => sum + (r.executionTime || 0), 0),\n      maxMemory: Math.max(...results.map(r => r.memoryUsed || 0))\n    };\n  },\n\n  async submitToJudge0(submission: Judge0Submission): Promise<{ token: string }> {\n    const response = await fetch(`${JUDGE0_API_URL}/submissions?base64_encoded=false`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-RapidAPI-Key': JUDGE0_API_KEY\n      },\n      body: JSON.stringify(submission)\n    });\n    \n    return response.json();\n  },\n\n  async pollSubmissionResult(token: string): Promise<Judge0Result> {\n    let attempts = 0;\n    const maxAttempts = 10;\n    \n    while (attempts < maxAttempts) {\n      const response = await fetch(`${JUDGE0_API_URL}/submissions/${token}`, {\n        headers: {\n          'X-RapidAPI-Key': JUDGE0_API_KEY\n        }\n      });\n      \n      const result = await response.json();\n      \n      if (result.status.id > 2) { // Processing complete\n        return result;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 1000));\n      attempts++;\n    }\n    \n    throw new Error('Execution timeout');\n  }\n};\n```\n\n## AI-Powered Assistance\n\n### 4.1 Perplexity Integration\n\n**Features:**\n- Context-aware hint generation\n- Progressive hint levels\n- Code review and optimization\n- Explanation of algorithms and concepts\n\n**AI Service Implementation:**\n```csharp\npublic async Task<string> GenerateHintAsync(string problemId, string userCode, int hintLevel, CancellationToken cancellationToken = default)\n{\n    var problem = await _problemRepository.GetByIdAsync(problemId, cancellationToken);\n    \n    var prompt = hintLevel switch\n    {\n        1 => $\"For this coding problem: '{problem.Title}', provide a gentle hint about the approach without giving away the solution. Problem description: {problem.Description}\",\n        2 => $\"For this coding problem: '{problem.Title}', provide a more specific hint about the algorithm or data structure to use. User's current code: {userCode}\",\n        3 => $\"For this coding problem: '{problem.Title}', provide a detailed hint about the implementation approach. User's current code: {userCode}\",\n        _ => throw new ArgumentException(\"Invalid hint level\")\n    };\n\n    var request = new PerplexityRequest\n    {\n        Model = _aiSettings.PerplexityModel,\n        Messages = new[]\n        {\n            new { role = \"system\", content = \"You are a helpful coding tutor. Provide hints that guide learning without giving away the complete solution.\" },\n            new { role = \"user\", content = prompt }\n        },\n        MaxTokens = 200,\n        Temperature = 0.7\n    };\n\n    using var httpClient = _httpClientFactory.CreateClient();\n    httpClient.DefaultRequestHeaders.Add(\"Authorization\", $\"Bearer {_aiSettings.PerplexityApiKey}\");\n\n    var response = await httpClient.PostAsJsonAsync(_aiSettings.PerplexityBaseUrl + \"/chat/completions\", request, cancellationToken);\n    var result = await response.Content.ReadFromJsonAsync<PerplexityResponse>(cancellationToken: cancellationToken);\n\n    return result.Choices[0].Message.Content;\n}\n```\n\n### 4.2 Smart Hint System\n\n**Features:**\n- Progressive disclosure of hints\n- Context-aware suggestions\n- Code analysis and feedback\n- Learning-focused guidance\n\n**Hint Component:**\n```typescript\nconst HintSystem: React.FC<{ problemId: string; userCode: string }> = ({ problemId, userCode }) => {\n  const [hints, setHints] = useState<string[]>([]);\n  const [currentHintLevel, setCurrentHintLevel] = useState(0);\n\n  const getHintMutation = useMutation({\n    mutationFn: ({ problemId, code, level }: { problemId: string; code: string; level: number }) =>\n      api.post('/api/ai/hint', { problemId, userCode: code, hintLevel: level }),\n    onSuccess: (hint) => {\n      setHints(prev => [...prev, hint]);\n      setCurrentHintLevel(prev => prev + 1);\n    }\n  });\n\n  const requestHint = () => {\n    getHintMutation.mutate({\n      problemId,\n      code: userCode,\n      level: currentHintLevel + 1\n    });\n  };\n\n  return (\n    <Card className=\"mt-4\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Lightbulb className=\"mr-2 h-5 w-5\" />\n          AI Hints\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {hints.length === 0 ? (\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              Stuck? Get a hint to guide you in the right direction.\n            </p>\n            <Button onClick={requestHint} disabled={getHintMutation.isPending}>\n              {getHintMutation.isPending ? 'Generating...' : 'Get Hint'}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {hints.map((hint, index) => (\n              <Alert key={index}>\n                <AlertDescription>\n                  <strong>Hint {index + 1}:</strong> {hint}\n                </AlertDescription>\n              </Alert>\n            ))}\n            \n            {currentHintLevel < 3 && (\n              <Button \n                onClick={requestHint} \n                variant=\"outline\"\n                disabled={getHintMutation.isPending}\n              >\n                Get More Specific Hint\n              </Button>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n```\n\n## Admin Dashboard\n\n### 5.1 Content Management\n\n**Features:**\n- Problem approval workflow\n- Category management\n- User content moderation\n- Bulk operations\n\n### 5.2 Analytics Dashboard\n\n**Features:**\n- User engagement metrics\n- Problem solving statistics\n- Revenue analytics\n- Performance monitoring\n\n### 5.3 User Management\n\n**Features:**\n- User account management\n- Subscription handling\n- Support ticket system\n- Activity monitoring\n\n## Subscription & Payments\n\n### 6.1 Stripe Integration\n\n**Features:**\n- Secure payment processing\n- Subscription management\n- Webhook handling\n- Invoice generation\n\n### 6.2 Pricing Plans\n\n**Plans:**\n- **Free**: Limited problems per category\n- **Premium Monthly**: $9.99/month - Unlimited access\n- **Premium Annual**: $99.99/year - Unlimited access + bonuses\n\n## Search & Discovery\n\n### 7.1 Vector Search\n\n**Features:**\n- Semantic problem search\n- Similar problem recommendations\n- Tag-based filtering\n- Difficulty progression\n\n### 7.2 Advanced Filtering\n\n**Features:**\n- Multi-criteria filtering\n- Saved search preferences\n- Sorting options\n- Progress-based recommendations\n\n## Analytics & Progress Tracking\n\n### 8.1 User Progress\n\n**Features:**\n- Solving statistics\n- Category progression\n- Skill assessment\n- Achievement system\n\n### 8.2 Performance Metrics\n\n**Features:**\n- Code execution analytics\n- Problem difficulty analysis\n- Learning path optimization\n- Comparative statistics\n\n## Real-time Features\n\n### 9.1 JWT Authentication\n```csharp\npublic async Task<AuthResult> LoginAsync(string email, string password)\n{\n    var user = await _userRepository.GetByEmailAsync(email);\n    \n    if (!_passwordService.Verify(password, user.PasswordHash))\n    {\n        return AuthResult.Failed(\"Invalid credentials\");\n    }\n    \n    var accessToken = _jwtService.GenerateAccessToken(user);\n    var refreshToken = _jwtService.GenerateRefreshToken();\n    \n    return AuthResult.Success(accessToken, refreshToken);\n}\n```\n\n#### 9.2 OAuth Integration\n- **Google OAuth**: Gmail account authentication\n- **GitHub OAuth**: Developer account integration\n- **Secure Flow**: PKCE implementation\n- **Profile Sync**: Automatic data population\n\n### 9.3 WebSocket Connections\n\n**Features:**\n- Real-time submission updates\n- Live code collaboration\n- Instant notifications\n- Competition mode\n\n## Mobile Responsiveness\n\n### 10.1 Responsive Design\n\n**Features:**\n- Mobile-first approach\n- Touch-friendly interfaces\n- Adaptive layouts\n- Performance optimization\n\n### 10.2 Progressive Web App\n\n**Features:**\n- Offline functionality\n- App-like experience\n- Push notifications\n- Background sync\n\n## Configuration Management\n\n### Environment Variables\n```bash\n# Core Services\nMONGODB_CONNECTION_STRING=mongodb+srv://...\nREDIS_CONNECTION_STRING=redis://...\nKAFKA_BOOTSTRAP_SERVERS=...\n\n# External APIs\nOPENAI_API_KEY=sk-...\nSTRIPE_SECRET_KEY=sk_test_...\nGOOGLE_CLIENT_ID=...\nGITHUB_CLIENT_ID=...\n\n# Security\nJWT_SECRET=...\nJWT_EXPIRY_MINUTES=15\nREFRESH_TOKEN_EXPIRY_DAYS=7\n```\n\nThis comprehensive feature documentation provides detailed implementation examples and covers all major aspects of the DSAGrind platform, ensuring developers have clear guidance for building and maintaining each feature.","size_bytes":27216},"docs/PRODUCTION_SETUP.md":{"content":"# DSAGrind Production Setup Guide\n\n## Overview\nThis guide covers the complete production deployment of DSAGrind, a competitive programming platform with microservices architecture.\n\n## Architecture Overview\n\n### Technology Stack\n\n#### Frontend (React + TypeScript)\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development\n- **Styling**: Tailwind CSS + Shadcn UI components\n- **State Management**: TanStack Query for server state\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Code Editor**: Monaco Editor for multi-language support\n- **Authentication**: JWT with refresh token rotation\n\n#### Backend (.NET 8 Microservices)\n- **API Gateway**: YARP Reverse Proxy (Port 5000)\n- **Authentication**: JWT + OAuth (Port 8080)\n- **Problems**: CRUD + Categories (Port 5001)\n- **Submissions**: Code execution (Port 5002)\n- **AI**: Test AI service (Port 5003)\n- **Search**: Vector search (Port 5004)\n- **Admin**: Management dashboard (Port 5005)\n- **Payments**: Stripe integration (Port 5006)\n\n#### Infrastructure\n- **Database**: MongoDB Atlas (Primary) + Redis (Cache)\n- **Message Queue**: Kafka for async processing\n- **Vector Search**: Qdrant for problem recommendations\n- **Email**: SendGrid for transactional emails\n- **Payments**: Stripe for subscription handling\n- **Monitoring**: Serilog + Application Insights\n- **Hosting**: Docker containers on cloud platforms\n\n## Pre-Deployment Checklist\n\n### 1. Environment Configuration\n\n#### Backend (.env in root)\n```bash\n# Database (Development - uses local/test values)\nMONGODB_CONNECTION_STRING=mongodb://localhost:27017/dsagrind_test\nREDIS_CONNECTION_STRING=redis://localhost:6379\n\n# AI Configuration (Test mode enabled)\nAI_DEFAULT_PROVIDER=Test\nPERPLEXITY_API_KEY=test-key-for-development\n\n# JWT Settings\nJWT_SECRET_KEY=super-secret-development-key-that-is-at-least-256-bits-long\n\n# OAuth (Development)\nGOOGLE_CLIENT_ID=test-google-client-id\nGITHUB_CLIENT_ID=test-github-client-id\n\n# Application\nASPNETCORE_ENVIRONMENT=Development\nCORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5000\n```\n\n#### Production Environment Variables\n```bash\n# Database (Production - MongoDB Atlas)\nMONGODB_CONNECTION_STRING=mongodb+srv://username:password@cluster.mongodb.net/dsagrind_prod?retryWrites=true&w=majority\nMONGODB_DATABASE_NAME=dsagrind_prod\nREDIS_CONNECTION_STRING=redis://username:password@redis-prod-host:6379\n\n# Kafka (Confluent Cloud)\nKAFKA_BOOTSTRAP_SERVERS=pkc-xxxxx.region.provider.confluent.cloud:9092\nKAFKA_USERNAME=kafka_username\nKAFKA_PASSWORD=kafka_password\nKAFKA_SECURITY_PROTOCOL=SASL_SSL\nKAFKA_SASL_MECHANISM=PLAIN\n\n# AI Services\nAI_DEFAULT_PROVIDER=Perplexity\nPERPLEXITY_API_KEY=pplx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nOPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n# Vector Database (Qdrant Cloud)\nQDRANT_URL=https://xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.us-east-1-0.aws.cloud.qdrant.io:6333\nQDRANT_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n# Authentication & Security\nJWT_SECRET_KEY=production-secret-key-256-bits-minimum-length-required\nJWT_ISSUER=DSAGrind\nJWT_AUDIENCE=DSAGrind.Users\nJWT_ACCESS_TOKEN_EXPIRY_MINUTES=15\nJWT_REFRESH_TOKEN_EXPIRY_DAYS=30\n\n# OAuth (Production)\nGOOGLE_CLIENT_ID=xxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=GOCSPXxxxxxxxxxxxxxxxxxxxxxxxx\nGITHUB_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxx\nGITHUB_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n# Payment Processing (Stripe Production)\nSTRIPE_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nSTRIPE_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n# Email Services (SendGrid)\nSENDGRID_API_KEY=SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nSENDGRID_FROM_EMAIL=noreply@dsagrind.com\nSENDGRID_FROM_NAME=DSAGrind\n\n# Application Configuration\nASPNETCORE_ENVIRONMENT=Production\nASPNETCORE_URLS=https://0.0.0.0:443;http://0.0.0.0:80\n\n# CORS (Production domains)\nCORS_ALLOWED_ORIGINS=https://dsagrind.com,https://www.dsagrind.com,https://app.dsagrind.com\n\n# Logging & Monitoring\nLOG_LEVEL=Information\nLOG_TO_FILE=true\nENABLE_DETAILED_ERRORS=false\nENABLE_SENSITIVE_DATA_LOGGING=false\n\n# External APIs\nCODE_EXECUTION_API_URL=https://api.judge0.com\nCODE_EXECUTION_API_KEY=production_judge0_api_key\n```\n\n### 2. Database Setup\n\n#### MongoDB Atlas Configuration\n1. **Create Production Cluster**\n   - Navigate to MongoDB Atlas\n   - Create new cluster in production region\n   - Configure VPC peering if needed\n   - Set up database user with strong password\n\n2. **Database Schema**\n   ```javascript\n   // Collections\n   db.users.createIndex({ \"email\": 1 }, { unique: true })\n   db.users.createIndex({ \"username\": 1 }, { unique: true })\n   db.problems.createIndex({ \"slug\": 1 }, { unique: true })\n   db.problems.createIndex({ \"categoryId\": 1, \"difficulty\": 1 })\n   db.categories.createIndex({ \"slug\": 1 }, { unique: true })\n   db.submissions.createIndex({ \"userId\": 1, \"problemId\": 1 })\n   ```\n\n3. **Backup Strategy**\n   - Enable automated backups\n   - Configure backup retention policy\n   - Set up cross-region backup replication\n\n#### Redis Setup\n1. **Redis Cloud Configuration**\n   - Create Redis instance\n   - Configure memory optimization\n   - Set up persistence options\n   - Enable clustering if needed\n\n### 3. Container Configuration\n\n#### Dockerfile (Backend Services)\n```dockerfile\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nWORKDIR /app\nEXPOSE 8080\nEXPOSE 8081\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\nCOPY [\"DSAGrind.Gateway.API/DSAGrind.Gateway.API.csproj\", \"DSAGrind.Gateway.API/\"]\nCOPY [\"DSAGrind.Common/DSAGrind.Common.csproj\", \"DSAGrind.Common/\"]\nRUN dotnet restore \"DSAGrind.Gateway.API/DSAGrind.Gateway.API.csproj\"\nCOPY . .\nWORKDIR \"/src/DSAGrind.Gateway.API\"\nRUN dotnet build \"DSAGrind.Gateway.API.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"DSAGrind.Gateway.API.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"DSAGrind.Gateway.API.dll\"]\n```\n\n#### Docker Compose (Production)\n```yaml\nversion: '3.8'\n\nservices:\n  gateway:\n    build:\n      context: ./backend/src/Services/DSAGrind.Gateway.API\n    ports:\n      - \"5000:8080\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n      - ConnectionStrings__MongoDB=${MONGODB_CONNECTION_STRING}\n      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING}\n    depends_on:\n      - auth-api\n      - problems-api\n    networks:\n      - dsagrind-network\n\n  auth-api:\n    build:\n      context: ./backend/src/Services/DSAGrind.Auth.API\n    ports:\n      - \"8080:8080\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n      - ConnectionStrings__MongoDB=${MONGODB_CONNECTION_STRING}\n      - JwtSettings__Secret=${JWT_SECRET_KEY}\n    networks:\n      - dsagrind-network\n\n  problems-api:\n    build:\n      context: ./backend/src/Services/DSAGrind.Problems.API\n    ports:\n      - \"5001:8080\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n      - ConnectionStrings__MongoDB=${MONGODB_CONNECTION_STRING}\n    networks:\n      - dsagrind-network\n\n  frontend:\n    build:\n      context: ./client\n      dockerfile: Dockerfile.prod\n    ports:\n      - \"3000:80\"\n    environment:\n      - VITE_API_URL=https://api.dsagrind.com\n    networks:\n      - dsagrind-network\n\nnetworks:\n  dsagrind-network:\n    driver: bridge\n```\n\n## Cloud Deployment Options\n\n### 1. Azure Container Instances\n\n#### Resource Group Setup\n```bash\n# Create resource group\naz group create --name dsagrind-prod --location eastus\n\n# Create container registry\naz acr create --resource-group dsagrind-prod --name dsagrindregistry --sku Basic\n\n# Build and push images\naz acr build --registry dsagrindregistry --image dsagrind/gateway:latest ./backend/src/Services/DSAGrind.Gateway.API\naz acr build --registry dsagrindregistry --image dsagrind/auth:latest ./backend/src/Services/DSAGrind.Auth.API\n```\n\n#### Container Deployment\n```bash\n# Deploy container group\naz container create \\\n  --resource-group dsagrind-prod \\\n  --name dsagrind-app \\\n  --image dsagrindregistry.azurecr.io/dsagrind/gateway:latest \\\n  --cpu 2 \\\n  --memory 4 \\\n  --ports 5000 \\\n  --environment-variables \\\n    ASPNETCORE_ENVIRONMENT=Production \\\n    MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING\n```\n\n### 2. AWS ECS Fargate\n\n#### Task Definition\n```json\n{\n  \"family\": \"dsagrind-gateway\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"1024\",\n  \"memory\": \"2048\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"gateway\",\n      \"image\": \"dsagrind/gateway:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8080,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\n          \"name\": \"ASPNETCORE_ENVIRONMENT\",\n          \"value\": \"Production\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/dsagrind-gateway\",\n          \"awslogs-region\": \"us-east-1\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ]\n}\n```\n\n### 3. Google Cloud Run\n\n#### Deployment Script\n```bash\n# Build and push to Container Registry\ndocker build -t gcr.io/dsagrind-prod/gateway ./backend/src/Services/DSAGrind.Gateway.API\ndocker push gcr.io/dsagrind-prod/gateway\n\n# Deploy to Cloud Run\ngcloud run deploy dsagrind-gateway \\\n  --image gcr.io/dsagrind-prod/gateway \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated \\\n  --set-env-vars ASPNETCORE_ENVIRONMENT=Production \\\n  --set-env-vars MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING\n```\n\n## Security Configuration\n\n### 1. SSL/TLS Setup\n```bash\n# Generate SSL certificate (Let's Encrypt)\ncertbot certonly --webroot -w /var/www/html -d dsagrind.com -d www.dsagrind.com\n\n# Configure HTTPS redirect\nserver {\n    listen 80;\n    server_name dsagrind.com www.dsagrind.com;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n### 2. Security Headers\n```csharp\n// Configure security headers in Startup.cs\napp.Use(async (context, next) =>\n{\n    context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\");\n    context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\");\n    context.Response.Headers.Add(\"X-XSS-Protection\", \"1; mode=block\");\n    context.Response.Headers.Add(\"Strict-Transport-Security\", \"max-age=31536000\");\n    await next();\n});\n```\n\n### 3. Rate Limiting\n```csharp\n// Configure rate limiting\nservices.AddRateLimiter(options =>\n{\n    options.AddFixedWindowLimiter(\"api\", configure =>\n    {\n        configure.PermitLimit = 100;\n        configure.Window = TimeSpan.FromMinutes(1);\n        configure.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\n        configure.QueueLimit = 50;\n    });\n});\n```\n\n## Monitoring & Logging\n\n### 1. Application Insights Configuration\n```csharp\n// Configure Application Insights\nservices.AddApplicationInsightsTelemetry(builder.Configuration[\"ApplicationInsights:ConnectionString\"]);\n\n// Custom telemetry\nservices.AddSingleton<ITelemetryInitializer, CustomTelemetryInitializer>();\n```\n\n### 2. Health Checks\n```csharp\n// Configure health checks\nservices.AddHealthChecks()\n    .AddMongoDb(mongoConnectionString)\n    .AddRedis(redisConnectionString)\n    .AddUrlGroup(new Uri(\"https://api.perplexity.ai/health\"), \"perplexity-api\");\n\napp.MapHealthChecks(\"/health\", new HealthCheckOptions\n{\n    ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse\n});\n```\n\n### 3. Structured Logging\n```csharp\n// Configure Serilog\nLog.Logger = new LoggerConfiguration()\n    .MinimumLevel.Information()\n    .MinimumLevel.Override(\"Microsoft\", LogEventLevel.Warning)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.ApplicationInsights(TelemetryConfiguration.CreateDefault(), TelemetryConverter.Traces)\n    .CreateLogger();\n```\n\n## Performance Optimization\n\n### 1. Caching Strategy\n```csharp\n// Configure Redis caching\nservices.AddStackExchangeRedisCache(options =>\n{\n    options.Configuration = redisConnectionString;\n    options.InstanceName = \"DSAGrind\";\n});\n\n// Implement caching in services\npublic async Task<ProblemDto> GetProblemAsync(string id)\n{\n    var cacheKey = $\"problem:{id}\";\n    var cached = await _cache.GetStringAsync(cacheKey);\n    \n    if (cached != null)\n        return JsonSerializer.Deserialize<ProblemDto>(cached);\n    \n    var problem = await _repository.GetByIdAsync(id);\n    await _cache.SetStringAsync(cacheKey, JsonSerializer.Serialize(problem), \n        new DistributedCacheEntryOptions { SlidingExpiration = TimeSpan.FromMinutes(30) });\n    \n    return problem;\n}\n```\n\n### 2. Database Optimization\n```csharp\n// Configure MongoDB connection pooling\nservices.Configure<MongoDbSettings>(options =>\n{\n    options.MaxConnectionPoolSize = 100;\n    options.MinConnectionPoolSize = 10;\n    options.MaxConnectionIdleTime = TimeSpan.FromMinutes(30);\n    options.ServerSelectionTimeout = TimeSpan.FromSeconds(30);\n});\n```\n\n## Backup & Disaster Recovery\n\n### 1. Database Backup\n```bash\n# Automated MongoDB backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_NAME=\"dsagrind_backup_$DATE\"\n\nmongodump --uri=\"$MONGODB_CONNECTION_STRING\" --out=\"/backups/$BACKUP_NAME\"\ntar -czf \"/backups/$BACKUP_NAME.tar.gz\" \"/backups/$BACKUP_NAME\"\naws s3 cp \"/backups/$BACKUP_NAME.tar.gz\" \"s3://dsagrind-backups/\"\nrm -rf \"/backups/$BACKUP_NAME\" \"/backups/$BACKUP_NAME.tar.gz\"\n```\n\n### 2. Application State Backup\n```bash\n# Backup application configuration\nkubectl get configmaps -o yaml > configmaps-backup.yaml\nkubectl get secrets -o yaml > secrets-backup.yaml\n```\n\n## Continuous Deployment\n\n### 1. GitHub Actions Workflow\n```yaml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n      \n      - name: Build and Test\n        run: |\n          dotnet restore\n          dotnet build --configuration Release\n          dotnet test --no-build --verbosity normal\n      \n      - name: Build Docker Images\n        run: |\n          docker build -t dsagrind/gateway:${{ github.sha }} ./backend/src/Services/DSAGrind.Gateway.API\n          docker build -t dsagrind/auth:${{ github.sha }} ./backend/src/Services/DSAGrind.Auth.API\n      \n      - name: Deploy to Cloud Run\n        run: |\n          echo ${{ secrets.GCP_SA_KEY }} | base64 -d > gcp-key.json\n          gcloud auth activate-service-account --key-file gcp-key.json\n          gcloud config set project dsagrind-prod\n          \n          gcloud run deploy dsagrind-gateway \\\n            --image gcr.io/dsagrind-prod/gateway:${{ github.sha }} \\\n            --region us-central1\n```\n\n## Post-Deployment Verification\n\n### 1. Health Check Verification\n```bash\n# Verify all services are healthy\ncurl https://dsagrind.com/health\ncurl https://api.dsagrind.com/auth/health\ncurl https://api.dsagrind.com/problems/health\n```\n\n### 2. Functional Testing\n```bash\n# Test user registration\ncurl -X POST https://api.dsagrind.com/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"test@example.com\",\"password\":\"TestPass123!\"}'\n\n# Test problem retrieval\ncurl https://api.dsagrind.com/problems?page=1&limit=10\n```\n\n### 3. Performance Testing\n```bash\n# Load testing with Apache Bench\nab -n 1000 -c 50 https://dsagrind.com/\nab -n 500 -c 25 https://api.dsagrind.com/problems\n```\n\n## Maintenance & Updates\n\n### 1. Zero-Downtime Deployment\n```bash\n# Rolling update strategy\nkubectl set image deployment/dsagrind-gateway gateway=dsagrind/gateway:v2.0.0\nkubectl rollout status deployment/dsagrind-gateway\n```\n\n### 2. Database Migration\n```csharp\n// Run database migrations\npublic class MigrationService\n{\n    public async Task MigrateAsync()\n    {\n        // Add new indexes\n        await _database.GetCollection<Problem>(\"problems\")\n            .Indexes.CreateOneAsync(new CreateIndexModel<Problem>(\n                Builders<Problem>.IndexKeys.Ascending(x => x.Difficulty)));\n        \n        // Data migration scripts\n        await MigrateUserProfiles();\n        await UpdateProblemSchema();\n    }\n}\n```\n\n## Troubleshooting\n\n### Common Production Issues\n\n1. **High Memory Usage**\n   - Monitor garbage collection\n   - Check for memory leaks\n   - Optimize caching strategies\n\n2. **Database Connection Issues**\n   - Verify connection string\n   - Check network connectivity\n   - Monitor connection pool usage\n\n3. **Slow API Responses**\n   - Enable query profiling\n   - Check database indexes\n   - Optimize expensive operations\n\n### Monitoring Commands\n```bash\n# Check application logs\nkubectl logs -f deployment/dsagrind-gateway\n\n# Monitor resource usage\nkubectl top pods\n\n# Check database performance\nmongostat --uri=\"$MONGODB_CONNECTION_STRING\"\n```\n\nThis production setup ensures high availability, security, and scalability for the DSAGrind platform while maintaining optimal performance and monitoring capabilities.","size_bytes":17143},"docs/SETUP_GUIDE.md":{"content":"# DSAGrind Setup Guide\n\n## Prerequisites\n\n### System Requirements\n- **Node.js 20+** - JavaScript runtime\n- **.NET 8 SDK** - Backend framework\n- **MongoDB** - Database (or MongoDB Atlas)\n- **Redis** - Caching (optional for development)\n- **Git** - Version control\n\n### Frontend Technologies\n- **React 18** - UI Library\n- **TypeScript** - Type Safety\n- **Vite** - Build Tool & Dev Server\n- **TailwindCSS** - Utility-first CSS Framework\n- **Shadcn/ui** - Component Library\n- **Wouter** - Lightweight Router\n- **TanStack Query** - Server State Management\n- **Framer Motion** - Animations\n- **Monaco Editor** - Code Editor\n- **Recharts** - Charts and Analytics\n\n### Backend Technologies\n- **.NET 8** - Backend Framework\n- **MongoDB** - Primary Database\n- **Redis** - Caching Layer\n- **Kafka** - Message Queue\n- **YARP** - Reverse Proxy\n- **Serilog** - Logging\n- **AutoMapper** - Object Mapping\n- **FluentValidation** - Input Validation\n\n## Installation\n\n### 1. Clone Repository\n```bash\ngit clone <repository-url>\ncd dsagrind\n```\n\n### 2. Frontend Setup\n```bash\ncd client\nnpm install\n```\n\n### 3. Backend Setup\n```bash\ncd backend\ndotnet restore\n```\n\n### 4. Environment Configuration\n\nCreate a `.env` file in the root directory:\n\n```env\n# Database Configuration\nDATABASE_URL=\"postgresql://username:password@localhost:5432/dsagrind\"\n\n# JWT Configuration\nJWT_SECRET=\"your-super-secret-jwt-key-change-in-production\"\nJWT_REFRESH_SECRET=\"your-refresh-secret-key-change-in-production\"\n\n# Application URLs\nFRONTEND_URL=\"http://localhost:5000\"\nBACKEND_URL=\"http://localhost:5000\"\n\n# External API Keys (Optional)\nPERPLEXITY_API_KEY=\"your-perplexity-api-key\"\nSTRIPE_SECRET_KEY=\"sk_test_your_stripe_secret_key\"\nSTRIPE_PUBLISHABLE_KEY=\"pk_test_your_stripe_publishable_key\"\n\n# Email Configuration (Optional - using mock service)\nSMTP_HOST=\"smtp.gmail.com\"\nSMTP_PORT=\"587\"\nSMTP_USER=\"your-email@gmail.com\"\nSMTP_PASS=\"your-app-password\"\n\n# Development\nNODE_ENV=\"development\"\nPORT=\"5000\"\n```\n\n## Database Setup\n\n### Option 1: Local PostgreSQL (Docker)\n```bash\ndocker run --name dsagrind-postgres \\\n  -e POSTGRES_DB=dsagrind \\\n  -e POSTGRES_USER=dsagrind_user \\\n  -e POSTGRES_PASSWORD=your_password \\\n  -p 5432:5432 \\\n  -d postgres:15\n\n# Update .env file\nDATABASE_URL=\"postgresql://dsagrind_user:your_password@localhost:5432/dsagrind\"\n```\n\n### Option 2: MongoDB Atlas (Recommended)\n1. Create account at [MongoDB Atlas](https://cloud.mongodb.com/)\n2. Create a free cluster\n3. Get connection string\n4. Update `.env` file:\n```env\nMONGODB_CONNECTION_STRING=\"mongodb+srv://username:password@cluster.mongodb.net/dsagrind\"\n```\n\n## Development\n\n### Start All Services\n```bash\n# Option 1: Use the startup script\n./start-all.sh\n\n# Option 2: Manual startup\n# Terminal 1: Frontend\ncd client && npm run dev\n\n# Terminal 2: Gateway API\ncd backend/src/Services/DSAGrind.Gateway.API\ndotnet run --urls=\"http://0.0.0.0:5000\"\n\n# Terminal 3: Auth API\ncd backend/src/Services/DSAGrind.Auth.API\ndotnet run --urls=\"http://0.0.0.0:8080\"\n```\n\n### Application URLs\n- **Frontend**: http://localhost:3000\n- **Gateway API**: http://localhost:5000\n- **Auth API**: http://localhost:8080\n- **Swagger UI**: http://localhost:5000/swagger\n\n## API Documentation\n\n### Authentication Endpoints\n```\nPOST /api/auth/register - User registration\nPOST /api/auth/login - User login\nPOST /api/auth/refresh - Refresh access token\nPOST /api/auth/logout - User logout\nPOST /api/auth/verify-email - Email verification\nPOST /api/auth/forgot-password - Password reset request\nPOST /api/auth/reset-password - Password reset\n```\n\n### Problems Endpoints\n```\nGET /api/problems - List problems\nGET /api/problems/{id} - Get problem details\nPOST /api/problems - Create problem (admin)\nPUT /api/problems/{id} - Update problem (admin)\nDELETE /api/problems/{id} - Delete problem (admin)\nPOST /api/problems/bulk-import - Bulk import problems\n```\n\n### Categories Endpoints\n```\nGET /api/categories - List categories\nGET /api/categories/{id} - Get category details\nPOST /api/categories - Create category (admin)\nPUT /api/categories/{id} - Update category (admin)\n```\n\n## Testing\n\n### Frontend Testing\n```bash\ncd client\nnpm test\nnpm run test:coverage\n```\n\n### Backend Testing\n```bash\ncd backend\ndotnet test\ndotnet test --collect:\"XPlat Code Coverage\"\n```\n\n### Integration Testing\n```bash\n# Start test environment\n./scripts/start-test-env.sh\n\n# Run integration tests\nnpm run test:integration\n```\n\n## Production Deployment\n\n### Environment Variables\nSet these in production:\n```env\nNODE_ENV=\"production\"\nASPNETCORE_ENVIRONMENT=\"Production\"\nJWT_SECRET=\"secure-production-secret-256-bits\"\nDATABASE_URL=\"production-database-url\"\nREDIS_URL=\"production-redis-url\"\n```\n\n### Build Commands\n```bash\n# Frontend\ncd client\nnpm run build\n\n# Backend\ncd backend\ndotnet publish -c Release\n```\n\n### Docker Deployment\n```bash\n# Build containers\ndocker-compose build\n\n# Start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Frontend not starting:**\n```bash\n# Clear cache and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Backend API errors:**\n```bash\n# Check .NET version\ndotnet --version\n\n# Restore packages\ndotnet restore\n\n# Clear build cache\ndotnet clean\n```\n\n**Database connection issues:**\n```bash\n# Test MongoDB connection\nmongosh \"your-connection-string\"\n\n# Check environment variables\necho $DATABASE_URL\n```\n\n### Performance Optimization\n\n**Frontend:**\n- Enable code splitting\n- Optimize bundle size\n- Use lazy loading for routes\n- Implement proper caching\n\n**Backend:**\n- Enable response compression\n- Use connection pooling\n- Implement caching strategies\n- Optimize database queries\n\n### Monitoring & Logging\n\n**Application Logs:**\n```bash\n# View application logs\ntail -f logs/dsagrind.log\n\n# View specific service logs\ndocker logs dsagrind-api\n```\n\n**Health Checks:**\n- Frontend: http://localhost:3000/health\n- Gateway: http://localhost:5000/health\n- Auth API: http://localhost:8080/health\n\n## Support\n\n### Documentation\n- [Architecture Guide](./ARCHITECTURE.md)\n- [API Documentation](./api/README.md)\n- [Deployment Guide](./DEPLOYMENT.md)\n\n### Getting Help\n- Create an issue on GitHub\n- Check existing documentation\n- Review error logs and stack traces\n\n### Contributing\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests\n5. Submit a pull request","size_bytes":6363},"docs/USER_FLOWS.md":{"content":"# DSAGrind User Flows\n\n## Overview\nThis document outlines the key user flows for the DSAGrind competitive programming platform, covering different user types and their interactions with the system.\n\n## User Types\n\n### 1. Anonymous Users (Visitors)\n- Can browse the landing page\n- View problem categories and sample problems\n- See pricing and features\n- Cannot solve problems or access IDE\n\n### 2. Free Users (Registered)\n- Full access to free problems in each category\n- Limited AI assistance\n- Basic progress tracking\n- Can upgrade to premium\n\n### 3. Premium Users (Subscribers)\n- Unlimited access to all problems\n- Full AI assistance and hints\n- Advanced analytics and insights\n- Priority support\n\n### 4. Admin Users\n- All premium features\n- Access to admin dashboard\n- Content management capabilities\n- User management and analytics\n\n## Authentication Flows\n\n### 1. User Registration Flow\n\n```mermaid\ngraph TD\n    A[Landing Page] --> B[Click Sign Up]\n    B --> C[Registration Form]\n    C --> D{Form Valid?}\n    D -->|No| C\n    D -->|Yes| E[Submit Registration]\n    E --> F[Email Verification Sent]\n    F --> G[Check Email]\n    G --> H[Click Verification Link]\n    H --> I[Email Verified]\n    I --> J[Welcome Page]\n    J --> K[Onboarding Tutorial]\n```\n\n**Steps:**\n1. User clicks \"Sign Up\" on landing page\n2. Fills registration form (email, username, password, name)\n3. Form validation (client-side and server-side)\n4. Account created with unverified status\n5. Verification email sent via SendGrid\n6. User clicks verification link in email\n7. Account status updated to verified\n8. Welcome email sent\n9. User redirected to onboarding\n\n**Technical Implementation:**\n- React Hook Form with Zod validation\n- JWT token generation for session\n- Email verification token with expiration\n- Welcome email template with SendGrid\n\n### 2. OAuth Login Flow (Google/GitHub)\n\n```mermaid\ngraph TD\n    A[Login Page] --> B[Click OAuth Provider]\n    B --> C[Redirect to Provider]\n    C --> D[User Authorizes]\n    D --> E[Callback with Auth Code]\n    E --> F[Exchange for Access Token]\n    F --> G[Fetch User Profile]\n    G --> H{User Exists?}\n    H -->|Yes| I[Login User]\n    H -->|No| J[Create Account]\n    J --> I\n    I --> K[Generate JWT]\n    K --> L[Redirect to Dashboard]\n```\n\n**Steps:**\n1. User clicks \"Continue with Google/GitHub\"\n2. Redirect to OAuth provider\n3. User authorizes application\n4. Callback with authorization code\n5. Exchange code for access token\n6. Fetch user profile from provider\n7. Check if user exists in database\n8. Create account if new user, login if existing\n9. Generate JWT tokens\n10. Redirect to appropriate page\n\n### 3. Password Reset Flow\n\n```mermaid\ngraph TD\n    A[Forgot Password Link] --> B[Enter Email]\n    B --> C{Email Exists?}\n    C -->|No| D[Show Generic Success]\n    C -->|Yes| E[Generate Reset Token]\n    E --> F[Send Reset Email]\n    F --> D\n    D --> G[Check Email]\n    G --> H[Click Reset Link]\n    H --> I[Reset Password Form]\n    I --> J[Submit New Password]\n    J --> K[Password Updated]\n    K --> L[Auto Login]\n```\n\n## Problem Solving Flows\n\n### 1. Browse Problems Flow\n\n```mermaid\ngraph TD\n    A[Dashboard/Home] --> B[Browse Problems]\n    B --> C[Select Category]\n    C --> D[View Category Problems]\n    D --> E[Filter/Search]\n    E --> F[Select Problem]\n    F --> G{User Access?}\n    G -->|Free Problem| H[Open IDE]\n    G -->|Premium Required| I[Upgrade Prompt]\n    I --> J[Subscription Flow]\n    J --> H\n    H --> K[Start Solving]\n```\n\n**Steps:**\n1. User navigates to Problems section\n2. Views available categories (Arrays, Trees, etc.)\n3. Selects a category\n4. Sees list of problems with difficulty indicators\n5. Uses filters (difficulty, tags, status)\n6. Clicks on a problem\n7. Access check based on user tier\n8. Either opens IDE or shows upgrade prompt\n\n### 2. Problem Solving Flow\n\n```mermaid\ngraph TD\n    A[Open Problem] --> B[Read Description]\n    B --> C[Understand Examples]\n    C --> D[Choose Language]\n    D --> E[Write Code]\n    E --> F[Test with Examples]\n    F --> G{Tests Pass?}\n    G -->|No| H[Debug/Revise]\n    H --> E\n    G -->|Yes| I[Submit Solution]\n    I --> J[Run All Test Cases]\n    J --> K{All Pass?}\n    K -->|No| L[Show Failed Cases]\n    L --> H\n    K -->|Yes| M[Solution Accepted]\n    M --> N[Update Progress]\n    N --> O[Show Statistics]\n```\n\n**Steps:**\n1. Problem description loaded with examples\n2. User selects programming language\n3. Monaco editor initialized with template\n4. User writes solution\n5. Test with visible examples\n6. Submit for full evaluation\n7. Server runs against all test cases\n8. Results displayed with performance metrics\n9. Progress updated if successful\n\n### 3. AI Assistance Flow\n\n```mermaid\ngraph TD\n    A[Stuck on Problem] --> B[Click AI Hint]\n    B --> C{User Tier?}\n    C -->|Free| D[Limited Hints]\n    C -->|Premium| E[Full AI Access]\n    D --> F[Show Basic Hint]\n    E --> G[Perplexity API Call]\n    G --> H[Generate Contextual Hint]\n    H --> I[Display Hint]\n    I --> J[Continue Solving]\n    F --> J\n    J --> K{Want More Help?}\n    K -->|Yes| L[Next Hint Level]\n    L --> G\n    K -->|No| M[Back to Code]\n```\n\n**Steps:**\n1. User clicks \"Get Hint\" button\n2. System checks user's subscription tier\n3. For premium users, calls Perplexity API\n4. AI generates hint based on problem context\n5. Hint displayed without giving away solution\n6. User can request progressive hints\n7. Each hint level becomes more specific\n\n## Admin Flows\n\n### 1. Problem Creation Flow\n\n```mermaid\ngraph TD\n    A[Admin Dashboard] --> B[Click Add Problem]\n    B --> C[Problem Form]\n    C --> D[Fill Basic Info]\n    D --> E[Add Test Cases]\n    E --> F[Write Solution]\n    F --> G[Preview Problem]\n    G --> H{Looks Good?}\n    H -->|No| C\n    H -->|Yes| I[Submit Problem]\n    I --> J[Validation]\n    J --> K{Valid?}\n    K -->|No| L[Show Errors]\n    L --> C\n    K -->|Yes| M[Save to Database]\n    M --> N[Publish/Draft]\n```\n\n**Steps:**\n1. Admin navigates to problem management\n2. Clicks \"Add New Problem\"\n3. Fills form: title, description, difficulty, category\n4. Adds examples and constraints\n5. Creates test cases (visible and hidden)\n6. Writes reference solution\n7. Previews how problem appears to users\n8. Submits for validation\n9. Server validates all fields and test cases\n10. Problem saved and published\n\n### 2. Bulk Import Flow\n\n```mermaid\ngraph TD\n    A[Admin Dashboard] --> B[Click Bulk Import]\n    B --> C[Download Template]\n    C --> D[Fill Excel/CSV]\n    D --> E[Upload File]\n    E --> F[File Validation]\n    F --> G{Valid Format?}\n    G -->|No| H[Show Format Errors]\n    H --> E\n    G -->|Yes| I[Parse Problems]\n    I --> J[AI Data Enhancement]\n    J --> K[Preview Import]\n    K --> L{Approve?}\n    L -->|No| M[Edit Problems]\n    M --> K\n    L -->|Yes| N[Bulk Insert]\n    N --> O[Import Summary]\n```\n\n**Steps:**\n1. Admin clicks \"Bulk Import\"\n2. Downloads CSV template with required columns\n3. Fills template with problem data\n4. Uploads completed file\n5. System validates file format and structure\n6. Parses each row into problem objects\n7. AI fills missing data (Perplexity API)\n8. Shows preview of all problems to import\n9. Admin reviews and approves\n10. Bulk insert into database\n11. Summary report with success/failure counts\n\n### 3. User Management Flow\n\n```mermaid\ngraph TD\n    A[Admin Dashboard] --> B[User Management]\n    B --> C[Search/Filter Users]\n    C --> D[Select User]\n    D --> E[View User Profile]\n    E --> F[Available Actions]\n    F --> G[Edit Profile]\n    F --> H[Change Subscription]\n    F --> I[Ban/Suspend]\n    F --> J[View Activity]\n    G --> K[Save Changes]\n    H --> K\n    I --> K\n    J --> L[Activity Report]\n```\n\n## Subscription Flows\n\n### 1. Upgrade to Premium Flow\n\n```mermaid\ngraph TD\n    A[Hit Premium Limit] --> B[Upgrade Prompt]\n    B --> C[View Plans]\n    C --> D[Select Plan]\n    D --> E[Stripe Checkout]\n    E --> F[Payment Processing]\n    F --> G{Payment Success?}\n    G -->|No| H[Payment Failed]\n    H --> E\n    G -->|Yes| I[Update Subscription]\n    I --> J[Send Confirmation]\n    J --> K[Unlock Premium Features]\n```\n\n**Steps:**\n1. User encounters premium problem or feature\n2. Upgrade prompt displayed\n3. User views available plans\n4. Selects monthly or annual plan\n5. Redirected to Stripe Checkout\n6. Payment processed securely\n7. Webhook confirms payment\n8. User subscription upgraded in database\n9. Confirmation email sent\n10. Premium features unlocked\n\n### 2. Subscription Management Flow\n\n```mermaid\ngraph TD\n    A[User Settings] --> B[Subscription Tab]\n    B --> C[Current Plan Details]\n    C --> D[Available Actions]\n    D --> E[Change Plan]\n    D --> F[Cancel Subscription]\n    D --> G[Update Payment Method]\n    E --> H[Stripe Portal]\n    F --> I[Cancellation Survey]\n    G --> H\n    H --> J[Changes Processed]\n    J --> K[Update Database]\n    K --> L[Send Notification]\n```\n\n## Error Handling Flows\n\n### 1. Network Error Flow\n\n```mermaid\ngraph TD\n    A[User Action] --> B[API Request]\n    B --> C{Network Available?}\n    C -->|No| D[Show Offline Message]\n    D --> E[Queue Request]\n    E --> F[Wait for Connection]\n    F --> G[Retry Request]\n    G --> C\n    C -->|Yes| H[Process Request]\n```\n\n### 2. Authentication Error Flow\n\n```mermaid\ngraph TD\n    A[Protected Action] --> B[Check Token]\n    B --> C{Token Valid?}\n    C -->|No| D[Try Refresh Token]\n    D --> E{Refresh Success?}\n    E -->|No| F[Redirect to Login]\n    E -->|Yes| G[Retry Original Request]\n    C -->|Yes| H[Continue Action]\n    G --> H\n```\n\n## Notification Flows\n\n### 1. Email Notification Flow\n\n```mermaid\ngraph TD\n    A[Trigger Event] --> B[Check User Preferences]\n    B --> C{Email Enabled?}\n    C -->|No| D[Skip Email]\n    C -->|Yes| E[Generate Email Content]\n    E --> F[SendGrid API]\n    F --> G{Send Success?}\n    G -->|No| H[Log Error]\n    G -->|Yes| I[Log Success]\n    H --> J[Retry Later]\n    I --> K[Update Delivery Status]\n```\n\n### 2. In-App Notification Flow\n\n```mermaid\ngraph TD\n    A[Event Occurs] --> B[Create Notification]\n    B --> C[Store in Database]\n    C --> D[Real-time Push]\n    D --> E[Update UI Badge]\n    E --> F[User Views Notifications]\n    F --> G[Mark as Read]\n    G --> H[Update Database]\n```\n\n## Analytics Flows\n\n### 1. User Progress Tracking\n\n```mermaid\ngraph TD\n    A[User Solves Problem] --> B[Record Submission]\n    B --> C[Update Statistics]\n    C --> D[Calculate Progress]\n    D --> E[Update Leaderboards]\n    E --> F[Generate Insights]\n    F --> G[Cache Results]\n    G --> H[Update Dashboard]\n```\n\n### 2. Admin Analytics Flow\n\n```mermaid\ngraph TD\n    A[Admin Dashboard] --> B[Select Date Range]\n    B --> C[Choose Metrics]\n    C --> D[Query Database]\n    D --> E[Aggregate Data]\n    E --> F[Generate Charts]\n    F --> G[Cache Results]\n    G --> H[Display Analytics]\n```\n\n## Mobile Responsiveness\n\nAll flows are designed to work seamlessly across devices:\n\n- **Desktop**: Full-featured experience with multi-panel layouts\n- **Tablet**: Optimized layouts with collapsible sidebars\n- **Mobile**: Touch-friendly interfaces with bottom navigation\n\n## Performance Considerations\n\n### 1. Loading States\n- Skeleton screens during data fetching\n- Progressive loading for large datasets\n- Optimistic updates for better UX\n\n### 2. Caching Strategy\n- Redis caching for frequently accessed data\n- Browser caching for static assets\n- Service worker for offline functionality\n\n### 3. Real-time Updates\n- WebSocket connections for live updates\n- Server-sent events for notifications\n- Optimistic UI updates\n\nThis comprehensive user flow documentation ensures consistent and intuitive user experiences across all features of the DSAGrind platform.","size_bytes":11568},"client/src/App.tsx":{"content":"import { Route, Switch } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"@/components/providers/ThemeProvider\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Home from \"@/pages/Home\";\nimport Problems from \"@/pages/Problems\";\nimport IDE from \"@/pages/IDE\";\nimport Admin from \"@/pages/Admin\";\nimport Subscribe from \"@/pages/Subscribe\";\nimport NotFound from \"@/pages/not-found\";\nimport { ProtectedRoute } from \"@/components/auth/ProtectedRoute\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"dsagrind-theme\">\n        <AuthProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Navigation />\n            <main className=\"flex-1\">\n              <Switch>\n                <Route path=\"/\" component={Home} />\n                <Route path=\"/problems\" component={Problems} />\n                <Route path=\"/problems/:categorySlug\" component={Problems} />\n                <Route path=\"/problem/:slug\">\n                  <ProtectedRoute>\n                    <IDE />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin\">\n                  <ProtectedRoute requireAdmin>\n                    <Admin />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/subscribe\">\n                  <ProtectedRoute>\n                    <Subscribe />\n                  </ProtectedRoute>\n                </Route>\n                <Route component={NotFound} />\n              </Switch>\n            </main>\n            <Toaster />\n          </div>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2083},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.75rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 94.1%;\n  }\n}\n\n@layer base {\n  * {\n    border-color: hsl(var(--border));\n  }\n  body {\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 6px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* Monaco Editor Theme Support */\n.monaco-editor {\n  border-radius: 0.5rem;\n  border: 1px solid hsl(var(--border));\n}\n\n/* Custom animations */\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.3s ease-out;\n}\n\n/* Loading spinner */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Code highlighting */\n.code-highlight {\n  background-color: hsl(var(--muted) / 0.5);\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.375rem;\n  font-size: 0.875rem;\n  font-family: 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace;\n}\n\n/* Problem difficulty colors */\n.difficulty-easy {\n  color: #16a34a;\n}\n\n.dark .difficulty-easy {\n  color: #4ade80;\n}\n\n.difficulty-medium {\n  color: #d97706;\n}\n\n.dark .difficulty-medium {\n  color: #fbbf24;\n}\n\n.difficulty-hard {\n  color: #dc2626;\n}\n\n.dark .difficulty-hard {\n  color: #f87171;\n}","size_bytes":3232},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_GATEWAY_URL: string\n  readonly VITE_AUTH_URL: string\n  readonly VITE_PROBLEMS_URL: string\n  readonly VITE_SUBMISSIONS_URL: string\n  readonly VITE_AI_URL: string\n  readonly VITE_SEARCH_URL: string\n  readonly VITE_ADMIN_URL: string\n  readonly VITE_PAYMENTS_URL: string\n  readonly VITE_APP_NAME: string\n  readonly VITE_APP_VERSION: string\n  readonly VITE_APP_DESCRIPTION: string\n  readonly VITE_STRIPE_PUBLISHABLE_KEY: string\n  readonly VITE_GOOGLE_CLIENT_ID: string\n  readonly VITE_GITHUB_CLIENT_ID: string\n  readonly VITE_ENABLE_DEV_TOOLS: string\n  readonly VITE_LOG_LEVEL: string\n  readonly VITE_WS_URL: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}","size_bytes":749},"docs/assets/DSAGrind_requirements.md":{"content":"# DSAGrind - Competitive Programming Platform Requirements\n\n## Project Overview\nDSAGrind is a comprehensive competitive programming platform designed to help developers practice coding problems with AI-powered assistance, similar to LeetCode but with enhanced features.\n\n## Core Features\n\n### 1. Authentication System\n- **JWT Authentication** with refresh tokens\n- **OAuth Integration** (Google, GitHub)\n- **Email Verification** required for account activation\n- **Password Reset** functionality\n- **Role-based Access Control** (User, Admin)\n\n### 2. Problem Management\n- **Category-based Organization** (Arrays, Trees, Dynamic Programming, etc.)\n- **Difficulty Levels** (Easy, Medium, Hard)\n- **Tags System** for better discoverability\n- **Premium Problems** with subscription model\n- **Test Cases** (visible and hidden)\n- **Solution Templates** in multiple languages\n\n### 3. Admin Dashboard\n- **Problem Creation** via UI form\n- **Category Management** with free problem limits\n- **Excel/CSV Bulk Upload** for problems\n  - Required columns: title, description, examples, constraints, tags, difficulty, testcases, isPaid, categorySlug\n  - AI-powered data validation and filling\n  - Import summary reports\n- **User Management** and analytics\n- **Content Moderation** tools\n\n### 4. Multi-Language IDE\n- **Monaco Editor** integration (VS Code engine)\n- **Language Support**: Python, JavaScript, Java, C++, C#, Go, Rust\n- **Real-time Code Execution** with Judge0 API\n- **Test Case Validation**\n- **Submission History** tracking\n- **Code Templates** for each language\n\n### 5. AI-Powered Features\n- **Perplexity AI Integration** for hints and explanations\n- **Smart Hints** without giving away solutions\n- **Code Review** and optimization suggestions\n- **Auto-generated Examples** for problems\n- **Difficulty Assessment** for uploaded problems\n\n### 6. Search & Discovery\n- **Vector Search** with Qdrant for semantic problem matching\n- **Advanced Filters** (difficulty, tags, acceptance rate)\n- **Recommendation Engine** based on solving patterns\n- **Progress Tracking** across categories\n\n### 7. Subscription & Payments\n- **Stripe Integration** for payments\n- **Freemium Model** with limited free problems per category\n- **Monthly/Annual Plans** for premium access\n- **Progress Analytics** for subscribers\n\n### 8. Email System\n- **SendGrid Integration** for transactional emails\n- **Welcome Emails** after verification\n- **Password Reset** emails\n- **Progress Reports** and notifications\n\n## Technical Architecture\n\n### Frontend\n- **Framework**: React 18 + TypeScript\n- **Styling**: Tailwind CSS + Shadcn UI components\n- **State Management**: TanStack Query + Context API\n- **Routing**: Wouter (lightweight routing)\n- **Editor**: Monaco Editor\n- **Forms**: React Hook Form + Zod validation\n\n### Backend\n- **Architecture**: .NET 8 Microservices\n- **API Gateway**: YARP Reverse Proxy\n- **Services**:\n  - Auth API (Port 8080)\n  - Problems API (Port 5001)\n  - Submissions API (Port 5002)\n  - AI API (Port 5003)\n  - Search API (Port 5004)\n  - Admin API (Port 5005)\n  - Payments API (Port 5006)\n\n### Databases & Infrastructure\n- **Primary Database**: MongoDB Atlas (free tier)\n- **Caching**: Redis Cloud (free tier)\n- **Message Queue**: Kafka (Confluent Cloud free tier)\n- **Vector Database**: Qdrant Cloud (free tier)\n- **Email Service**: SendGrid (free tier)\n- **Payment Processing**: Stripe (test mode)\n\n### AI & External APIs\n- **Primary AI**: Perplexity API\n- **Backup AI**: OpenAI GPT-3.5\n- **Code Execution**: Judge0 API\n- **OAuth Providers**: Google, GitHub\n\n## Development Requirements\n\n### Excel/CSV Upload Format\n```csv\ntitle,description,difficulty,categorySlug,tags,isPremium,constraints,examples,testCases,solution,hints\n\"Two Sum\",\"Given array find two numbers that add up to target\",\"Easy\",\"arrays-hashing\",\"Array,Hash Table\",\"false\",\"2 ≤ nums.length ≤ 10⁴\",\"[{\"\"input\"\":\"\"nums = [2,7,11,15], target = 9\"\",\"\"output\"\":\"\"[0,1]\"\"}]\",\"[{\"\"input\"\":{\"\"nums\"\":[2,7,11,15],\"\"target\"\":9},\"\"output\"\":[0,1]}]\",\"Python solution code\",\"Hint about using hash map\"\n```\n\n### Environment Variables\n- MongoDB connection string\n- Redis connection string\n- Kafka configuration\n- API keys (Perplexity, OpenAI, Stripe, SendGrid)\n- OAuth credentials (Google, GitHub)\n- JWT secrets\n\n### Security Requirements\n- HTTPS enforcement in production\n- Rate limiting on all APIs\n- Input validation and sanitization\n- Secure secret management\n- CORS configuration\n- JWT token expiration and refresh\n\n### Performance Requirements\n- Page load times < 2 seconds\n- Code execution results < 5 seconds\n- API response times < 500ms\n- Real-time updates for submissions\n- Efficient caching strategies\n\n## User Experience\n\n### Free Users\n- Access to limited problems per category\n- Basic IDE functionality\n- Community solutions after solving\n- Progress tracking\n\n### Premium Users\n- Unlimited access to all problems\n- Advanced analytics and insights\n- Priority AI assistance\n- Interview preparation tracks\n- Export progress reports\n\n### Admin Users\n- Full dashboard access\n- Content management capabilities\n- User analytics and management\n- Bulk operations and imports\n- System monitoring tools\n\n## Success Metrics\n- User engagement and retention\n- Problem solving completion rates\n- Subscription conversion rates\n- Code execution success rates\n- AI assistance effectiveness\n- Platform performance metrics","size_bytes":5369},"docs/scripts/start-auth-api.sh":{"content":"#!/bin/bash\n\necho \"🚀 Starting DSAGrind Auth API...\"\n\ncd backend/src/Services/DSAGrind.Auth.API\n\necho \"Installing dependencies...\"\ndotnet restore\n\necho \"Starting Auth API on port 8080...\"\ndotnet run --urls=\"http://0.0.0.0:8080\"","size_bytes":229},"docs/scripts/start-dotnet.sh":{"content":"#!/bin/bash\n\necho \"🚀 Starting DSAGrind .NET Services...\"\n\ncd backend\n\necho \"Starting Gateway API (Port 5000)...\"\ngnome-terminal --tab --title=\"Gateway API\" -- bash -c \"cd src/Services/DSAGrind.Gateway.API && dotnet run --urls=http://0.0.0.0:5000; exec bash\"\n\nsleep 3\n\necho \"Starting Auth API (Port 8080)...\"\ngnome-terminal --tab --title=\"Auth API\" -- bash -c \"cd src/Services/DSAGrind.Auth.API && dotnet run --urls=http://0.0.0.0:8080; exec bash\"\n\nsleep 2\n\necho \"Starting Problems API (Port 5001)...\"\ngnome-terminal --tab --title=\"Problems API\" -- bash -c \"cd src/Services/DSAGrind.Problems.API && dotnet run --urls=http://0.0.0.0:5001; exec bash\"\n\nsleep 2\n\necho \"Starting Submissions API (Port 5002)...\"\ngnome-terminal --tab --title=\"Submissions API\" -- bash -c \"cd src/Services/DSAGrind.Submissions.API && dotnet run --urls=http://0.0.0.0:5002; exec bash\"\n\nsleep 2\n\necho \"Starting AI API (Port 5003)...\"\ngnome-terminal --tab --title=\"AI API\" -- bash -c \"cd src/Services/DSAGrind.AI.API && dotnet run --urls=http://0.0.0.0:5003; exec bash\"\n\nsleep 2\n\necho \"Starting Search API (Port 5004)...\"\ngnome-terminal --tab --title=\"Search API\" -- bash -c \"cd src/Services/DSAGrind.Search.API && dotnet run --urls=http://0.0.0.0:5004; exec bash\"\n\nsleep 2\n\necho \"Starting Admin API (Port 5005)...\"\ngnome-terminal --tab --title=\"Admin API\" -- bash -c \"cd src/Services/DSAGrind.Admin.API && dotnet run --urls=http://0.0.0.0:5005; exec bash\"\n\nsleep 2\n\necho \"Starting Payments API (Port 5006)...\"\ngnome-terminal --tab --title=\"Payments API\" -- bash -c \"cd src/Services/DSAGrind.Payments.API && dotnet run --urls=http://0.0.0.0:5006; exec bash\"\n\necho \"✅ All .NET services are starting...\"\necho \"Gateway API: http://localhost:5000\"\necho \"Auth API: http://localhost:8080\"\necho \"Problems API: http://localhost:5001\"\necho \"Submissions API: http://localhost:5002\"\necho \"AI API: http://localhost:5003\"\necho \"Search API: http://localhost:5004\"\necho \"Admin API: http://localhost:5005\"\necho \"Payments API: http://localhost:5006\"","size_bytes":2008},"docs/scripts/start-services.sh":{"content":"#!/bin/bash\n\necho \"🚀 Starting DSAGrind Services...\"\n\n# Function to check if a port is available\ncheck_port() {\n    netstat -tuln | grep \":$1 \" > /dev/null\n    return $?\n}\n\n# Start Backend Services\necho \"Starting Backend Services...\"\n\ncd backend/src/Services\n\n# Start Gateway API (Port 5000)\nif ! check_port 5000; then\n    echo \"Starting Gateway API on port 5000...\"\n    cd DSAGrind.Gateway.API\n    dotnet run --urls=\"http://0.0.0.0:5000\" &\n    cd ..\n    sleep 3\nelse\n    echo \"Port 5000 is already in use\"\nfi\n\n# Start Auth API (Port 8080)\nif ! check_port 8080; then\n    echo \"Starting Auth API on port 8080...\"\n    cd DSAGrind.Auth.API\n    dotnet run --urls=\"http://0.0.0.0:8080\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 8080 is already in use\"\nfi\n\n# Start Problems API (Port 5001)\nif ! check_port 5001; then\n    echo \"Starting Problems API on port 5001...\"\n    cd DSAGrind.Problems.API\n    dotnet run --urls=\"http://0.0.0.0:5001\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5001 is already in use\"\nfi\n\n# Start Submissions API (Port 5002)\nif ! check_port 5002; then\n    echo \"Starting Submissions API on port 5002...\"\n    cd DSAGrind.Submissions.API\n    dotnet run --urls=\"http://0.0.0.0:5002\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5002 is already in use\"\nfi\n\n# Start AI API (Port 5003)\nif ! check_port 5003; then\n    echo \"Starting AI API on port 5003...\"\n    cd DSAGrind.AI.API\n    dotnet run --urls=\"http://0.0.0.0:5003\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5003 is already in use\"\nfi\n\n# Start Search API (Port 5004)\nif ! check_port 5004; then\n    echo \"Starting Search API on port 5004...\"\n    cd DSAGrind.Search.API\n    dotnet run --urls=\"http://0.0.0.0:5004\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5004 is already in use\"\nfi\n\n# Start Admin API (Port 5005)\nif ! check_port 5005; then\n    echo \"Starting Admin API on port 5005...\"\n    cd DSAGrind.Admin.API\n    dotnet run --urls=\"http://0.0.0.0:5005\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5005 is already in use\"\nfi\n\n# Start Payments API (Port 5006)\nif ! check_port 5006; then\n    echo \"Starting Payments API on port 5006...\"\n    cd DSAGrind.Payments.API\n    dotnet run --urls=\"http://0.0.0.0:5006\" &\n    cd ..\n    sleep 2\nelse\n    echo \"Port 5006 is already in use\"\nfi\n\ncd ../../..\n\n# Start Frontend\necho \"Starting Frontend...\"\ncd client\nif ! check_port 3000; then\n    echo \"Starting React frontend on port 3000...\"\n    npm run dev &\n    sleep 3\nelse\n    echo \"Port 3000 is already in use\"\nfi\n\ncd ..\n\necho \"✅ All services are running!\"\necho \"\"\necho \"🌐 Application URLs:\"\necho \"Frontend: http://localhost:3000\"\necho \"Gateway: http://localhost:5000\"\necho \"Auth API: http://localhost:8080\"\necho \"Problems API: http://localhost:5001\"\necho \"Submissions API: http://localhost:5002\"\necho \"AI API: http://localhost:5003\"\necho \"Search API: http://localhost:5004\"\necho \"Admin API: http://localhost:5005\"\necho \"Payments API: http://localhost:5006\"\necho \"\"\necho \"Press Ctrl+C to stop all services\"\n\n# Keep the script running\nwait","size_bytes":3007},"docs/scripts/stop-all.sh":{"content":"#!/bin/bash\n\necho \"🛑 Stopping DSAGrind Platform...\"\n\necho \"Stopping Node.js processes...\"\npkill -f \"npm run dev\" 2>/dev/null || true\npkill -f \"vite\" 2>/dev/null || true\n\necho \"Stopping .NET processes...\"\npkill -f \"dotnet run\" 2>/dev/null || true\npkill -f \"DSAGrind\" 2>/dev/null || true\n\necho \"Stopping any remaining processes on application ports...\"\nlsof -ti:3000 | xargs kill -9 2>/dev/null || true\nlsof -ti:5000 | xargs kill -9 2>/dev/null || true\nlsof -ti:5001 | xargs kill -9 2>/dev/null || true\nlsof -ti:5002 | xargs kill -9 2>/dev/null || true\nlsof -ti:5003 | xargs kill -9 2>/dev/null || true\nlsof -ti:5004 | xargs kill -9 2>/dev/null || true\nlsof -ti:5005 | xargs kill -9 2>/dev/null || true\nlsof -ti:5006 | xargs kill -9 2>/dev/null || true\nlsof -ti:8080 | xargs kill -9 2>/dev/null || true\n\necho \"✅ All services stopped.\"","size_bytes":837},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useEffect, useState, ReactNode } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { API_CONFIG } from \"@/lib/config\";\nimport { User, RegisterRequest, AuthResponse } from \"@/types/api\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: RegisterRequest) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  isPremium: boolean;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      const response = await apiRequest(\"GET\", API_CONFIG.ENDPOINTS.AUTH.ME);\n      const data = await response.json();\n      \n      if (data.user) {\n        setUser(data.user);\n      } else {\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error: any) {\n      // Only remove token if it's an authentication error (401/403), not network errors\n      if (error.message?.includes('401') || error.message?.includes('403')) {\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"refreshToken\");\n      }\n      // For network errors (500, connection failed), keep the token and retry later\n      console.error('Auth check failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const response = await apiRequest(\"POST\", API_CONFIG.ENDPOINTS.AUTH.LOGIN, {\n      email,\n      password,\n    });\n\n    const data: AuthResponse = await response.json();\n    localStorage.setItem(\"token\", data.token);\n    localStorage.setItem(\"refreshToken\", data.refreshToken);\n    setUser(data.user);\n  };\n\n  const register = async (userData: RegisterRequest) => {\n    const response = await apiRequest(\"POST\", API_CONFIG.ENDPOINTS.AUTH.REGISTER, userData);\n\n    const data: AuthResponse = await response.json();\n    localStorage.setItem(\"token\", data.token);\n    localStorage.setItem(\"refreshToken\", data.refreshToken);\n    setUser(data.user);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"refreshToken\");\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n    isAuthenticated: !!user,\n    isAdmin: user?.role?.toLowerCase() === \"admin\",\n    isPremium: user?.subscriptionPlan === 'premium' && user?.subscriptionStatus === 'active',\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n","size_bytes":2900},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setTheme('dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1253},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { useContext } from 'react';\nimport { AuthContext } from '@/contexts/AuthContext';\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":285},"client/src/hooks/useWebSocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useAuth } from './useAuth';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  problemId?: string;\n}\n\nexport function useWebSocket() {\n  const { user } = useAuth();\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const token = localStorage.getItem('accessToken');\n    const wsUrl = `${protocol}//${window.location.host}/ws?token=${token}`;\n\n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [user]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  const joinProblem = (problemId: string) => {\n    sendMessage({ type: 'join_problem', data: { problemId } });\n  };\n\n  const updateCode = (problemId: string, code: string, language: string) => {\n    sendMessage({ \n      type: 'code_update', \n      data: { problemId, code, language } \n    });\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n    joinProblem,\n    updateCode,\n  };\n}\n","size_bytes":1956},"client/src/lib/auth.ts":{"content":"import { apiRequest } from './queryClient';\n\nexport class AuthService {\n  static getToken(): string | null {\n    return localStorage.getItem('accessToken');\n  }\n\n  static isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  static async refreshToken(): Promise<void> {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await apiRequest('POST', '/api/auth/refresh', { refreshToken });\n    const data = await response.json();\n    \n    localStorage.setItem('accessToken', data.accessToken);\n    localStorage.setItem('refreshToken', data.refreshToken);\n  }\n\n  static logout(): void {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    window.location.href = '/';\n  }\n}\n\n// Interceptor for automatic token refresh\nconst originalApiRequest = apiRequest;\n\nexport async function apiRequestWithAuth(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  try {\n    return await originalApiRequest(method, url, data);\n  } catch (error: any) {\n    if (error.message.includes('401') && AuthService.isAuthenticated()) {\n      try {\n        await AuthService.refreshToken();\n        return await originalApiRequest(method, url, data);\n      } catch (refreshError) {\n        AuthService.logout();\n        throw refreshError;\n      }\n    }\n    throw error;\n  }\n}\n","size_bytes":1441},"client/src/lib/config.ts":{"content":"// API Configuration for DSAGrind .NET Microservices\nexport const API_CONFIG = {\n  // Gateway API (main entry point for all microservices)\n  GATEWAY_URL: import.meta.env.VITE_GATEWAY_URL || 'http://localhost:5000',\n  \n  // Individual service URLs (for direct access if needed)\n  SERVICES: {\n    AUTH: import.meta.env.VITE_AUTH_URL || 'http://localhost:8080',\n    PROBLEMS: import.meta.env.VITE_PROBLEMS_URL || 'http://localhost:5001',\n    SUBMISSIONS: import.meta.env.VITE_SUBMISSIONS_URL || 'http://localhost:5002',\n    AI: import.meta.env.VITE_AI_URL || 'http://localhost:5003',\n    SEARCH: import.meta.env.VITE_SEARCH_URL || 'http://localhost:5004',\n    ADMIN: import.meta.env.VITE_ADMIN_URL || 'http://localhost:5005',\n    PAYMENTS: import.meta.env.VITE_PAYMENTS_URL || 'http://localhost:5006',\n  },\n  \n  // API endpoints (routed through Gateway)\n  ENDPOINTS: {\n    // Auth endpoints\n    AUTH: {\n      LOGIN: '/api/auth/login',\n      REGISTER: '/api/auth/register',\n      REFRESH: '/api/auth/refresh',\n      LOGOUT: '/api/auth/revoke',\n      ME: '/api/auth/me',\n      VERIFY_EMAIL: '/api/auth/verify-email',\n      FORGOT_PASSWORD: '/api/auth/forgot-password',\n      RESET_PASSWORD: '/api/auth/reset-password',\n      CHANGE_PASSWORD: '/api/auth/change-password',\n    },\n    \n    // Problems endpoints\n    PROBLEMS: {\n      LIST: '/api/problems',\n      SEARCH: '/api/problems/search',\n      GET: (id: string) => `/api/problems/${id}`,\n      CREATE: '/api/problems',\n      UPDATE: (id: string) => `/api/problems/${id}`,\n      DELETE: (id: string) => `/api/problems/${id}`,\n      RANDOM: '/api/problems/random',\n      SIMILAR: (id: string) => `/api/problems/${id}/similar`,\n      LIKE: (id: string) => `/api/problems/${id}/like`,\n    },\n    \n    // Categories endpoints\n    CATEGORIES: {\n      LIST: '/api/categories',\n      GET: (id: string) => `/api/categories/${id}`,\n      CREATE: '/api/categories',\n      UPDATE: (id: string) => `/api/categories/${id}`,\n      DELETE: (id: string) => `/api/categories/${id}`,\n    },\n    \n    // Submissions endpoints\n    SUBMISSIONS: {\n      LIST: '/api/submissions',\n      GET: (id: string) => `/api/submissions/${id}`,\n      CREATE: '/api/submissions',\n      EXECUTE: '/api/submissions/execute',\n      TEST: '/api/submissions/test',\n      LANGUAGES: '/api/submissions/languages',\n      LEADERBOARD: (problemId: string) => `/api/submissions/leaderboard/${problemId}`,\n    },\n    \n    // AI endpoints\n    AI: {\n      HINT: '/api/ai/hint',\n      EXPLAIN: '/api/ai/explain',\n      ANALYZE: '/api/ai/analyze',\n      OPTIMIZE: '/api/ai/optimize',\n      DEBUG: '/api/ai/debug',\n    },\n    \n    // Search endpoints\n    SEARCH: {\n      SEARCH: '/api/search',\n      SUGGESTIONS: '/api/search/suggestions',\n      SIMILAR: (problemId: string) => `/api/search/similar/${problemId}`,\n      RECOMMENDATIONS: '/api/search/recommendations',\n      BY_TAGS: '/api/search/by-tags',\n    },\n    \n    // Admin endpoints\n    ADMIN: {\n      DASHBOARD: '/api/admin/dashboard',\n      USERS: '/api/admin/users',\n      USER: (id: string) => `/api/admin/users/${id}`,\n      BAN_USER: (id: string) => `/api/admin/users/${id}/ban`,\n      UNBAN_USER: (id: string) => `/api/admin/users/${id}/unban`,\n      PENDING_PROBLEMS: '/api/admin/problems/pending',\n      APPROVE_PROBLEM: (id: string) => `/api/admin/problems/${id}/approve`,\n      REJECT_PROBLEM: (id: string) => `/api/admin/problems/${id}/reject`,\n      ANALYTICS: '/api/admin/analytics',\n      SYSTEM_HEALTH: '/api/admin/system/health',\n    },\n    \n    // Payments endpoints\n    PAYMENTS: {\n      CREATE_INTENT: '/api/payments/create-intent',\n      CONFIRM: '/api/payments/confirm',\n      HISTORY: '/api/payments/history',\n      GET: (id: string) => `/api/payments/${id}`,\n      PLANS: '/api/payments/plans',\n      SUBSCRIPTIONS: {\n        CREATE: '/api/payments/subscriptions/create',\n        CURRENT: '/api/payments/subscriptions/current',\n        CANCEL: (id: string) => `/api/payments/subscriptions/${id}/cancel`,\n      },\n    },\n  },\n} as const;\n\n// Helper function to build full API URLs\nexport const buildApiUrl = (endpoint: string) => {\n  return `${API_CONFIG.GATEWAY_URL}${endpoint}`;\n};\n\n// Helper function for direct service access\nexport const buildServiceUrl = (service: keyof typeof API_CONFIG.SERVICES, endpoint: string) => {\n  return `${API_CONFIG.SERVICES[service]}${endpoint}`;\n};","size_bytes":4362},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { buildApiUrl } from \"./config\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  // Build full API URL using the Gateway\n  const fullUrl = url.startsWith('http') ? url : buildApiUrl(url);\n\n  const res = await fetch(fullUrl, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    // Build full API URL using the Gateway\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = url.startsWith('http') ? url : buildApiUrl(url);\n    \n    const res = await fetch(fullUrl, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2058},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private listeners: Map<string, ((data: any) => void)[]> = new Map();\n\n  connect(token: string) {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws?token=${token}`;\n\n    this.ws = new WebSocket(wsUrl);\n\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        this.handleMessage(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.attemptReconnect(token);\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private attemptReconnect(token: string) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect(token);\n      }, this.reconnectDelay * this.reconnectAttempts);\n    }\n  }\n\n  private handleMessage(message: any) {\n    const { type, data } = message;\n    const listeners = this.listeners.get(type);\n    \n    if (listeners) {\n      listeners.forEach(listener => listener(data));\n    }\n  }\n\n  send(type: string, data?: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type, data }));\n    }\n  }\n\n  on(type: string, listener: (data: any) => void) {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, []);\n    }\n    this.listeners.get(type)!.push(listener);\n  }\n\n  off(type: string, listener: (data: any) => void) {\n    const listeners = this.listeners.get(type);\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport const wsManager = new WebSocketManager();\n","size_bytes":2344},"client/src/pages/Admin.tsx":{"content":"import { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ProtectedRoute } from '@/components/auth/ProtectedRoute';\nimport { AdminDashboard } from '@/components/admin/AdminDashboard';\nimport { ProblemManager } from '@/components/admin/ProblemManager';\nimport { CategoryConfig } from '@/components/admin/CategoryConfig';\nimport { BulkImport } from '@/components/admin/BulkImport';\nimport { useAuth } from '@/hooks/useAuth';\n\nfunction AdminContent() {\n  const { user, logout } = useAuth();\n  const [activeTab, setActiveTab] = useState('dashboard');\n\n  const tabs = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: 'fas fa-tachometer-alt',\n      component: <AdminDashboard />,\n    },\n    {\n      id: 'problems',\n      label: 'Problems',\n      icon: 'fas fa-code',\n      component: <ProblemManager />,\n    },\n    {\n      id: 'categories',\n      label: 'Categories',\n      icon: 'fas fa-folder',\n      component: <CategoryConfig />,\n    },\n    {\n      id: 'import',\n      label: 'Bulk Import',\n      icon: 'fas fa-upload',\n      component: <BulkImport />,\n    },\n    {\n      id: 'users',\n      label: 'Users',\n      icon: 'fas fa-users',\n      component: <UserManagement />,\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      icon: 'fas fa-chart-bar',\n      component: <Analytics />,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n              <i className=\"fas fa-shield-alt mr-3 text-brand-600\"></i>\n              Admin Dashboard\n            </h1>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              Manage platform settings, users, and content\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"default\" className=\"bg-brand-600\">\n                <i className=\"fas fa-user-shield mr-1\"></i>\n{user?.firstName || user?.email?.split('@')[0] || 'Admin'}\n              </Badge>\n              <Badge variant=\"outline\">Admin</Badge>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={logout}\n              className=\"text-error-600 hover:text-error-700 hover:bg-error-50 dark:hover:bg-error-950\"\n              data-testid=\"button-admin-logout\"\n            >\n              <i className=\"fas fa-sign-out-alt mr-2\"></i>\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          {/* Tab Navigation */}\n          <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-slate-200 dark:border-slate-800 overflow-hidden\">\n            <TabsList className=\"grid grid-cols-6 w-full h-auto p-1 bg-transparent\">\n              {tabs.map((tab) => (\n                <TabsTrigger\n                  key={tab.id}\n                  value={tab.id}\n                  className=\"flex items-center justify-center p-4 text-sm font-medium data-[state=active]:bg-brand-50 data-[state=active]:text-brand-600 dark:data-[state=active]:bg-brand-950\"\n                  data-testid={`tab-${tab.id}`}\n                >\n                  <i className={`${tab.icon} mr-2`}></i>\n                  {tab.label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </div>\n\n          {/* Tab Content */}\n          {tabs.map((tab) => (\n            <TabsContent key={tab.id} value={tab.id} className=\"space-y-6\">\n              {tab.component}\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n// User Management Component\nfunction UserManagement() {\n  const mockUsers = [\n    { id: '1', username: 'alice_coder', email: 'alice@example.com', role: 'user', isPremium: true, joinDate: '2024-01-15' },\n    { id: '2', username: 'bob_dev', email: 'bob@example.com', role: 'user', isPremium: false, joinDate: '2024-02-20' },\n    { id: '3', username: 'charlie_admin', email: 'charlie@example.com', role: 'admin', isPremium: true, joinDate: '2023-12-01' },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>\n            <i className=\"fas fa-users mr-2\"></i>\n            User Management\n          </span>\n          <Button variant=\"outline\" size=\"sm\">\n            <i className=\"fas fa-user-plus mr-2\"></i>\n            Add User\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {mockUsers.map((user) => (\n            <div key={user.id} className=\"flex items-center justify-between p-4 border border-slate-200 dark:border-slate-700 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-brand-100 dark:bg-brand-900 rounded-full flex items-center justify-center\">\n                  <span className=\"text-brand-600 font-semibold\">\n                    {user.username.substring(0, 1).toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <h4 className=\"font-medium text-slate-900 dark:text-white\">\n                      {user.username}\n                    </h4>\n                    <Badge variant={user.role === 'admin' ? 'destructive' : 'outline'}>\n                      {user.role}\n                    </Badge>\n                    {user.isPremium && (\n                      <Badge className=\"bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200\">\n                        <i className=\"fas fa-crown mr-1\"></i>\n                        Premium\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                    {user.email} • Joined {new Date(user.joinDate).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  Edit\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"text-error-600 hover:text-error-700\">\n                  <i className=\"fas fa-ban mr-2\"></i>\n                  Ban\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-6 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n          <h4 className=\"font-semibold text-slate-900 dark:text-white mb-3\">\n            Quick Actions\n          </h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button variant=\"outline\" className=\"justify-start\">\n              <i className=\"fas fa-download mr-2\"></i>\n              Export Users\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start\">\n              <i className=\"fas fa-envelope mr-2\"></i>\n              Send Announcement\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start\">\n              <i className=\"fas fa-chart-line mr-2\"></i>\n              User Analytics\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Analytics Component\nfunction Analytics() {\n  const metrics = [\n    { label: 'Daily Active Users', value: '2,847', change: '+12%', color: 'text-success-600' },\n    { label: 'Problems Solved Today', value: '1,234', change: '+8%', color: 'text-brand-600' },\n    { label: 'New Registrations', value: '89', change: '+15%', color: 'text-purple-600' },\n    { label: 'Premium Conversions', value: '23', change: '+5%', color: 'text-amber-600' },\n  ];\n\n  const popularProblems = [\n    { title: 'Two Sum', attempts: 1547, successRate: '89%' },\n    { title: 'Valid Parentheses', attempts: 1203, successRate: '76%' },\n    { title: 'Merge Two Sorted Lists', attempts: 967, successRate: '82%' },\n    { title: 'Best Time to Buy and Sell Stock', attempts: 834, successRate: '71%' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {metrics.map((metric) => (\n          <Card key={metric.label}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">{metric.label}</p>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                    {metric.value}\n                  </p>\n                </div>\n                <div className={`text-sm font-medium ${metric.color}`}>\n                  <i className=\"fas fa-arrow-up mr-1\"></i>\n                  {metric.change}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Popular Problems */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              <i className=\"fas fa-fire mr-2\"></i>\n              Popular Problems\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {popularProblems.map((problem, index) => (\n                <div key={problem.title} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-brand-100 dark:bg-brand-900 rounded-full flex items-center justify-center\">\n                      <span className=\"text-brand-600 text-sm font-semibold\">\n                        {index + 1}\n                      </span>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-slate-900 dark:text-white\">\n                        {problem.title}\n                      </h4>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                        {problem.attempts} attempts\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">{problem.successRate}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              <i className=\"fas fa-heartbeat mr-2\"></i>\n              System Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { service: 'API Server', status: 'Operational', uptime: '99.9%' },\n                { service: 'Database', status: 'Operational', uptime: '99.8%' },\n                { service: 'Code Execution', status: 'Operational', uptime: '99.7%' },\n                { service: 'AI Services', status: 'Operational', uptime: '99.6%' },\n              ].map((service) => (\n                <div key={service.service} className=\"flex items-center justify-between p-3 bg-success-50 dark:bg-success-900/20 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-success-600\"></i>\n                    <div>\n                      <h4 className=\"font-medium text-slate-900 dark:text-white\">\n                        {service.service}\n                      </h4>\n                      <p className=\"text-sm text-success-600\">{service.status}</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">{service.uptime}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default function Admin() {\n  return (\n    <ProtectedRoute requireAdmin>\n      <AdminContent />\n    </ProtectedRoute>\n  );\n}\n","size_bytes":12565},"client/src/pages/Home.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  const stats = [\n    { label: 'Coding Problems', value: '2,500+', color: 'text-brand-600' },\n    { label: 'Active Users', value: '50K+', color: 'text-success-600' },\n    { label: 'Languages', value: '15', color: 'text-purple-600' },\n    { label: 'Submissions', value: '1M+', color: 'text-warning-600' },\n  ];\n\n  const features = [\n    {\n      icon: 'fas fa-robot',\n      title: 'AI-Powered Hints',\n      description: 'Get intelligent hints and debugging suggestions powered by Perplexity AI.',\n      color: 'bg-blue-50 dark:bg-blue-900/20 text-blue-600',\n    },\n    {\n      icon: 'fas fa-code',\n      title: 'Multi-Language IDE',\n      description: 'Practice in Python, Java, C++, JavaScript, and 11 more programming languages.',\n      color: 'bg-success-50 dark:bg-success-900/20 text-success-600',\n    },\n    {\n      icon: 'fas fa-chart-line',\n      title: 'Progress Tracking',\n      description: 'Track your solving progress, streaks, and improvement over time.',\n      color: 'bg-purple-50 dark:bg-purple-900/20 text-purple-600',\n    },\n    {\n      icon: 'fas fa-users',\n      title: 'Community Discussions',\n      description: 'Learn from others and share your solutions with the coding community.',\n      color: 'bg-warning-50 dark:bg-warning-900/20 text-warning-600',\n    },\n    {\n      icon: 'fas fa-brain',\n      title: 'Interview Prep',\n      description: 'Practice problems from top tech companies to ace your coding interviews.',\n      color: 'bg-pink-50 dark:bg-pink-900/20 text-pink-600',\n    },\n    {\n      icon: 'fas fa-crown',\n      title: 'Premium Features',\n      description: 'Unlock advanced problems, detailed explanations, and exclusive content.',\n      color: 'bg-amber-50 dark:bg-amber-900/20 text-amber-600',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"hero-gradient py-20\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl font-bold text-slate-900 dark:text-white mb-6 animate-fade-in\">\n              Master Data Structures & \n              <span className=\"text-brand-600 block\">Algorithms</span>\n            </h1>\n            <p className=\"text-xl text-slate-600 dark:text-slate-400 mb-8 max-w-3xl mx-auto animate-fade-in\" style={{ animationDelay: '0.2s' }}>\n              Practice coding problems, prepare for interviews, and level up your programming skills with AI-powered insights and real-time feedback.\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4 animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n              <Link href=\"/problems\">\n                <Button size=\"lg\" className=\"bg-brand-600 hover:bg-brand-700 text-lg px-8 py-4 rounded-xl\" data-testid=\"button-start-practicing\">\n                  <i className=\"fas fa-play mr-2\"></i>\n                  Start Practicing\n                </Button>\n              </Link>\n              {!(user as any)?.isPremium && user?.role !== 'admin' && (\n                <Link href=\"/subscribe\">\n                  <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-4 rounded-xl border-2 border-brand-600 text-brand-600 hover:bg-brand-50 dark:hover:bg-brand-950\" data-testid=\"button-view-premium\">\n                    <i className=\"fas fa-crown mr-2\"></i>\n                    View Premium\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </div>\n          \n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mt-16 animate-slide-up\" style={{ animationDelay: '0.6s' }}>\n            {stats.map((stat, index) => (\n              <Card key={stat.label} className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm shadow-lg\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className={`text-3xl font-bold ${stat.color} mb-2`}>\n                    {stat.value}\n                  </div>\n                  <div className=\"text-slate-600 dark:text-slate-400\">{stat.label}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-white dark:bg-slate-900\" data-testid=\"features-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-4\">\n              Why Choose DSAGrind?\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-400 max-w-3xl mx-auto\">\n              Everything you need to master coding interviews and become a better programmer.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={feature.title} className=\"hover:shadow-lg transition-shadow duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className={`inline-flex items-center justify-center w-12 h-12 rounded-lg ${feature.color} mb-4`}>\n                    <i className={`${feature.icon} text-lg`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-3\">\n                    {feature.title}\n                  </h3>\n                  <p className=\"text-slate-600 dark:text-slate-400\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Popular Categories */}\n      <section className=\"py-20 bg-slate-50 dark:bg-slate-800\" data-testid=\"categories-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-4\">\n              Popular Problem Categories\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-400\">\n              Start with these fundamental topics to build a strong foundation.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              { name: 'Arrays & Hashing', count: 125, difficulty: 'Beginner Friendly', color: 'bg-blue-500' },\n              { name: 'Two Pointers', count: 45, difficulty: 'Intermediate', color: 'bg-success-500' },\n              { name: 'Sliding Window', count: 32, difficulty: 'Intermediate', color: 'bg-purple-500' },\n              { name: 'Stack', count: 38, difficulty: 'Beginner Friendly', color: 'bg-warning-500' },\n              { name: 'Binary Search', count: 29, difficulty: 'Intermediate', color: 'bg-pink-500' },\n              { name: 'Linked Lists', count: 41, difficulty: 'Beginner Friendly', color: 'bg-indigo-500' },\n            ].map((category) => (\n              <Link key={category.name} href={`/problems?category=${category.name.toLowerCase().replace(/ & /, '-').replace(/ /g, '-')}`}>\n                <Card className=\"hover:shadow-lg transition-all duration-300 cursor-pointer group\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className={`w-4 h-4 rounded-full ${category.color}`}></div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {category.count} problems\n                      </Badge>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-2 group-hover:text-brand-600 transition-colors\">\n                      {category.name}\n                    </h3>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      {category.difficulty}\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/problems\">\n              <Button variant=\"outline\" size=\"lg\" data-testid=\"button-view-all-problems\">\n                View All Problems\n                <i className=\"fas fa-arrow-right ml-2\"></i>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-brand-600 to-brand-700\" data-testid=\"cta-section\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Start Your Coding Journey?\n          </h2>\n          <p className=\"text-xl text-brand-100 mb-8\">\n            Join thousands of developers who are already improving their skills with DSAGrind.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            {user ? (\n              <Link href=\"/problems\">\n                <Button size=\"lg\" className=\"bg-white text-brand-600 hover:bg-brand-50 text-lg px-8 py-4\" data-testid=\"button-continue-learning\">\n                  <i className=\"fas fa-code mr-2\"></i>\n                  Continue Learning\n                </Button>\n              </Link>\n            ) : (\n              <>\n                <Button size=\"lg\" className=\"bg-white text-brand-600 hover:bg-brand-50 text-lg px-8 py-4\" data-testid=\"button-sign-up-free\">\n                  <i className=\"fas fa-user-plus mr-2\"></i>\n                  Sign Up Free\n                </Button>\n                <Link href=\"/subscribe\">\n                  <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white hover:text-brand-600 text-lg px-8 py-4\" data-testid=\"button-go-premium\">\n                    <i className=\"fas fa-star mr-2\"></i>\n                    Go Premium\n                  </Button>\n                </Link>\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":10466},"client/src/pages/IDE.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { MonacoEditor } from '@/components/ide/MonacoEditor';\nimport { TestCases } from '@/components/ide/TestCases';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Problem, Submission } from '@/types/api';\n\nexport default function IDE() {\n  const [match, params] = useRoute('/problem/:id');\n  const [, setLocation] = useLocation();\n  const problemId = params?.id;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { joinProblem, updateCode, lastMessage } = useWebSocket();\n\n  const [code, setCode] = useState('');\n  const [language, setLanguage] = useState('python');\n  const [isRunning, setIsRunning] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [testResults, setTestResults] = useState<any[]>([]);\n  const [activeTab, setActiveTab] = useState('description');\n\n  // Fetch problem data\n  const { data: problem, isLoading: problemLoading } = useQuery<Problem>({\n    queryKey: ['/api/problems', problemId],\n    queryFn: () => fetch(`/api/problems/${problemId}`).then(res => res.json()),\n    enabled: !!problemId,\n  });\n\n  // Fetch user submissions for this problem\n  const { data: submissions = [] } = useQuery<Submission[]>({\n    queryKey: ['/api/submissions', problemId],\n    queryFn: () => {\n      const params = new URLSearchParams({ problemId: problemId! });\n      return fetch(`/api/submissions?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n      }).then(res => res.json());\n    },\n    enabled: !!problemId && !!user,\n  });\n\n  // Fetch discussions for this problem\n  const { data: discussions = [] } = useQuery({\n    queryKey: ['/api/discussions', problemId],\n    queryFn: () => fetch(`/api/discussions/${problemId}`).then(res => res.json()),\n    enabled: !!problemId,\n  });\n\n  // AI hint mutation\n  const getHintMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/ai/hint', {\n        title: problem?.title,\n        description: problem?.description,\n        code,\n        error: testResults.find(r => !r.passed)?.error,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'AI Hint',\n        description: data.hint,\n      });\n    },\n  });\n\n  // Run code mutation\n  const runCodeMutation = useMutation({\n    mutationFn: async () => {\n      setIsRunning(true);\n      // Simulate running code against visible test cases\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock test results\n      const results = (problem?.testCases as any[])?.slice(0, 3)?.map((testCase: any, index: number) => ({\n        id: `test-${index}`,\n        input: testCase.input,\n        output: testCase.output,\n        expected: testCase.output,\n        passed: Math.random() > 0.3, // Random pass/fail for demo\n        runtime: Math.floor(Math.random() * 100) + 10,\n        memory: Math.floor(Math.random() * 50) + 10,\n        explanation: testCase.explanation,\n      })) || [];\n      \n      setTestResults(results);\n      return results;\n    },\n    onSuccess: (results) => {\n      const passedCount = results.filter((r: any) => r.passed).length;\n      toast({\n        title: `Test Results: ${passedCount}/${results.length} Passed`,\n        description: passedCount === results.length ? 'All tests passed!' : 'Some tests failed.',\n        variant: passedCount === results.length ? 'default' : 'destructive',\n      });\n    },\n    onSettled: () => {\n      setIsRunning(false);\n    },\n  });\n\n  // Submit code mutation\n  const submitCodeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/submissions', {\n        problemId,\n        code,\n        language,\n      });\n      return response.json();\n    },\n    onSuccess: (submission) => {\n      toast({\n        title: 'Submission Received',\n        description: 'Your code is being evaluated...',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/submissions', problemId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Submission Failed',\n        description: error.message || 'Failed to submit code',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Join problem room when component mounts\n  useEffect(() => {\n    if (problemId && user) {\n      joinProblem(problemId);\n    }\n  }, [problemId, user, joinProblem]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage) {\n      if (lastMessage.type === 'submission_update') {\n        const submission = lastMessage.data;\n        if (submission.status === 'accepted') {\n          toast({\n            title: 'Submission Accepted!',\n            description: `Runtime: ${submission.runtime}ms, Memory: ${submission.memory}MB`,\n          });\n        } else if (submission.status === 'rejected') {\n          toast({\n            title: 'Submission Rejected',\n            description: submission.error || 'Your solution did not pass all test cases.',\n            variant: 'destructive',\n          });\n        }\n        setIsSubmitting(false);\n      }\n    }\n  }, [lastMessage, toast]);\n\n  // Update code in real-time via WebSocket\n  const handleCodeChange = (newCode: string) => {\n    setCode(newCode);\n    if (problemId && user) {\n      updateCode(problemId, newCode, language);\n    }\n  };\n\n  const handleRun = () => {\n    if (!code.trim()) {\n      toast({\n        title: 'Empty Code',\n        description: 'Please write some code before running tests.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    runCodeMutation.mutate();\n  };\n\n  const handleSubmit = () => {\n    if (!code.trim()) {\n      toast({\n        title: 'Empty Code',\n        description: 'Please write some code before submitting.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    setIsSubmitting(true);\n    submitCodeMutation.mutate();\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case 'easy': return 'difficulty-easy';\n      case 'medium': return 'difficulty-medium';\n      case 'hard': return 'difficulty-hard';\n      default: return '';\n    }\n  };\n\n  if (!match || !problemId) {\n    return <div>Problem not found</div>;\n  }\n\n  if (problemLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-brand-600 border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p>Loading problem...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!problem) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-exclamation-triangle text-4xl text-warning-500 mb-4\"></i>\n          <h2 className=\"text-xl font-semibold mb-2\">Problem Not Found</h2>\n          <p className=\"text-slate-600 dark:text-slate-400\">The requested problem could not be found.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if user can access this problem\n  const canAccess = !problem.isPaid || (user?.subscriptionPlan === 'premium' && user?.subscriptionStatus === 'active') || user?.role === 'admin';\n  if (!canAccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <i className=\"fas fa-crown text-4xl text-amber-500 mb-4\"></i>\n            <h2 className=\"text-xl font-semibold mb-2\">Premium Problem</h2>\n            <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n              This problem requires a premium subscription to access.\n            </p>\n            <Button className=\"bg-brand-600 hover:bg-brand-700\">\n              <i className=\"fas fa-star mr-2\"></i>\n              Upgrade to Premium\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700 px-6 py-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" onClick={() => setLocation('/problems')} data-testid=\"button-back\">\n            <i className=\"fas fa-arrow-left text-lg\"></i>\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <h1 className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n              {problem.title}\n            </h1>\n            <Badge className={getDifficultyColor(problem.difficulty)}>\n              {problem.difficulty}\n            </Badge>\n            {problem.isPaid && (\n              <Badge variant=\"outline\">\n                <i className=\"fas fa-crown mr-1 text-amber-500\"></i>\n                Premium\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => getHintMutation.mutate()}\n            disabled={getHintMutation.isPending}\n            data-testid=\"button-get-hint\"\n          >\n            {getHintMutation.isPending ? (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            ) : (\n              <i className=\"fas fa-lightbulb mr-2\"></i>\n            )}\n            AI Hint\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={handleRun}\n            disabled={isRunning}\n            className=\"bg-success-600 text-white hover:bg-success-700\"\n            data-testid=\"button-run-code\"\n          >\n            {isRunning ? (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            ) : (\n              <i className=\"fas fa-play mr-2\"></i>\n            )}\n            Run\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || submitCodeMutation.isPending}\n            className=\"bg-brand-600 hover:bg-brand-700\"\n            data-testid=\"button-submit-code\"\n          >\n            {isSubmitting || submitCodeMutation.isPending ? (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            ) : (\n              <i className=\"fas fa-check mr-2\"></i>\n            )}\n            Submit\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex\">\n        {/* Left Panel - Problem Description */}\n        <div className=\"w-1/2 border-r border-slate-200 dark:border-slate-700 flex flex-col\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1\">\n            <div className=\"border-b border-slate-200 dark:border-slate-700 px-6 py-2\">\n              <TabsList>\n                <TabsTrigger value=\"description\" data-testid=\"tab-description\">Description</TabsTrigger>\n                <TabsTrigger value=\"submissions\" data-testid=\"tab-submissions\">\n                  Submissions ({submissions.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"discussions\" data-testid=\"tab-discussions\">\n                  Discussions ({discussions.length})\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"description\" className=\"flex-1 m-0\">\n              <ScrollArea className=\"h-full\">\n                <div className=\"p-6 space-y-6\">\n                  <div className=\"prose prose-slate dark:prose-invert max-w-none\">\n                    <div className=\"mb-6\">\n                      <h2 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-4\">\n                        Problem Description\n                      </h2>\n                      <div className=\"text-slate-700 dark:text-slate-300 whitespace-pre-wrap\">\n                        {problem.description}\n                      </div>\n                    </div>\n\n                    {/* Examples */}\n                    {Array.isArray(problem.examples) && problem.examples.length > 0 && (\n                      <div className=\"space-y-4\">\n                        {problem.examples.map((example: any, index: number) => (\n                          <div key={index}>\n                            <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-3\">\n                              Example {index + 1}:\n                            </h3>\n                            <div className=\"bg-slate-50 dark:bg-slate-800 p-4 rounded-lg font-mono text-sm space-y-2\">\n                              <div><strong>Input:</strong> {example.input}</div>\n                              <div><strong>Output:</strong> {example.output}</div>\n                              {example.explanation && (\n                                <div><strong>Explanation:</strong> {example.explanation}</div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Constraints */}\n                    {problem.constraints && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-3\">\n                          Constraints:\n                        </h3>\n                        <div className=\"bg-slate-50 dark:bg-slate-800 p-4 rounded-lg\">\n                          <pre className=\"text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap font-mono\">\n                            {problem.constraints}\n                          </pre>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Tags */}\n                    {Array.isArray(problem.tags) && problem.tags.length > 0 && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-3\">\n                          Topics:\n                        </h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {problem.tags.map((tag: string) => (\n                            <Badge key={tag} variant=\"outline\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Hints */}\n                    {Array.isArray(problem.hints) && problem.hints.length > 0 && (\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-3\">\n                          Hints:\n                        </h3>\n                        <div className=\"space-y-2\">\n                          {problem.hints.map((hint: string, index: number) => (\n                            <div key={index} className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                              <div className=\"flex items-start\">\n                                <i className=\"fas fa-lightbulb text-blue-600 mr-2 mt-1\"></i>\n                                <p className=\"text-sm text-blue-800 dark:text-blue-200\">{hint}</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </ScrollArea>\n            </TabsContent>\n\n            <TabsContent value=\"submissions\" className=\"flex-1 m-0\">\n              <ScrollArea className=\"h-full\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">\n                    Your Submissions\n                  </h3>\n                  {submissions.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {submissions.map((submission) => (\n                        <Card key={submission.id}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <Badge\n                                className={\n                                  submission.status === 'accepted' ? 'difficulty-easy' :\n                                  submission.status === 'rejected' ? 'difficulty-hard' : 'difficulty-medium'\n                                }\n                              >\n                                {submission.status}\n                              </Badge>\n                              <span className=\"text-sm text-slate-500\">\n                                {new Date(submission.createdAt).toLocaleString()}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-slate-600 dark:text-slate-400\">\n                                {submission.language}\n                              </span>\n                              <div className=\"flex space-x-4 text-slate-600 dark:text-slate-400\">\n                                {submission.runtime && (\n                                  <span>{submission.runtime}ms</span>\n                                )}\n                                {submission.memory && (\n                                  <span>{submission.memory}MB</span>\n                                )}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <i className=\"fas fa-code text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n                      <p className=\"text-slate-600 dark:text-slate-400\">\n                        No submissions yet. Write some code and submit!\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n\n            <TabsContent value=\"discussions\" className=\"flex-1 m-0\">\n              <ScrollArea className=\"h-full\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-4\">\n                    Discussions\n                  </h3>\n                  {discussions.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {discussions.map((discussion: any) => (\n                        <Card key={discussion.id}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start space-x-3\">\n                              <div className=\"w-8 h-8 bg-brand-100 dark:bg-brand-900 rounded-full flex items-center justify-center\">\n                                <span className=\"text-brand-600 text-sm font-semibold\">\n                                  {discussion.user?.username?.substring(0, 1).toUpperCase() || 'U'}\n                                </span>\n                              </div>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2 mb-2\">\n                                  <span className=\"font-medium text-slate-900 dark:text-white\">\n                                    {discussion.user?.username || 'Anonymous'}\n                                  </span>\n                                  <span className=\"text-slate-500 text-sm\">\n                                    {new Date(discussion.createdAt).toLocaleString()}\n                                  </span>\n                                </div>\n                                <p className=\"text-slate-700 dark:text-slate-300 text-sm\">\n                                  {discussion.content}\n                                </p>\n                                <div className=\"flex items-center space-x-4 mt-2\">\n                                  <button className=\"text-slate-500 hover:text-success-600 text-sm\">\n                                    <i className=\"far fa-thumbs-up mr-1\"></i>\n                                    {discussion.upvotes || 0}\n                                  </button>\n                                  <button className=\"text-slate-500 hover:text-slate-700 text-sm\">\n                                    Reply\n                                  </button>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <i className=\"fas fa-comments text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n                      <p className=\"text-slate-600 dark:text-slate-400\">\n                        No discussions yet. Be the first to start a conversation!\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Right Panel - Code Editor */}\n        <div className=\"w-1/2 flex flex-col\">\n          <div className=\"flex-1\">\n            <MonacoEditor\n              value={code}\n              onChange={handleCodeChange}\n              language={language}\n              onLanguageChange={setLanguage}\n              onRun={handleRun}\n              onSubmit={handleSubmit}\n              isRunning={isRunning}\n              isSubmitting={isSubmitting || submitCodeMutation.isPending}\n            />\n          </div>\n          \n          {/* Test Cases */}\n          <TestCases\n            testCases={testResults}\n            isRunning={isRunning}\n            onRunTests={handleRun}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22847},"client/src/pages/Problems.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { ProblemTable } from '@/components/problems/ProblemTable';\nimport { ProblemFilters } from '@/components/problems/ProblemFilters';\nimport { Problem, Category } from '@/types/api';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Problems() {\n  const { user } = useAuth();\n  const [filters, setFilters] = useState<{\n    categoryId?: string;\n    difficulty?: string;\n    isPaid?: boolean;\n    search?: string;\n  }>({});\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: problemsData, isLoading } = useQuery<{ problems: Problem[]; total: number }>({\n    queryKey: ['/api/problems', filters],\n    queryFn: () => {\n      const searchParams = new URLSearchParams();\n      if (filters.categoryId) searchParams.set('categoryId', filters.categoryId);\n      if (filters.difficulty) searchParams.set('difficulty', filters.difficulty);\n      if (filters.isPaid !== undefined) searchParams.set('isPaid', String(filters.isPaid));\n      if (filters.search) searchParams.set('search', filters.search);\n      \n      return fetch(`/api/problems?${searchParams.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n      }).then(res => res.json());\n    },\n  });\n\n  const problems = problemsData?.problems || [];\n\n  const handleFiltersChange = (newFilters: typeof filters) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n              Practice Problems\n            </h1>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              {problems.length > 0 && (\n                <>Showing {problems.length} problem{problems.length !== 1 ? 's' : ''}</>\n              )}\n              {Object.keys(filters).length > 0 && ' with filters applied'}\n            </p>\n          </div>\n          \n          {user?.role === 'admin' && (\n            <Button className=\"bg-success-600 hover:bg-success-700\" data-testid=\"button-admin-add-problem\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Problem\n            </Button>\n          )}\n        </div>\n\n        {/* Filters */}\n        <ProblemFilters\n          categories={categories}\n          filters={filters}\n          onFiltersChange={handleFiltersChange}\n        />\n\n        {/* Quick Stats */}\n        {!isLoading && problems.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-white dark:bg-slate-800 rounded-lg p-4 border border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Total Problems</p>\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">{problems.length}</p>\n                </div>\n                <i className=\"fas fa-code text-2xl text-brand-600\"></i>\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-800 rounded-lg p-4 border border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Easy</p>\n                  <p className=\"text-2xl font-bold text-success-600\">\n                    {problems.filter(p => p.difficulty === 'Easy').length}\n                  </p>\n                </div>\n                <i className=\"fas fa-smile text-2xl text-success-600\"></i>\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-800 rounded-lg p-4 border border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Medium</p>\n                  <p className=\"text-2xl font-bold text-warning-600\">\n                    {problems.filter(p => p.difficulty === 'Medium').length}\n                  </p>\n                </div>\n                <i className=\"fas fa-meh text-2xl text-warning-600\"></i>\n              </div>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-800 rounded-lg p-4 border border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Hard</p>\n                  <p className=\"text-2xl font-bold text-error-600\">\n                    {problems.filter(p => p.difficulty === 'Hard').length}\n                  </p>\n                </div>\n                <i className=\"fas fa-fire text-2xl text-error-600\"></i>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Problems Table */}\n        <ProblemTable problems={problems} isLoading={isLoading} />\n\n        {/* Premium Upgrade CTA */}\n        {user?.subscriptionPlan !== 'premium' && problems.some(p => p.isPaid) && (\n          <div className=\"mt-8 bg-gradient-to-r from-brand-500 to-brand-600 rounded-xl p-6 text-white\">\n            <div className=\"flex flex-col md:flex-row items-center justify-between\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-2\">\n                  <i className=\"fas fa-crown mr-2 text-amber-300\"></i>\n                  Unlock Premium Problems\n                </h3>\n                <p className=\"text-brand-100\">\n                  Get access to {problems.filter(p => p.isPaid).length} premium problems with detailed solutions and exclusive content.\n                </p>\n              </div>\n              <Button \n                className=\"mt-4 md:mt-0 bg-white text-brand-600 hover:bg-brand-50\"\n                data-testid=\"button-upgrade-premium\"\n              >\n                <i className=\"fas fa-arrow-up mr-2\"></i>\n                Upgrade Now\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Help Section */}\n        {problems.length === 0 && !isLoading && (\n          <div className=\"text-center py-12\">\n            <div className=\"max-w-md mx-auto\">\n              <i className=\"fas fa-search text-6xl text-slate-300 dark:text-slate-600 mb-6\"></i>\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-4\">\n                No problems found\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-400 mb-6\">\n                Try adjusting your search filters or explore different categories.\n              </p>\n              <Button\n                onClick={() => setFilters({})}\n                variant=\"outline\"\n                data-testid=\"button-reset-filters\"\n              >\n                <i className=\"fas fa-refresh mr-2\"></i>\n                Clear All Filters\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7454},"client/src/pages/Subscribe.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useStripe, useElements, PaymentElement, Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Load Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || 'pk_test_default');\n\nfunction SubscribeForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/problems`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: 'Payment Failed',\n          description: error.message,\n          variant: 'destructive',\n        });\n      } else {\n        toast({\n          title: 'Payment Successful',\n          description: 'Welcome to DSAGrind Premium!',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Payment Error',\n        description: error.message || 'An unexpected error occurred',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full bg-brand-600 hover:bg-brand-700 text-lg py-3\"\n        data-testid=\"button-subscribe-submit\"\n      >\n        {isProcessing ? (\n          <>\n            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            Processing...\n          </>\n        ) : (\n          <>\n            <i className=\"fas fa-crown mr-2\"></i>\n            Subscribe to Premium\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\nfunction SubscribeContent() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState('');\n  const [selectedPlan, setSelectedPlan] = useState<'monthly' | 'annual'>('monthly');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const plans = {\n    monthly: {\n      name: 'Monthly Premium',\n      price: '$9.99',\n      period: '/month',\n      features: [\n        'Access to all premium problems',\n        'Detailed solution explanations',\n        'AI-powered hints and debugging',\n        'Advanced progress analytics',\n        'Priority customer support',\n        'Early access to new features',\n      ],\n    },\n    annual: {\n      name: 'Annual Premium',\n      price: '$99.99',\n      period: '/year',\n      originalPrice: '$119.88',\n      savings: 'Save $19.89',\n      features: [\n        'Everything in Monthly Premium',\n        '2 months free (17% savings)',\n        'Premium-only contests',\n        'Exclusive community access',\n        'Advanced interview prep tools',\n        'Personal coding mentor sessions',\n      ],\n    },\n  };\n\n  const currentPlan = plans[selectedPlan];\n\n  useEffect(() => {\n    if (user && !(user as any).isPremium && user?.role !== 'admin') {\n      createSubscription();\n    }\n  }, [user, selectedPlan]);\n\n  const createSubscription = async () => {\n    if (!user) {\n      toast({\n        title: 'Authentication Required',\n        description: 'Please sign in to subscribe to premium',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/get-or-create-subscription');\n      const data = await response.json();\n      setClientSecret(data.clientSecret);\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create subscription',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // If user is already premium or admin\n  if ((user as any)?.isPremium || user?.role === 'admin') {\n    return (\n      <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900 py-20\">\n        <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-12 pb-8\">\n              <i className=\"fas fa-crown text-6xl text-amber-500 mb-6\"></i>\n              <h2 className=\"text-2xl font-bold text-slate-900 dark:text-white mb-4\">\n                You're Already a Premium Member!\n              </h2>\n              <p className=\"text-slate-600 dark:text-slate-400 mb-8\">\n                Enjoy all the premium features and continue your coding journey.\n              </p>\n              <Link href=\"/problems\">\n                <Button className=\"bg-brand-600 hover:bg-brand-700\">\n                  <i className=\"fas fa-code mr-2\"></i>\n                  Continue Practicing\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900 py-20\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n            <i className=\"fas fa-crown text-amber-500 mr-3\"></i>\n            Upgrade to Premium\n          </h1>\n          <p className=\"text-xl text-slate-600 dark:text-slate-400 max-w-3xl mx-auto\">\n            Unlock advanced features, premium problems, and AI-powered insights to accelerate your coding journey.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Plan Selection */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 dark:text-white\">\n              Choose Your Plan\n            </h2>\n\n            {/* Plan Toggle */}\n            <div className=\"flex bg-slate-200 dark:bg-slate-800 rounded-lg p-1\">\n              <button\n                onClick={() => setSelectedPlan('monthly')}\n                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n                  selectedPlan === 'monthly'\n                    ? 'bg-white dark:bg-slate-900 text-slate-900 dark:text-white shadow-sm'\n                    : 'text-slate-600 dark:text-slate-400'\n                }`}\n                data-testid=\"button-monthly-plan\"\n              >\n                Monthly\n              </button>\n              <button\n                onClick={() => setSelectedPlan('annual')}\n                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n                  selectedPlan === 'annual'\n                    ? 'bg-white dark:bg-slate-900 text-slate-900 dark:text-white shadow-sm'\n                    : 'text-slate-600 dark:text-slate-400'\n                }`}\n                data-testid=\"button-annual-plan\"\n              >\n                <span>Annual</span>\n                <Badge className=\"ml-2 bg-success-500 text-white\">Save 17%</Badge>\n              </button>\n            </div>\n\n            {/* Selected Plan Details */}\n            <Card className=\"border-2 border-brand-200 dark:border-brand-800\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl text-slate-900 dark:text-white\">\n                    {currentPlan.name}\n                  </CardTitle>\n                  {selectedPlan === 'annual' && (\n                    <Badge className=\"bg-success-500 text-white\">Most Popular</Badge>\n                  )}\n                </div>\n                <div className=\"flex items-baseline space-x-2\">\n                  <span className=\"text-3xl font-bold text-brand-600\">\n                    {currentPlan.price}\n                  </span>\n                  <span className=\"text-slate-600 dark:text-slate-400\">\n                    {currentPlan.period}\n                  </span>\n                  {(currentPlan as any).originalPrice && (\n                    <span className=\"text-sm text-slate-500 line-through\">\n                      {(currentPlan as any).originalPrice}\n                    </span>\n                  )}\n                </div>\n                {(currentPlan as any).savings && (\n                  <p className=\"text-sm text-success-600 font-medium\">\n                    {(currentPlan as any).savings}\n                  </p>\n                )}\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {currentPlan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center\">\n                      <i className=\"fas fa-check text-success-600 mr-3\"></i>\n                      <span className=\"text-slate-700 dark:text-slate-300\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Feature Comparison */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Free vs Premium</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { feature: 'Basic Problems', free: '✓', premium: '✓' },\n                    { feature: 'Premium Problems', free: '✗', premium: '✓' },\n                    { feature: 'AI Hints', free: 'Limited', premium: 'Unlimited' },\n                    { feature: 'Solution Explanations', free: '✗', premium: '✓' },\n                    { feature: 'Progress Analytics', free: 'Basic', premium: 'Advanced' },\n                    { feature: 'Priority Support', free: '✗', premium: '✓' },\n                  ].map((item, index) => (\n                    <div key={index} className=\"grid grid-cols-3 gap-4 py-2\">\n                      <span className=\"text-sm font-medium text-slate-900 dark:text-white\">\n                        {item.feature}\n                      </span>\n                      <span className=\"text-sm text-center text-slate-600 dark:text-slate-400\">\n                        {item.free}\n                      </span>\n                      <span className=\"text-sm text-center text-brand-600 font-medium\">\n                        {item.premium}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Form */}\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 dark:text-white\">\n              Payment Details\n            </h2>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Complete Your Subscription</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!user ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-user-circle text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-2\">\n                      Sign in Required\n                    </h3>\n                    <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n                      Please sign in to your account to subscribe to premium.\n                    </p>\n                    <Button className=\"bg-brand-600 hover:bg-brand-700\">\n                      Sign In\n                    </Button>\n                  </div>\n                ) : isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-brand-600 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-slate-600 dark:text-slate-400\">\n                      Setting up your subscription...\n                    </p>\n                  </div>\n                ) : clientSecret ? (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <SubscribeForm />\n                  </Elements>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Button\n                      onClick={createSubscription}\n                      className=\"bg-brand-600 hover:bg-brand-700\"\n                      data-testid=\"button-create-subscription\"\n                    >\n                      <i className=\"fas fa-credit-card mr-2\"></i>\n                      Set Up Payment\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Security Notice */}\n            <Card className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <i className=\"fas fa-shield-alt text-blue-600 mt-1\"></i>\n                  <div>\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-1\">\n                      Secure Payment\n                    </h4>\n                    <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                      Your payment information is processed securely through Stripe. We never store your card details.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Money-back Guarantee */}\n            <Card className=\"bg-success-50 dark:bg-success-950 border-success-200 dark:border-success-800\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <i className=\"fas fa-money-bill-wave text-success-600 mt-1\"></i>\n                  <div>\n                    <h4 className=\"font-semibold text-success-900 dark:text-success-100 mb-1\">\n                      30-Day Money-Back Guarantee\n                    </h4>\n                    <p className=\"text-sm text-success-800 dark:text-success-200\">\n                      Not satisfied? Get a full refund within 30 days, no questions asked.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"mt-20\">\n          <h2 className=\"text-2xl font-semibold text-slate-900 dark:text-white text-center mb-8\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[\n              {\n                question: 'Can I cancel my subscription anytime?',\n                answer: 'Yes, you can cancel your subscription at any time from your account settings. Your premium access will continue until the end of your billing period.',\n              },\n              {\n                question: 'Do you offer student discounts?',\n                answer: 'Yes! We offer a 50% student discount. Contact our support team with your student email for verification.',\n              },\n              {\n                question: 'What payment methods do you accept?',\n                answer: 'We accept all major credit cards, debit cards, and PayPal through our secure Stripe payment processing.',\n              },\n              {\n                question: 'Is there a free trial available?',\n                answer: 'Yes, new users get 7 days of premium access free. No credit card required to start your trial.',\n              },\n            ].map((faq, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-slate-900 dark:text-white mb-2\">\n                    {faq.question}\n                  </h3>\n                  <p className=\"text-slate-600 dark:text-slate-400 text-sm\">\n                    {faq.answer}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Subscribe() {\n  return <SubscribeContent />;\n}\n","size_bytes":16615},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/api.ts":{"content":"// User Types\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  isEmailVerified: boolean;\n  isActive: boolean;\n  totalSolved: number;\n  rank: number;\n  subscriptionPlan: string;\n  subscriptionStatus: string;\n  subscriptionExpires?: string;\n  createdAt: string;\n  lastLoginAt?: string;\n}\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  refreshToken: string;\n  user: User;\n}\n\n// Problem Types\nexport interface Problem {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: string;\n  categoryId: string;\n  tags: string[];\n  hints: string[];\n  solution?: string;\n  solutionLanguage?: string;\n  testCases: TestCase[];\n  constraints?: string;\n  examples: Example[];\n  isPaid: boolean;\n  isApproved: boolean;\n  likes: number;\n  dislikes: number;\n  submissions: number;\n  acceptedSubmissions: number;\n  acceptanceRate: number;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface TestCase {\n  input: string;\n  expectedOutput: string;\n  isHidden: boolean;\n}\n\nexport interface Example {\n  input: string;\n  output: string;\n  explanation?: string;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  slug: string;\n  description?: string;\n  icon?: string;\n  problemCount: number;\n  totalProblems: number;\n  freeProblemLimit: number;\n  isActive: boolean;\n}\n\n// Submission Types\nexport interface Submission {\n  id: string;\n  userId: string;\n  problemId: string;\n  code: string;\n  language: string;\n  status: string;\n  runtime?: number;\n  memory?: number;\n  testCasesPassed: number;\n  totalTestCases: number;\n  errorMessage?: string;\n  notes?: string;\n  createdAt: string;\n}\n\nexport interface CodeExecutionRequest {\n  code: string;\n  language: string;\n  problemId: string;\n}\n\nexport interface CodeExecutionResult {\n  status: string;\n  output?: string;\n  error?: string;\n  runtime?: number;\n  memory?: number;\n  testCasesPassed: number;\n  totalTestCases: number;\n  testResults: TestCaseResult[];\n}\n\nexport interface TestCaseResult {\n  input: string;\n  expectedOutput: string;\n  actualOutput: string;\n  passed: boolean;\n  runtime: number;\n  memory: number;\n}\n\n// AI Types\nexport interface AIHintRequest {\n  problemId: string;\n  currentCode?: string;\n  difficulty: string;\n}\n\nexport interface AIExplanationRequest {\n  problemId: string;\n  code: string;\n  language: string;\n}\n\nexport interface AICodeAnalysisRequest {\n  code: string;\n  language: string;\n  problemId: string;\n}\n\nexport interface AIResponse {\n  response: string;\n  confidence: number;\n  context: string;\n  usage: TokenUsage;\n}\n\nexport interface TokenUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n  cost: number;\n}\n\n// Search Types\nexport interface SearchRequest {\n  query: string;\n  filters?: SearchFilters;\n  page?: number;\n  pageSize?: number;\n}\n\nexport interface SearchFilters {\n  difficulty?: string[];\n  categories?: string[];\n  tags?: string[];\n  isPremium?: boolean;\n}\n\nexport interface SearchResult {\n  problems: Problem[];\n  totalCount: number;\n  suggestions: string[];\n  aggregations: SearchAggregations;\n}\n\nexport interface SearchAggregations {\n  difficulties: { [key: string]: number };\n  categories: { [key: string]: number };\n  tags: { [key: string]: number };\n}\n\n// Payment Types\nexport interface PaymentIntent {\n  id: string;\n  clientSecret: string;\n  amount: number;\n  currency: string;\n  status: string;\n}\n\nexport interface CreatePaymentRequest {\n  amount: number;\n  currency: string;\n  description: string;\n  metadata?: { [key: string]: string };\n}\n\nexport interface SubscriptionPlan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  currency: string;\n  interval: string;\n  features: string[];\n  isPopular: boolean;\n  stripePriceId: string;\n}\n\nexport interface Subscription {\n  id: string;\n  userId: string;\n  planId: string;\n  status: string;\n  currentPeriodStart: string;\n  currentPeriodEnd: string;\n  cancelAtPeriodEnd: boolean;\n  stripeSubscriptionId: string;\n  createdAt: string;\n}\n\n// Admin Types\nexport interface AdminDashboard {\n  totalUsers: number;\n  activeUsers: number;\n  totalProblems: number;\n  pendingProblems: number;\n  totalSubmissions: number;\n  todaySubmissions: number;\n  revenue: number;\n  premiumUsers: number;\n  submissionsChart: ChartData[];\n  usersChart: ChartData[];\n}\n\nexport interface ChartData {\n  label: string;\n  value: number;\n}\n\nexport interface AdminNotification {\n  id: string;\n  title: string;\n  message: string;\n  type: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport interface SystemHealth {\n  isHealthy: boolean;\n  services: ServiceHealth[];\n  database: DatabaseHealth;\n  externalServices: ExternalServiceHealth;\n}\n\nexport interface ServiceHealth {\n  name: string;\n  isHealthy: boolean;\n  status: string;\n  responseTime: number;\n  lastCheck: string;\n}\n\nexport interface DatabaseHealth {\n  isHealthy: boolean;\n  responseTime: number;\n  connectionCount: number;\n}\n\nexport interface ExternalServiceHealth {\n  stripeHealthy: boolean;\n  redisHealthy: boolean;\n  kafkaHealthy: boolean;\n  qdrantHealthy: boolean;\n}\n\n// Common Types\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: string[];\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  totalCount: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n}","size_bytes":5555},"backend/src/Services/DSAGrind.AI.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing DSAGrind.AI.API.Services;\nusing Serilog;\nusing System.Reflection;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add Serilog\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/ai-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add Common Services\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add JWT Authentication\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false;\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add Auto Mapper\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\n\n// Add MediatR\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// Add Services\nbuilder.Services.AddScoped<IAIService, AIService>();\n\n// Add CORS\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\n// Health check\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.AI.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"AI:Port\") ?? \"5003\";\n    var host = builder.Configuration.GetValue<string>(\"AI:Host\") ?? \"0.0.0.0\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind AI API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"AI API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2819},"backend/src/Services/DSAGrind.Admin.API/Program.cs":{"content":"using DSAGrind.Admin.API.Services;\nusing DSAGrind.Common.Extensions;\nusing Microsoft.IdentityModel.Tokens;\nusing Serilog;\nusing System.Reflection;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/admin-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            // Configure your token validation parameters here\n        };\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false; // <-- Add this line for development\n    });\nbuilder.Services.AddCommonServices(builder.Configuration);\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\nbuilder.Services.AddScoped<IAdminService, AdminService>();\nbuilder.Services.AddScoped<IUserManagementService, UserManagementService>();\nbuilder.Services.AddScoped<IContentModerationService, ContentModerationService>();\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(\"http://localhost:5000\", \"https://localhost:5000\")\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"DSAGrind Admin API v1\");\n        c.RoutePrefix = \"swagger\"; // Explicitly set the route prefix to /swagger\n    });\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Admin.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    Log.Information(\"Starting DSAGrind Admin API on port 5005\");\n    app.Run(\"http://localhost:5005\");\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Admin API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2840},"backend/src/Services/DSAGrind.Auth.API/Program.cs":{"content":"﻿using DSAGrind.Auth.API.Repositories;\nusing DSAGrind.Auth.API.Services;\nusing DSAGrind.Common.Configuration;\nusing DSAGrind.Common.Extensions;\nusing DSAGrind.Common.Services;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.IdentityModel.Tokens;\nusing MongoDB.Driver;\nusing Serilog;\nusing HealthChecks.Redis;\nusing System.Text;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure Serilog\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/auth-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() { Title = \"DSAGrind Auth API\", Version = \"v1\" });\n\n    // Add JWT authentication to Swagger\n    c.AddSecurityDefinition(\"Bearer\", new()\n    {\n        Description = \"JWT Authorization header using the Bearer scheme. Example: \\\"Authorization: Bearer {token}\\\"\",\n        Name = \"Authorization\",\n        In = Microsoft.OpenApi.Models.ParameterLocation.Header,\n        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,\n        Scheme = \"Bearer\"\n    });\n\n    c.AddSecurityRequirement(new()\n    {\n        {\n            new()\n            {\n                Reference = new() { Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme, Id = \"Bearer\" }\n            },\n            new string[] {}\n        }\n    });\n});\n\n// Add common services (includes MongoDB, settings, etc.)\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Configure additional settings specific to Auth API\nbuilder.Services.Configure<OAuthSettings>(builder.Configuration.GetSection(OAuthSettings.SectionName));\n\n// Add CORS\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyMethod()\n              .AllowAnyHeader()\n              .AllowCredentials();\n    });\n});\n\n// Add JWT Authentication\nvar jwtSettings = builder.Configuration.GetSection(JwtSettings.SectionName).Get<JwtSettings>();\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = jwtSettings!.ValidateIssuer,\n            ValidateAudience = jwtSettings.ValidateAudience,\n            ValidateLifetime = jwtSettings.ValidateLifetime,\n            ValidateIssuerSigningKey = jwtSettings.ValidateIssuerSigningKey,\n            ValidIssuer = jwtSettings.Issuer,\n            ValidAudience = jwtSettings.Audience,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Secret)),\n            ClockSkew = TimeSpan.FromMinutes(jwtSettings.ClockSkewMinutes)\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnMessageReceived = context =>\n            {\n                // Allow token from query string for SignalR connections\n                var accessToken = context.Request.Query[\"access_token\"];\n                var path = context.HttpContext.Request.Path;\n\n                if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments(\"/hubs\"))\n                {\n                    context.Token = accessToken;\n                }\n\n                return Task.CompletedTask;\n            },\n            OnAuthenticationFailed = context =>\n            {\n                if (context.Exception.GetType() == typeof(SecurityTokenExpiredException))\n                {\n                    context.Response.Headers.Add(\"Token-Expired\", \"true\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add HttpClient\nbuilder.Services.AddHttpClient();\n\n// Add AutoMapper\nbuilder.Services.AddAutoMapper(typeof(Program));\n\n// Add Auth API specific services\nbuilder.Services.AddScoped<IUserRepository, UserRepository>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<IOAuthService, OAuthService>();\n\n// Add health checks (✅ Fixed MongoDB registration)\nbuilder.Services.AddHealthChecks()\n    .AddMongoDb(\n        sp => sp.GetRequiredService<IMongoClient>(), // fixed: using DI-resolved client\n        name: \"mongodb\",\n        tags: new[] { \"db\", \"mongodb\" }\n    )\n    .AddRedis(\n        builder.Configuration.GetConnectionString(\"Redis\") ?? \"localhost:6379\",\n        name: \"redis\",\n        tags: new[] { \"cache\", \"redis\" }\n    );\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"DSAGrind Auth API v1\");\n        c.RoutePrefix = \"swagger\"; // Set Swagger UI at root\n    });\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHealthChecks(\"/health\");\n\n// Global exception handler\napp.UseExceptionHandler(errorApp =>\n{\n    errorApp.Run(async context =>\n    {\n        context.Response.StatusCode = 500;\n        context.Response.ContentType = \"application/json\";\n\n        var error = new { message = \"An unexpected error occurred.\" };\n        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(error));\n    });\n});\n\n// Graceful shutdown\nvar lifetime = app.Services.GetRequiredService<IHostApplicationLifetime>();\nlifetime.ApplicationStopping.Register(() =>\n{\n    Log.Information(\"DSAGrind Auth API is shutting down...\");\n});\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Auth:Port\") ?? \"8080\";\n    var host = builder.Configuration.GetValue<string>(\"Auth:Host\") ?? \"localhost\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind Auth API at {url}\");\n    await app.RunAsync(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"DSAGrind Auth API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}\n","size_bytes":6520},"backend/src/Services/DSAGrind.Gateway.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing Serilog;\n\n// Load environment variables from .env files before creating builder\nDSAGrind.Common.Extensions.EnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/gateway-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add controllers\nbuilder.Services.AddControllers();\n\n// Add API documentation  \nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() { Title = \"DSAGrind Gateway API\", Version = \"v1\" });\n});\n\n// Add reverse proxy\nbuilder.Services.AddReverseProxy()\n    .LoadFromConfig(builder.Configuration.GetSection(\"ReverseProxy\"));\n\n//builder.Services.AddCors(options =>\n//{\n//    options.AddPolicy(\"AllowAll\", policy =>\n//    {\n//        policy.AllowAnyOrigin()\n//              .AllowAnyHeader()\n//              .AllowAnyMethod();\n//    });\n//});\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\nvar app = builder.Build();\n\n// Configure development-only services\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"DSAGrind Gateway API v1\");\n        c.RoutePrefix = \"swagger\"; // Set Swagger UI at /swagger\n    });\n}\n\n// Rate limiter disabled for now\n//app.UseCors(\"AllowAll\");\napp.UseCors(\"AllowFrontend\");\n\n// Map controllers first\napp.MapControllers();\n\n// Map reverse proxy\napp.MapReverseProxy();\n\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Gateway.API\", timestamp = DateTime.UtcNow });\napp.MapGet(\"/\", () => \"DSAGrind API Gateway - Routing traffic to microservices\");\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Gateway:Port\") ?? \"5000\";\n    var host = builder.Configuration.GetValue<string>(\"Gateway:Host\") ?? \"localhost\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind Gateway API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Gateway API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2651},"backend/src/Services/DSAGrind.MCP.API/Program.cs":{"content":"using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\nusing DSAGrind.Common.Extensions;\nusing Serilog;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/mcp-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() { Title = \"DSAGrind MCP API\", Version = \"v1\" });\n});\n\n// Add JWT authentication\nvar jwtSettings = builder.Configuration.GetSection(\"Jwt\");\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"Key\"]!)),\n            ValidateIssuer = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidateAudience = true,\n            ValidAudience = jwtSettings[\"Audience\"],\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.Zero\n        };\n    });\n\n// Add CORS\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(\"http://localhost:3000\", \"http://localhost:3000\")\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\n// Add common services\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add MCP services\nbuilder.Services.AddScoped<DSAGrind.MCP.API.Services.IMCPService, DSAGrind.MCP.API.Services.MCPService>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"DSAGrind MCP API v1\");\n    });\n}\n\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.MCP.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    Log.Information(\"Starting DSAGrind MCP API on port 5007\");\n    app.Run(\"http://localhost:5007\");\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"MCP API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2718},"backend/src/Services/DSAGrind.Payments.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing DSAGrind.Models.Settings;\nusing DSAGrind.Payments.API.Services;\nusing Serilog;\nusing Stripe;\nusing System.Reflection;\nusing static System.Net.WebRequestMethods;\n\n// Load environment variables from .env files before creating builder\nDSAGrind.Common.Extensions.EnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.WebHost.ConfigureKestrel(options =>\n{\n    options.ListenAnyIP(5006); // HTTP only\n});\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/payments-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add JWT Authentication\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false;\n    });\n\nbuilder.Services.AddAuthorization();\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// Configure settings\nbuilder.Services.Configure<PaymentSettings>(builder.Configuration.GetSection(PaymentSettings.SectionName));\n\n// Configure Stripe conditionally\nvar paymentSettings = builder.Configuration.GetSection(PaymentSettings.SectionName).Get<PaymentSettings>();\nif (paymentSettings?.EnableStripeIntegration == true)\n{\n    var stripeSecretKey = builder.Configuration[\"Stripe:SecretKey\"];\n    if (!string.IsNullOrEmpty(stripeSecretKey))\n    {\n        StripeConfiguration.ApiKey = stripeSecretKey;\n    }\n}\n\nbuilder.Services.AddScoped<IPaymentService, PaymentService>();\nbuilder.Services.AddScoped<DSAGrind.Payments.API.Services.ISubscriptionService, DSAGrind.Payments.API.Services.SubscriptionService>();\n\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Payments.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Payments:Port\") ?? \"5006\";\n    var host = builder.Configuration.GetValue<string>(\"Payments:Host\") ?? \"localhost\";\n    //var useHttps = builder.Configuration.GetValue<bool>(\"Payments:UseHttps\", true);\n    //var protocol = useHttps ? \"https\" : \"http\";\n    //var url = $\"{protocol}://{host}:{port}\";\n    var url = $\"http://{host}:{port}\";\n    Log.Information($\"Starting DSAGrind Payments API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Payments API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":3718},"backend/src/Services/DSAGrind.Problems.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing DSAGrind.Problems.API.Repositories;\nusing DSAGrind.Problems.API.Services;\nusing FluentValidation;\nusing FluentValidation.AspNetCore;\nusing Serilog;\nusing System.Reflection;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add Serilog\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/problems-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add Common Services\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add JWT Authentication\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false;\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add Auto Mapper\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\n\n// Add FluentValidation\nbuilder.Services.AddFluentValidationAutoValidation();\nbuilder.Services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());\n\n// Add MediatR\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// Add Repositories\nbuilder.Services.AddScoped<IProblemRepository, ProblemRepository>();\nbuilder.Services.AddScoped<ICategoryRepository, CategoryRepository>();\n\n// Add Services\nbuilder.Services.AddScoped<IProblemService, ProblemService>();\nbuilder.Services.AddScoped<ICategoryService, CategoryService>();\n\n// Add CORS\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\n// Health check\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Problems.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Problems:Port\") ?? \"5001\";\n    var host = builder.Configuration.GetValue<string>(\"Problems:Host\") ?? \"localhost\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind Problems API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Problems API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":3356},"backend/src/Services/DSAGrind.Search.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing DSAGrind.Search.API.Services;\nusing Serilog;\nusing System.Reflection;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add Serilog\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/search-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add Common Services\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add JWT Authentication\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false;\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add Auto Mapper\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\n\n// Add MediatR\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// Add Services\nbuilder.Services.AddScoped<ISearchService, SearchService>();\nbuilder.Services.AddScoped<IVectorSearchService, VectorSearchService>();\n\n// Add CORS\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\n// Health check\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Search.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Search:Port\") ?? \"5004\";\n    var host = builder.Configuration.GetValue<string>(\"Search:Host\") ?? \"0.0.0.0\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind Search API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Search API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2928},"backend/src/Services/DSAGrind.Submissions.API/Program.cs":{"content":"using DSAGrind.Common.Extensions;\nusing DSAGrind.Submissions.API.Services;\nusing Serilog;\nusing System.Reflection;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add Serilog\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/submissions-service-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Add Common Services\nbuilder.Services.AddCommonServices(builder.Configuration);\n\n// Add JWT Authentication\nbuilder.Services.AddAuthentication(\"Bearer\")\n    .AddJwtBearer(\"Bearer\", options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\").Get<DSAGrind.Common.Configuration.JwtSettings>();\n        options.Authority = builder.Configuration.GetValue<string>(\"Auth:Authority\") ?? \"http://localhost:8080\";\n        options.Audience = jwtSettings?.Audience ?? \"DSAGrind-Users\";\n        options.RequireHttpsMetadata = false;\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add Auto Mapper\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\n\n// Add MediatR\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// Add Services\nbuilder.Services.AddScoped<ISubmissionService, SubmissionService>();\nbuilder.Services.AddScoped<ICodeExecutionService, CodeExecutionService>();\n\n// Add CORS\n// Get allowed origins from environment\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>() ?? new[] { \"http://localhost:5000\" };\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy.WithOrigins(allowedOrigins)\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              .AllowCredentials();\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseCors(\"AllowFrontend\");\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\n// Health check\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Submissions.API\", timestamp = DateTime.UtcNow });\n\ntry\n{\n    var port = builder.Configuration.GetValue<string>(\"Submissions:Port\") ?? \"5002\";\n    var host = builder.Configuration.GetValue<string>(\"Submissions:Host\") ?? \"0.0.0.0\";\n    var url = $\"http://{host}:{port}\";\n    \n    Log.Information($\"Starting DSAGrind Submissions API on {url}\");\n    app.Run(url);\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Submissions API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":2973},"backend/src/Services/DSAGrind.Unified.API/Program.cs":{"content":"using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\nusing DSAGrind.Common.Extensions;\nusing Serilog;\n\n// Load environment variables from .env files before creating builder\nEnvironmentExtensions.LoadEnvFile();\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLog.Logger = new LoggerConfiguration()\n    .ReadFrom.Configuration(builder.Configuration)\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/unified-api-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() { \n        Title = \"DSAGrind Unified API\", \n        Version = \"v1\",\n        Description = \"All DSAGrind microservices in one unified API for development/demo purposes\" \n    });\n    \n    // Add JWT authentication to Swagger\n    c.AddSecurityDefinition(\"Bearer\", new()\n    {\n        Description = \"JWT Authorization header using the Bearer scheme. Example: \\\"Authorization: Bearer {token}\\\"\",\n        Name = \"Authorization\",\n        In = Microsoft.OpenApi.Models.ParameterLocation.Header,\n        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,\n        Scheme = \"Bearer\"\n    });\n    \n    c.AddSecurityRequirement(new()\n    {\n        {\n            new()\n            {\n                Reference = new() { Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme, Id = \"Bearer\" }\n            },\n            new string[] {}\n        }\n    });\n});\n\n// Add JWT Authentication (simplified)\nvar jwtKey = \"your-super-secret-jwt-key-for-demo-purposes-2024-dsagrind\";\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = false, // Simplified for demo\n            ValidateIssuer = false,\n            ValidateAudience = false,\n            ValidateLifetime = false,\n            ClockSkew = TimeSpan.Zero\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n\n// Add CORS\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowAll\", policy =>\n    {\n        policy.AllowAnyOrigin()\n              .AllowAnyMethod()\n              .AllowAnyHeader();\n    });\n});\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"DSAGrind Unified API v1\");\n        c.RoutePrefix = \"swagger\"; // Set Swagger UI at /swagger\n    });\n}\n\napp.UseCors(\"AllowAll\");\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.MapGet(\"/health\", () => new { status = \"healthy\", service = \"DSAGrind.Unified.API\", timestamp = DateTime.UtcNow });\napp.MapGet(\"/\", () => \"DSAGrind Unified API - All microservices combined for development/demo\");\n\ntry\n{\n    Log.Information(\"Starting DSAGrind Unified API on port 5010\");\n    app.Run(\"http://localhost:5010\");\n}\ncatch (Exception ex)\n{\n    Log.Fatal(ex, \"Unified API terminated unexpectedly\");\n}\nfinally\n{\n    Log.CloseAndFlush();\n}","size_bytes":3287},"backend/src/Shared/DSAGrind.Common/Class1.cs":{"content":"﻿namespace DSAGrind.Common;\r\n\r\npublic class Class1\r\n{\r\n\r\n}\r\n","size_bytes":62},"backend/src/Shared/DSAGrind.Events/AuthEvents.cs":{"content":"namespace DSAGrind.Events;\n\npublic class UserRegisteredEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string Role { get; set; } = string.Empty;\n    public DateTime RegisteredAt { get; set; } = DateTime.UtcNow;\n    public string? ReferralCode { get; set; }\n}\n\npublic class UserEmailVerifiedEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public DateTime VerifiedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class UserLoginEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string IpAddress { get; set; } = string.Empty;\n    public string UserAgent { get; set; } = string.Empty;\n    public DateTime LoginAt { get; set; } = DateTime.UtcNow;\n    public string LoginMethod { get; set; } = string.Empty; // password, oauth\n}\n\npublic class UserLogoutEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string RefreshToken { get; set; } = string.Empty;\n    public DateTime LogoutAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class PasswordResetRequestedEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string ResetToken { get; set; } = string.Empty;\n    public DateTime RequestedAt { get; set; } = DateTime.UtcNow;\n    public string IpAddress { get; set; } = string.Empty;\n}\n\npublic class PasswordResetCompletedEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public DateTime ResetAt { get; set; } = DateTime.UtcNow;\n    public string IpAddress { get; set; } = string.Empty;\n}\n\npublic class RefreshTokenRevokedEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string RefreshToken { get; set; } = string.Empty;\n    public string? ReplacedByToken { get; set; }\n    public DateTime RevokedAt { get; set; } = DateTime.UtcNow;\n    public string RevokedByIp { get; set; } = string.Empty;\n}","size_bytes":2164},"backend/src/Shared/DSAGrind.Events/Class1.cs":{"content":"﻿namespace DSAGrind.Events;\r\n\r\npublic class Class1\r\n{\r\n\r\n}\r\n","size_bytes":62},"backend/src/Shared/DSAGrind.Events/PaymentEvents.cs":{"content":"namespace DSAGrind.Events;\n\npublic class PaymentInitiatedEvent\n{\n    public string PaymentId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Provider { get; set; } = string.Empty;\n    public string Plan { get; set; } = string.Empty;\n    public DateTime InitiatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class PaymentCompletedEvent\n{\n    public string PaymentId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Provider { get; set; } = string.Empty;\n    public string ProviderPaymentId { get; set; } = string.Empty;\n    public string Plan { get; set; } = string.Empty;\n    public DateTime CompletedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class PaymentFailedEvent\n{\n    public string PaymentId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Provider { get; set; } = string.Empty;\n    public string FailureReason { get; set; } = string.Empty;\n    public DateTime FailedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class SubscriptionCreatedEvent\n{\n    public string SubscriptionId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string Plan { get; set; } = string.Empty;\n    public string Provider { get; set; } = string.Empty;\n    public string ProviderSubscriptionId { get; set; } = string.Empty;\n    public DateTime StartDate { get; set; }\n    public DateTime? EndDate { get; set; }\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class SubscriptionUpdatedEvent\n{\n    public string SubscriptionId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string OldStatus { get; set; } = string.Empty;\n    public string NewStatus { get; set; } = string.Empty;\n    public string? OldPlan { get; set; }\n    public string? NewPlan { get; set; }\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class SubscriptionCancelledEvent\n{\n    public string SubscriptionId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string Plan { get; set; } = string.Empty;\n    public string CancellationReason { get; set; } = string.Empty;\n    public DateTime CancelledAt { get; set; } = DateTime.UtcNow;\n    public DateTime? EffectiveEndDate { get; set; }\n}\n\npublic class RefundProcessedEvent\n{\n    public string PaymentId { get; set; } = string.Empty;\n    public string RefundId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public decimal RefundAmount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Reason { get; set; } = string.Empty;\n    public DateTime ProcessedAt { get; set; } = DateTime.UtcNow;\n}","size_bytes":3116},"backend/src/Shared/DSAGrind.Events/ProblemEvents.cs":{"content":"namespace DSAGrind.Events;\n\npublic class ProblemCreatedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string CategoryId { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string Difficulty { get; set; } = string.Empty;\n    public List<string> Tags { get; set; } = new();\n    public bool IsPaid { get; set; }\n    public string CreatedBy { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemUpdatedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string? UpdatedBy { get; set; }\n    public Dictionary<string, object> Changes { get; set; } = new();\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemApprovedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string ApprovedBy { get; set; } = string.Empty;\n    public DateTime ApprovedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemDeletedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string DeletedBy { get; set; } = string.Empty;\n    public DateTime DeletedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemViewedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string? UserId { get; set; }\n    public string IpAddress { get; set; } = string.Empty;\n    public DateTime ViewedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemLikedEvent\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public bool IsLike { get; set; } // true for like, false for dislike\n    public DateTime LikedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class BulkProblemsImportedEvent\n{\n    public string CategoryId { get; set; } = string.Empty;\n    public List<string> ProblemIds { get; set; } = new();\n    public int TotalImported { get; set; }\n    public int TotalFailed { get; set; }\n    public string ImportedBy { get; set; } = string.Empty;\n    public DateTime ImportedAt { get; set; } = DateTime.UtcNow;\n}","size_bytes":2280},"backend/src/Shared/DSAGrind.Events/SubmissionEvents.cs":{"content":"namespace DSAGrind.Events;\n\npublic class SubmissionCreatedEvent\n{\n    public string SubmissionId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class SubmissionExecutedEvent\n{\n    public string SubmissionId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public int? Runtime { get; set; }\n    public int? Memory { get; set; }\n    public int TestCasesPassed { get; set; }\n    public int TotalTestCases { get; set; }\n    public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemSolvedEvent\n{\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string SubmissionId { get; set; } = string.Empty;\n    public string Difficulty { get; set; } = string.Empty;\n    public int AttemptsCount { get; set; }\n    public DateTime SolvedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class CodeExecutionRequestedEvent\n{\n    public string RequestId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public bool IsSubmission { get; set; } // true for submission, false for test run\n    public DateTime RequestedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class CodeExecutionCompletedEvent\n{\n    public string RequestId { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public Dictionary<string, object> Results { get; set; } = new();\n    public DateTime CompletedAt { get; set; } = DateTime.UtcNow;\n}","size_bytes":2063},"backend/src/Shared/DSAGrind.Models/Class1.cs":{"content":"﻿namespace DSAGrind.Models;\r\n\r\npublic class Class1\r\n{\r\n\r\n}\r\n","size_bytes":62},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport function AdminDashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-slate-200 dark:bg-slate-700\">\n                    <div className=\"w-6 h-6 bg-slate-300 dark:bg-slate-600 rounded\"></div>\n                  </div>\n                  <div className=\"ml-4 flex-1\">\n                    <div className=\"h-8 bg-slate-200 dark:bg-slate-700 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'Total Users',\n      value: (stats as any)?.totalUsers?.toLocaleString() || '0',\n      icon: 'fas fa-users',\n      color: 'bg-blue-100 dark:bg-blue-900/20 text-blue-600',\n    },\n    {\n      title: 'Problems',\n      value: (stats as any)?.totalProblems?.toLocaleString() || '0',\n      icon: 'fas fa-code',\n      color: 'bg-success-100 dark:bg-success-900/20 text-success-600',\n    },\n    {\n      title: 'Premium Users',\n      value: (stats as any)?.premiumUsers?.toLocaleString() || '0',\n      icon: 'fas fa-crown',\n      color: 'bg-purple-100 dark:bg-purple-900/20 text-purple-600',\n    },\n    {\n      title: 'Revenue',\n      value: `$${(stats as any)?.revenue?.toLocaleString() || '0'}`,\n      icon: 'fas fa-dollar-sign',\n      color: 'bg-warning-100 dark:bg-warning-900/20 text-warning-600',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {statCards.map((stat) => (\n          <Card key={stat.title}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className={`p-3 rounded-full ${stat.color}`}>\n                  <i className={`${stat.icon} text-lg`}></i>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                    {stat.value}\n                  </p>\n                  <p className=\"text-slate-600 dark:text-slate-400\">{stat.title}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-chart-line mr-2\"></i>\n            Platform Overview\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-slate-900 dark:text-white mb-3\">\n                  Popular Categories\n                </h4>\n                <div className=\"space-y-2\">\n                  {[\n                    { name: 'Arrays & Hashing', problems: 125, percentage: 85 },\n                    { name: 'Trees', problems: 89, percentage: 70 },\n                    { name: 'Dynamic Programming', problems: 67, percentage: 55 },\n                    { name: 'Graphs', problems: 45, percentage: 40 },\n                  ].map((category) => (\n                    <div key={category.name} className=\"flex items-center justify-between\">\n                      <div>\n                        <span className=\"text-sm font-medium text-slate-900 dark:text-white\">\n                          {category.name}\n                        </span>\n                        <span className=\"text-xs text-slate-500 ml-2\">\n                          {category.problems} problems\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-20 bg-slate-200 dark:bg-slate-700 rounded-full h-2\">\n                          <div\n                            className=\"bg-brand-600 h-2 rounded-full\"\n                            style={{ width: `${category.percentage}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-xs text-slate-500 w-8\">\n                          {category.percentage}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-slate-900 dark:text-white mb-3\">\n                  System Health\n                </h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-success-50 dark:bg-success-900/20 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-check-circle text-success-600 mr-2\"></i>\n                      <span className=\"text-sm font-medium\">API Status</span>\n                    </div>\n                    <span className=\"text-sm text-success-600\">Operational</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-success-50 dark:bg-success-900/20 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-database text-success-600 mr-2\"></i>\n                      <span className=\"text-sm font-medium\">Database</span>\n                    </div>\n                    <span className=\"text-sm text-success-600\">Healthy</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-success-50 dark:bg-success-900/20 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-robot text-success-600 mr-2\"></i>\n                      <span className=\"text-sm font-medium\">AI Services</span>\n                    </div>\n                    <span className=\"text-sm text-success-600\">Online</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6702},"client/src/components/admin/BulkImport.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ImportResult {\n  total: number;\n  imported: number;\n  errors: Array<{\n    row: number;\n    error: string;\n    data: any;\n  }>;\n}\n\nexport function BulkImport() {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      setIsUploading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch('/api/admin/bulk-import', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (result: ImportResult) => {\n      setImportResult(result);\n      toast({\n        title: 'Import Complete',\n        description: `Successfully imported ${result.imported} out of ${result.total} problems.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Import Failed',\n        description: error.message || 'Failed to import problems',\n        variant: 'destructive',\n      });\n    },\n    onSettled: () => {\n      setIsUploading(false);\n    },\n  });\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Validate file type\n      const allowedTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n        'application/vnd.ms-excel', // .xls\n        'text/csv', // .csv\n      ];\n      \n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: 'Invalid File Type',\n          description: 'Please select an Excel (.xlsx, .xls) or CSV file.',\n          variant: 'destructive',\n        });\n        return;\n      }\n      \n      setSelectedFile(file);\n      setImportResult(null);\n    }\n  };\n\n  const handleUpload = () => {\n    if (!selectedFile) {\n      toast({\n        title: 'No File Selected',\n        description: 'Please select a file to upload.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    uploadMutation.mutate(selectedFile);\n  };\n\n  const resetUpload = () => {\n    setSelectedFile(null);\n    setImportResult(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const downloadTemplate = () => {\n    // Create a sample CSV template\n    const headers = [\n      'title',\n      'description',\n      'difficulty',\n      'categorySlug',\n      'tags',\n      'isPremium',\n      'constraints',\n      'examples',\n      'testCases',\n      'solution',\n      'hints'\n    ];\n    \n    const sampleRow = [\n      'Two Sum',\n      'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.',\n      'Easy',\n      'arrays-hashing',\n      'Array,Hash Table',\n      'false',\n      '2 ≤ nums.length ≤ 10⁴',\n      '[{\"input\":\"nums = [2,7,11,15], target = 9\",\"output\":\"[0,1]\",\"explanation\":\"Because nums[0] + nums[1] == 9, we return [0, 1].\"}]',\n      '[{\"input\":{\"nums\":[2,7,11,15],\"target\":9},\"output\":[0,1]}]',\n      'def twoSum(self, nums, target):\\n    hashmap = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if complement in hashmap:\\n            return [hashmap[complement], i]\\n        hashmap[num] = i',\n      '[\"Think about using a hash map\",\"Store numbers you\\'ve seen with their indices\"]'\n    ];\n    \n    const csvContent = [headers, sampleRow]\n      .map(row => row.map(field => `\"${field}\"`).join(','))\n      .join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'problems-template.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white\">\n            Bulk Import Problems\n          </h3>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Upload Excel or CSV files to import multiple problems at once\n          </p>\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          onClick={downloadTemplate}\n          data-testid=\"button-download-template\"\n        >\n          <i className=\"fas fa-download mr-2\"></i>\n          Download Template\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"upload\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"upload\">Upload File</TabsTrigger>\n          <TabsTrigger value=\"format\">Format Guide</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"upload\" className=\"space-y-6\">\n          {/* Upload Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <i className=\"fas fa-upload mr-2\"></i>\n                File Upload\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* File Selection */}\n              <div>\n                <Label htmlFor=\"file\">Select File</Label>\n                <div className=\"mt-2\">\n                  <Input\n                    ref={fileInputRef}\n                    id=\"file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls,.csv\"\n                    onChange={handleFileSelect}\n                    disabled={isUploading}\n                    data-testid=\"input-bulk-import-file\"\n                  />\n                  <p className=\"text-sm text-slate-500 mt-2\">\n                    Supported formats: Excel (.xlsx, .xls) and CSV files\n                  </p>\n                </div>\n              </div>\n\n              {/* Selected File Info */}\n              {selectedFile && (\n                <Alert>\n                  <i className=\"fas fa-file\"></i>\n                  <AlertDescription>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <strong>{selectedFile.name}</strong>\n                        <span className=\"ml-2 text-slate-500\">\n                          ({(selectedFile.size / 1024).toFixed(1)} KB)\n                        </span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={resetUpload}\n                        disabled={isUploading}\n                        data-testid=\"button-reset-upload\"\n                      >\n                        <i className=\"fas fa-times\"></i>\n                      </Button>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {/* Upload Progress */}\n              {isUploading && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Importing problems...</span>\n                    <span className=\"text-sm text-slate-500\">Processing with AI</span>\n                  </div>\n                  <Progress value={75} className=\"w-full\" />\n                  <p className=\"text-xs text-slate-500\">\n                    Using AI to fill in missing data and generate test cases...\n                  </p>\n                </div>\n              )}\n\n              {/* Upload Button */}\n              <Button\n                onClick={handleUpload}\n                disabled={!selectedFile || isUploading}\n                className=\"w-full bg-brand-600 hover:bg-brand-700\"\n                data-testid=\"button-start-import\"\n              >\n                {isUploading ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Importing...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-upload mr-2\"></i>\n                    Start Import\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Import Results */}\n          {importResult && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-chart-bar mr-2\"></i>\n                  Import Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-800 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                      {importResult.total}\n                    </div>\n                    <div className=\"text-sm text-slate-600 dark:text-slate-400\">Total Rows</div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-success-50 dark:bg-success-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-success-700 dark:text-success-400\">\n                      {importResult.imported}\n                    </div>\n                    <div className=\"text-sm text-success-600 dark:text-success-400\">Successfully Imported</div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 bg-error-50 dark:bg-error-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-error-700 dark:text-error-400\">\n                      {importResult.errors.length}\n                    </div>\n                    <div className=\"text-sm text-error-600 dark:text-error-400\">Errors</div>\n                  </div>\n                </div>\n\n                {/* Error Details */}\n                {importResult.errors.length > 0 && (\n                  <div>\n                    <h4 className=\"font-semibold text-slate-900 dark:text-white mb-3\">\n                      Import Errors\n                    </h4>\n                    <ScrollArea className=\"h-64 border border-slate-200 dark:border-slate-700 rounded-lg\">\n                      <div className=\"p-4 space-y-3\">\n                        {importResult.errors.map((error, index) => (\n                          <div key={index} className=\"border-l-4 border-error-500 pl-4 py-2\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <Badge variant=\"destructive\">Row {error.row}</Badge>\n                            </div>\n                            <p className=\"text-sm text-error-700 dark:text-error-400 mb-2\">\n                              {error.error}\n                            </p>\n                            <details className=\"text-xs\">\n                              <summary className=\"cursor-pointer text-slate-500 hover:text-slate-700\">\n                                View row data\n                              </summary>\n                              <pre className=\"mt-2 p-2 bg-slate-100 dark:bg-slate-800 rounded text-xs overflow-x-auto\">\n                                {JSON.stringify(error.data, null, 2)}\n                              </pre>\n                            </details>\n                          </div>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"format\" className=\"space-y-6\">\n          {/* Format Guide */}\n          <Card>\n            <CardHeader>\n              <CardTitle>File Format Requirements</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert>\n                <i className=\"fas fa-info-circle\"></i>\n                <AlertDescription>\n                  Your file must include these required columns. Missing data will be filled automatically using AI.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold text-slate-900 dark:text-white\">Required Columns:</h4>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">title</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Problem title (required)</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">Two Sum</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">description</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Problem description (AI fillable)</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">Given an array...</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">difficulty</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Easy, Medium, or Hard (AI fillable)</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">Easy</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">categorySlug</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Category identifier</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">arrays-hashing</code>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">tags</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Comma-separated tags</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">Array,Hash Table</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">isPremium</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">true or false</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">false</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">testCases</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">JSON array (AI generated if empty)</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">[{`\"input\": \"...\", \"output\": \"...\"`}]</code>\n                    </div>\n                    \n                    <div className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-3\">\n                      <h5 className=\"font-medium text-slate-900 dark:text-white\">solution</h5>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">Optional solution code</p>\n                      <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded\">def twoSum...</code>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Alert className=\"bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800\">\n                <i className=\"fas fa-robot text-blue-600\"></i>\n                <AlertDescription>\n                  <strong>AI-Powered Import:</strong> Missing descriptions, difficulties, tags, and test cases \n                  will be automatically generated using Perplexity AI. This ensures high-quality, complete problem data.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":18092},"client/src/components/admin/CategoryConfig.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Category } from '@/types/api';\n\nexport function CategoryConfig() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [isAddingCategory, setIsAddingCategory] = useState(false);\n  const [newCategory, setNewCategory] = useState({\n    name: '',\n    slug: '',\n    description: '',\n    freeProblemLimit: 10,\n  });\n\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Category> }) => {\n      const response = await apiRequest('PUT', `/api/categories/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Category updated successfully!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setEditingCategory(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update category',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: any) => {\n      const response = await apiRequest('POST', '/api/categories', categoryData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Category created successfully!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setIsAddingCategory(false);\n      setNewCategory({\n        name: '',\n        slug: '',\n        description: '',\n        freeProblemLimit: 10,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create category',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleFreeLimitChange = (categoryId: string, newLimit: number) => {\n    updateCategoryMutation.mutate({\n      id: categoryId,\n      updates: { freeProblemLimit: newLimit },\n    });\n  };\n\n  const generateSlug = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/^-|-$/g, '');\n  };\n\n  const handleNameChange = (value: string) => {\n    setNewCategory(prev => ({\n      ...prev,\n      name: value,\n      slug: generateSlug(value),\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newCategory.name || !newCategory.slug) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createCategoryMutation.mutate(newCategory);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(6)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"h-5 bg-slate-200 dark:bg-slate-700 rounded w-1/3 mb-2\"></div>\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/2\"></div>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-20 h-8 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                  <div className=\"w-8 h-8 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white\">\n            Category Configuration\n          </h3>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Configure how many problems in each category are free vs premium\n          </p>\n        </div>\n        \n        <Dialog open={isAddingCategory} onOpenChange={setIsAddingCategory}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-brand-600 hover:bg-brand-700\" data-testid=\"button-add-category\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Add Category\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Category</DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\" className=\"required\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={newCategory.name}\n                  onChange={(e) => handleNameChange(e.target.value)}\n                  placeholder=\"Arrays & Hashing\"\n                  required\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"slug\">Slug</Label>\n                <Input\n                  id=\"slug\"\n                  value={newCategory.slug}\n                  onChange={(e) => setNewCategory(prev => ({ ...prev, slug: e.target.value }))}\n                  placeholder=\"arrays-hashing\"\n                  data-testid=\"input-category-slug\"\n                />\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  Auto-generated from name. Used in URLs.\n                </p>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Input\n                  id=\"description\"\n                  value={newCategory.description}\n                  onChange={(e) => setNewCategory(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Array manipulation and hash table problems\"\n                  data-testid=\"input-category-description\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"freeProblemLimit\">Free Problems Limit</Label>\n                <Input\n                  id=\"freeProblemLimit\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={newCategory.freeProblemLimit}\n                  onChange={(e) => setNewCategory(prev => ({ ...prev, freeProblemLimit: parseInt(e.target.value) || 0 }))}\n                  data-testid=\"input-category-free-limit\"\n                />\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  Number of problems that can be accessed for free in this category\n                </p>\n              </div>\n              \n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAddingCategory(false)}\n                  data-testid=\"button-cancel-category\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createCategoryMutation.isPending}\n                  className=\"bg-brand-600 hover:bg-brand-700\"\n                  data-testid=\"button-save-category\"\n                >\n                  {createCategoryMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : null}\n                  Create Category\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Categories List */}\n      <div className=\"space-y-4\">\n        {categories.map((category) => (\n          <Card key={category.id}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h4 className=\"text-lg font-medium text-slate-900 dark:text-white\">\n                      {category.name}\n                    </h4>\n                    <Badge variant=\"outline\">\n                      {category.totalProblems} total problems\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-3\">\n                    {category.description}\n                  </p>\n                  \n                  {/* Progress Bar */}\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between text-xs text-slate-600 dark:text-slate-400 mb-1\">\n                        <span>Free: {category.freeProblemLimit}</span>\n                        <span>Premium: {Math.max(0, category.totalProblems - category.freeProblemLimit)}</span>\n                      </div>\n                      <div className=\"w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2\">\n                        <div\n                          className=\"bg-success-600 h-2 rounded-full transition-all\"\n                          style={{\n                            width: `${category.totalProblems > 0 ? (category.freeProblemLimit / category.totalProblems) * 100 : 0}%`\n                          }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 ml-6\">\n                  {/* Free Limit Input */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor={`limit-${category.id}`} className=\"text-sm whitespace-nowrap\">\n                      Free problems:\n                    </Label>\n                    <Input\n                      id={`limit-${category.id}`}\n                      type=\"number\"\n                      min=\"0\"\n                      max={category.totalProblems}\n                      value={editingCategory?.id === category.id ? editingCategory.freeProblemLimit : category.freeProblemLimit}\n                      onChange={(e) => {\n                        const newLimit = parseInt(e.target.value) || 0;\n                        if (editingCategory?.id === category.id) {\n                          setEditingCategory({ ...editingCategory, freeProblemLimit: newLimit });\n                        } else {\n                          setEditingCategory({ ...category, freeProblemLimit: newLimit });\n                        }\n                      }}\n                      onBlur={() => {\n                        if (editingCategory?.id === category.id && editingCategory.freeProblemLimit !== category.freeProblemLimit) {\n                          handleFreeLimitChange(category.id, editingCategory.freeProblemLimit);\n                        }\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' && editingCategory?.id === category.id) {\n                          handleFreeLimitChange(category.id, editingCategory.freeProblemLimit);\n                        }\n                      }}\n                      className=\"w-20\"\n                      data-testid={`input-free-limit-${category.slug}`}\n                    />\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      if (editingCategory?.id === category.id) {\n                        handleFreeLimitChange(category.id, editingCategory.freeProblemLimit);\n                      }\n                    }}\n                    disabled={updateCategoryMutation.isPending}\n                    data-testid={`button-save-${category.slug}`}\n                  >\n                    {updateCategoryMutation.isPending ? (\n                      <i className=\"fas fa-spinner fa-spin\"></i>\n                    ) : (\n                      <i className=\"fas fa-save\"></i>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {categories.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <i className=\"fas fa-folder text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n            <h4 className=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">\n              No categories yet\n            </h4>\n            <p className=\"text-slate-600 dark:text-slate-400\">\n              Create your first category to organize problems.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":13507},"client/src/components/admin/ProblemManager.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Category } from '@shared/schema';\n\nexport function ProblemManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddingProblem, setIsAddingProblem] = useState(false);\n  const [isGeneratingTests, setIsGeneratingTests] = useState(false);\n  const [newProblem, setNewProblem] = useState({\n    title: '',\n    description: '',\n    categoryId: '',\n    difficulty: 'Easy' as 'Easy' | 'Medium' | 'Hard',\n    tags: [] as string[],\n    isPremium: false,\n    hints: [] as string[],\n    examples: [] as any[],\n    constraints: '',\n    testCases: [] as any[],\n    solution: '',\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: problems = [], isLoading } = useQuery({\n    queryKey: ['/api/problems'],\n  });\n\n  const createProblemMutation = useMutation({\n    mutationFn: async (problemData: any) => {\n      const response = await apiRequest('POST', '/api/problems', problemData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Problem created successfully!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/problems'] });\n      setIsAddingProblem(false);\n      setNewProblem({\n        title: '',\n        description: '',\n        categoryId: '',\n        difficulty: 'Easy',\n        tags: [],\n        isPremium: false,\n        hints: [],\n        examples: [],\n        constraints: '',\n        testCases: [],\n        solution: '',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create problem',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const generateTestCasesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/ai/generate-testcases', {\n        title: newProblem.title,\n        description: newProblem.description,\n        constraints: newProblem.constraints,\n        examples: newProblem.examples,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setNewProblem(prev => ({\n        ...prev,\n        testCases: data.testCases || [],\n      }));\n      toast({\n        title: 'Success',\n        description: `Generated ${data.testCases?.length || 0} test cases using AI!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to generate test cases',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newProblem.title || !newProblem.description || !newProblem.categoryId) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createProblemMutation.mutate(newProblem);\n  };\n\n  const handleGenerateTestCases = () => {\n    if (!newProblem.title || !newProblem.description) {\n      toast({\n        title: 'Error',\n        description: 'Please provide title and description first',\n        variant: 'destructive',\n      });\n      return;\n    }\n    generateTestCasesMutation.mutate();\n  };\n\n  const handleTagsChange = (value: string) => {\n    const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag);\n    setNewProblem(prev => ({ ...prev, tags }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white\">\n          Problem Management\n        </h3>\n        <Dialog open={isAddingProblem} onOpenChange={setIsAddingProblem}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-brand-600 hover:bg-brand-700\" data-testid=\"button-add-problem\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Add Problem\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add New Problem</DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"required\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={newProblem.title}\n                    onChange={(e) => setNewProblem(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Two Sum\"\n                    required\n                    data-testid=\"input-problem-title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select \n                    value={newProblem.categoryId} \n                    onValueChange={(value) => setNewProblem(prev => ({ ...prev, categoryId: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-problem-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"difficulty\">Difficulty</Label>\n                  <Select \n                    value={newProblem.difficulty} \n                    onValueChange={(value: 'Easy' | 'Medium' | 'Hard') => setNewProblem(prev => ({ ...prev, difficulty: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-problem-difficulty\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Easy\">Easy</SelectItem>\n                      <SelectItem value=\"Medium\">Medium</SelectItem>\n                      <SelectItem value=\"Hard\">Hard</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                  <Input\n                    id=\"tags\"\n                    value={newProblem.tags.join(', ')}\n                    onChange={(e) => handleTagsChange(e.target.value)}\n                    placeholder=\"Array, Hash Table, Two Pointers\"\n                    data-testid=\"input-problem-tags\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-2 pt-6\">\n                  <Switch\n                    id=\"premium\"\n                    checked={newProblem.isPremium}\n                    onCheckedChange={(checked) => setNewProblem(prev => ({ ...prev, isPremium: checked }))}\n                    data-testid=\"switch-problem-premium\"\n                  />\n                  <Label htmlFor=\"premium\">Premium Only</Label>\n                </div>\n              </div>\n\n              {/* Description */}\n              <div>\n                <Label htmlFor=\"description\" className=\"required\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newProblem.description}\n                  onChange={(e) => setNewProblem(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Describe the problem in detail...\"\n                  rows={6}\n                  required\n                  data-testid=\"textarea-problem-description\"\n                />\n              </div>\n\n              {/* Constraints */}\n              <div>\n                <Label htmlFor=\"constraints\">Constraints</Label>\n                <Textarea\n                  id=\"constraints\"\n                  value={newProblem.constraints}\n                  onChange={(e) => setNewProblem(prev => ({ ...prev, constraints: e.target.value }))}\n                  placeholder=\"2 ≤ nums.length ≤ 10⁴&#10;-10⁹ ≤ nums[i] ≤ 10⁹\"\n                  rows={3}\n                  data-testid=\"textarea-problem-constraints\"\n                />\n              </div>\n\n              {/* Test Cases */}\n              <div>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <Label>Test Cases</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleGenerateTestCases}\n                    disabled={generateTestCasesMutation.isPending}\n                    data-testid=\"button-generate-testcases\"\n                  >\n                    {generateTestCasesMutation.isPending ? (\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    ) : (\n                      <i className=\"fas fa-robot mr-2\"></i>\n                    )}\n                    AI Generate Tests\n                  </Button>\n                </div>\n                \n                {newProblem.testCases.length > 0 && (\n                  <div className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium\">Generated Test Cases</span>\n                      <Badge variant=\"outline\">{newProblem.testCases.length} cases</Badge>\n                    </div>\n                    <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      Test cases have been generated and will be included with the problem.\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Solution */}\n              <div>\n                <Label htmlFor=\"solution\">Solution (Optional)</Label>\n                <Textarea\n                  id=\"solution\"\n                  value={newProblem.solution}\n                  onChange={(e) => setNewProblem(prev => ({ ...prev, solution: e.target.value }))}\n                  placeholder=\"def twoSum(self, nums, target):&#10;    # Solution code here\"\n                  rows={8}\n                  className=\"font-mono text-sm\"\n                  data-testid=\"textarea-problem-solution\"\n                />\n              </div>\n\n              {/* Submit */}\n              <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsAddingProblem(false)}\n                  data-testid=\"button-cancel-problem\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createProblemMutation.isPending}\n                  className=\"bg-brand-600 hover:bg-brand-700\"\n                  data-testid=\"button-save-problem\"\n                >\n                  {createProblemMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : null}\n                  Save Problem\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Problems List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Existing Problems</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"animate-pulse flex items-center justify-between p-4 border border-slate-200 dark:border-slate-700 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/3 mb-2\"></div>\n                    <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/2\"></div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <div className=\"w-16 h-6 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                    <div className=\"w-8 h-8 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (problems as any[])?.length > 0 ? (\n            <div className=\"space-y-4\">\n              {(problems as any[])?.slice(0, 10).map((problem: any) => (\n                <div key={problem.id} className=\"flex items-center justify-between p-4 border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h4 className=\"font-medium text-slate-900 dark:text-white\">\n                        {problem.title}\n                      </h4>\n                      <Badge className={\n                        problem.difficulty === 'Easy' ? 'difficulty-easy' :\n                        problem.difficulty === 'Medium' ? 'difficulty-medium' : 'difficulty-hard'\n                      }>\n                        {problem.difficulty}\n                      </Badge>\n                      {problem.isPremium && (\n                        <Badge variant=\"outline\">\n                          <i className=\"fas fa-crown mr-1 text-amber-500\"></i>\n                          Premium\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-4 text-sm text-slate-600 dark:text-slate-400\">\n                      <span>{problem.acceptanceRate}% acceptance</span>\n                      <span>{problem.totalSubmissions} submissions</span>\n                      {Array.isArray(problem.tags) && (\n                        <span>{problem.tags.slice(0, 2).join(', ')}</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <i className=\"fas fa-edit mr-2\"></i>\n                      Edit\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"text-error-600 hover:text-error-700\">\n                      <i className=\"fas fa-trash\"></i>\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-code text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n              <h4 className=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">\n                No problems yet\n              </h4>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Create your first problem to get started.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16165},"client/src/components/auth/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Code, Mail, User, Lock, Eye, EyeOff } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z\n  .object({\n    username: z.string().min(3, \"Username must be at least 3 characters\"),\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(6, \"Password must be at least 6 characters\"),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AuthModal({ open, onOpenChange }: AuthModalProps) {\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const loginForm = useForm<z.infer<typeof loginSchema>>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<z.infer<typeof registerSchema>>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onLogin = async (values: z.infer<typeof loginSchema>) => {\n    try {\n      setLoading(true);\n      await login(values.email, values.password);\n      onOpenChange(false);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onRegister = async (values: z.infer<typeof registerSchema>) => {\n    try {\n      setLoading(true);\n      await register({\n        email: values.email,\n        password: values.password,\n        username: values.username,\n      } as any);\n      onOpenChange(false);\n      toast({\n        title: \"Welcome to DSAGrind!\",\n        description: \"Your account has been created successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center mb-4\">\n            <Code className=\"w-6 h-6 text-white\" />\n          </div>\n          <DialogTitle className=\"text-2xl font-bold\">\n            Welcome to DSAGrind\n          </DialogTitle>\n          <DialogDescription>\n            Master Data Structures & Algorithms with AI-powered assistance\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <Form {...loginForm}>\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                <FormField\n                  control={loginForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            className=\"pl-10\"\n                            data-testid=\"login-email\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={loginForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"login-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"login-submit\"\n                >\n                  {loading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n\n          <TabsContent value=\"register\" className=\"space-y-4\">\n            <Form {...registerForm}>\n              <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                <FormField\n                  control={registerForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            placeholder=\"Choose a username\"\n                            className=\"pl-10\"\n                            data-testid=\"register-username\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={registerForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            className=\"pl-10\"\n                            data-testid=\"register-email\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={registerForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a password\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"register-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={registerForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Confirm your password\"\n                            className=\"pl-10\"\n                            data-testid=\"register-confirm-password\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loading}\n                  data-testid=\"register-submit\"\n                >\n                  {loading ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"text-center text-sm text-muted-foreground\">\n          By continuing, you agree to our Terms of Service and Privacy Policy\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12359},"client/src/components/auth/ProtectedRoute.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport { Shield, Lock } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requireAdmin?: boolean;\n}\n\nexport function ProtectedRoute({ children, requireAdmin = false }: ProtectedRouteProps) {\n  const { isAuthenticated, isAdmin, loading } = useAuth();\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-[60vh] flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-[60vh] flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mb-4\">\n              <Lock className=\"w-6 h-6 text-destructive\" />\n            </div>\n            <CardTitle>Authentication Required</CardTitle>\n            <CardDescription>\n              You need to sign in to access this page\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <Button onClick={() => setAuthModalOpen(true)}>\n              Sign In\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (requireAdmin && !isAdmin) {\n    return (\n      <div className=\"min-h-[60vh] flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mb-4\">\n              <Shield className=\"w-6 h-6 text-destructive\" />\n            </div>\n            <CardTitle>Admin Access Required</CardTitle>\n            <CardDescription>\n              You don't have permission to access this page\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {children}\n      <AuthModal \n        open={authModalOpen} \n        onOpenChange={setAuthModalOpen} \n      />\n    </>\n  );\n}","size_bytes":2669},"client/src/components/ide/MonacoEditor.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  onLanguageChange: (language: string) => void;\n  onRun: () => void;\n  onSubmit: () => void;\n  isRunning?: boolean;\n  isSubmitting?: boolean;\n}\n\nconst languages = [\n  { id: 'python', name: 'Python3', extension: 'py' },\n  { id: 'javascript', name: 'JavaScript', extension: 'js' },\n  { id: 'typescript', name: 'TypeScript', extension: 'ts' },\n  { id: 'java', name: 'Java', extension: 'java' },\n  { id: 'cpp', name: 'C++', extension: 'cpp' },\n  { id: 'c', name: 'C', extension: 'c' },\n  { id: 'csharp', name: 'C#', extension: 'cs' },\n  { id: 'php', name: 'PHP', extension: 'php' },\n  { id: 'go', name: 'Go', extension: 'go' },\n  { id: 'rust', name: 'Rust', extension: 'rs' },\n];\n\nconst defaultCode: Record<string, string> = {\n  python: `class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # TODO: Implement your solution\n        hashmap = {}\n        \n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[num] = i`,\n  javascript: `/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // TODO: Implement your solution\n    const hashmap = {};\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (complement in hashmap) {\n            return [hashmap[complement], i];\n        }\n        hashmap[nums[i]] = i;\n    }\n};`,\n  java: `class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // TODO: Implement your solution\n        Map<Integer, Integer> hashmap = new HashMap<>();\n        \n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (hashmap.containsKey(complement)) {\n                return new int[] { hashmap.get(complement), i };\n            }\n            hashmap.put(nums[i], i);\n        }\n        \n        return new int[0];\n    }\n}`,\n  cpp: `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // TODO: Implement your solution\n        unordered_map<int, int> hashmap;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (hashmap.find(complement) != hashmap.end()) {\n                return {hashmap[complement], i};\n            }\n            hashmap[nums[i]] = i;\n        }\n        \n        return {};\n    }\n};`,\n  php: `<?php\nclass Solution {\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        // TODO: Implement your solution\n        $hashmap = array();\n        \n        for ($i = 0; $i < count($nums); $i++) {\n            $complement = $target - $nums[$i];\n            if (array_key_exists($complement, $hashmap)) {\n                return array($hashmap[$complement], $i);\n            }\n            $hashmap[$nums[$i]] = $i;\n        }\n        \n        return array();\n    }\n}\n?>`,\n  c: `#include <stdio.h>\n#include <stdlib.h>\n\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    // TODO: Implement your solution\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n    \n    for (int i = 0; i < numsSize - 1; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    \n    *returnSize = 0;\n    return result;\n}`,\n  csharp: `public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        // TODO: Implement your solution\n        Dictionary<int, int> hashmap = new Dictionary<int, int>();\n        \n        for (int i = 0; i < nums.Length; i++) {\n            int complement = target - nums[i];\n            if (hashmap.ContainsKey(complement)) {\n                return new int[] { hashmap[complement], i };\n            }\n            hashmap[nums[i]] = i;\n        }\n        \n        return new int[0];\n    }\n}`,\n  go: `func twoSum(nums []int, target int) []int {\n    // TODO: Implement your solution\n    hashmap := make(map[int]int)\n    \n    for i, num := range nums {\n        complement := target - num\n        if index, exists := hashmap[complement]; exists {\n            return []int{index, i}\n        }\n        hashmap[num] = i\n    }\n    \n    return []int{}\n}`,\n  rust: `impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        // TODO: Implement your solution\n        use std::collections::HashMap;\n        let mut hashmap = HashMap::new();\n        \n        for (i, &num) in nums.iter().enumerate() {\n            let complement = target - num;\n            if let Some(&index) = hashmap.get(&complement) {\n                return vec![index as i32, i as i32];\n            }\n            hashmap.insert(num, i);\n        }\n        \n        vec![]\n    }\n}`,\n  typescript: `function twoSum(nums: number[], target: number): number[] {\n    // TODO: Implement your solution\n    const hashmap: {[key: number]: number} = {};\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (complement in hashmap) {\n            return [hashmap[complement], i];\n        }\n        hashmap[nums[i]] = i;\n    }\n    \n    return [];\n}`\n};\n\nexport function MonacoEditor({\n  value,\n  onChange,\n  language,\n  onLanguageChange,\n  onRun,\n  onSubmit,\n  isRunning = false,\n  isSubmitting = false\n}: MonacoEditorProps) {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const monacoInstance = useRef<any>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && (window as any).require) {\n      (window as any).require(['vs/editor/editor.main'], () => {\n        initializeEditor();\n      });\n    } else {\n      // Load Monaco dynamically\n      const script = document.createElement('script');\n      script.src = 'https://unpkg.com/monaco-editor@0.44.0/min/vs/loader.js';\n      script.onload = () => {\n        (window as any).require.config({\n          paths: { vs: 'https://unpkg.com/monaco-editor@0.44.0/min/vs' }\n        });\n        (window as any).require(['vs/editor/editor.main'], () => {\n          initializeEditor();\n        });\n      };\n      document.head.appendChild(script);\n    }\n\n    return () => {\n      if (monacoInstance.current) {\n        monacoInstance.current.dispose();\n      }\n    };\n  }, []);\n\n  const initializeEditor = () => {\n    if (editorRef.current && !monacoInstance.current) {\n      const monaco = (window as any).monaco;\n      \n      // Configure theme\n      monaco.editor.defineTheme('dsagrind-dark', {\n        base: 'vs-dark',\n        inherit: true,\n        rules: [],\n        colors: {\n          'editor.background': '#1e1e1e',\n          'editor.foreground': '#d4d4d4',\n        }\n      });\n\n      monacoInstance.current = monaco.editor.create(editorRef.current, {\n        value: value || defaultCode[language] || '',\n        language: language === 'cpp' ? 'cpp' : language === 'csharp' ? 'csharp' : language,\n        theme: 'dsagrind-dark',\n        fontSize: 14,\n        fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace',\n        minimap: { enabled: false },\n        scrollBeyondLastLine: false,\n        automaticLayout: true,\n        tabSize: 4,\n        insertSpaces: true,\n        wordWrap: 'on',\n        lineNumbers: 'on',\n        renderLineHighlight: 'line',\n        selectOnLineNumbers: true,\n      });\n\n      monacoInstance.current.onDidChangeModelContent(() => {\n        const newValue = monacoInstance.current.getValue();\n        onChange(newValue);\n        setLastSaved(new Date());\n      });\n\n      // Keyboard shortcuts\n      monacoInstance.current.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, onRun);\n      monacoInstance.current.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.Enter, onSubmit);\n\n      setIsLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    if (monacoInstance.current && value !== monacoInstance.current.getValue()) {\n      monacoInstance.current.setValue(value || defaultCode[language] || '');\n    }\n  }, [value, language]);\n\n  useEffect(() => {\n    if (monacoInstance.current) {\n      const monaco = (window as any).monaco;\n      const model = monacoInstance.current.getModel();\n      const monacoLanguage = language === 'cpp' ? 'cpp' : \n                          language === 'csharp' ? 'csharp' : \n                          language === 'php' ? 'php' : language;\n      monaco.editor.setModelLanguage(model, monacoLanguage);\n    }\n  }, [language]);\n\n  const handleLanguageChange = (newLanguage: string) => {\n    onLanguageChange(newLanguage);\n    if (monacoInstance.current) {\n      monacoInstance.current.setValue(defaultCode[newLanguage] || '');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Editor Header */}\n      <div className=\"bg-slate-50 dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 px-6 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Select value={language} onValueChange={handleLanguageChange}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-language\">\n              <SelectValue placeholder=\"Select language\" />\n            </SelectTrigger>\n            <SelectContent>\n              {languages.map((lang) => (\n                <SelectItem key={lang.id} value={lang.id}>\n                  {lang.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onRun}\n              disabled={isRunning}\n              data-testid=\"button-run-code\"\n            >\n              {isRunning ? (\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n              ) : (\n                <i className=\"fas fa-play mr-2\"></i>\n              )}\n              Run\n            </Button>\n            \n            <Button\n              size=\"sm\"\n              onClick={onSubmit}\n              disabled={isSubmitting}\n              className=\"bg-brand-600 hover:bg-brand-700\"\n              data-testid=\"button-submit-code\"\n            >\n              {isSubmitting ? (\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n              ) : (\n                <i className=\"fas fa-check mr-2\"></i>\n              )}\n              Submit\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 text-sm text-slate-600 dark:text-slate-400\">\n          {lastSaved && (\n            <>\n              <span>Auto-saved {lastSaved.toLocaleTimeString()}</span>\n              <i className=\"fas fa-cloud-upload-alt text-success-500\"></i>\n            </>\n          )}\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Ctrl+Enter to Run • Ctrl+Shift+Enter to Submit\n          </Badge>\n        </div>\n      </div>\n\n      {/* Editor */}\n      <div className=\"flex-1 relative\">\n        <div\n          ref={editorRef}\n          className=\"w-full h-full code-editor\"\n          data-testid=\"monaco-editor\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-slate-900 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-brand-600 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-slate-400\">Loading editor...</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12201},"client/src/components/ide/TestCases.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\ninterface TestCase {\n  id: string;\n  input: any;\n  output: any;\n  expected?: any;\n  passed?: boolean;\n  hidden?: boolean;\n  runtime?: number;\n  memory?: number;\n  explanation?: string;\n}\n\ninterface TestCasesProps {\n  testCases: TestCase[];\n  isRunning?: boolean;\n  onRunTests?: () => void;\n}\n\nexport function TestCases({ testCases, isRunning = false, onRunTests }: TestCasesProps) {\n  const visibleTestCases = testCases.filter(tc => !tc.hidden);\n  const passedTests = testCases.filter(tc => tc.passed === true).length;\n  const totalTests = testCases.length;\n\n  const formatTestCase = (input: any) => {\n    if (typeof input === 'object') {\n      return JSON.stringify(input, null, 2);\n    }\n    return String(input);\n  };\n\n  return (\n    <div className=\"border-t border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900\">\n      <div className=\"px-6 py-3 border-b border-slate-200 dark:border-slate-700 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h4 className=\"font-semibold text-slate-900 dark:text-white\">Test Cases</h4>\n          {totalTests > 0 && (\n            <Badge variant={passedTests === totalTests ? \"default\" : \"secondary\"}>\n              {passedTests}/{totalTests} Passed\n            </Badge>\n          )}\n        </div>\n        \n        {onRunTests && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onRunTests}\n            disabled={isRunning}\n            data-testid=\"button-run-tests\"\n          >\n            {isRunning ? (\n              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            ) : (\n              <i className=\"fas fa-play mr-2\"></i>\n            )}\n            Run Tests\n          </Button>\n        )}\n      </div>\n\n      <div className=\"max-h-80 overflow-hidden\">\n        {visibleTestCases.length === 0 ? (\n          <div className=\"p-6 text-center text-slate-500 dark:text-slate-400\">\n            <i className=\"fas fa-flask text-2xl mb-2\"></i>\n            <p>No test cases available</p>\n          </div>\n        ) : (\n          <Tabs defaultValue=\"0\" className=\"w-full\">\n            <TabsList className=\"grid grid-cols-3 w-full rounded-none\">\n              {visibleTestCases.slice(0, 3).map((testCase, index) => (\n                <TabsTrigger \n                  key={testCase.id} \n                  value={index.toString()}\n                  className=\"flex items-center space-x-2\"\n                  data-testid={`tab-test-case-${index}`}\n                >\n                  <span>Test Case {index + 1}</span>\n                  {testCase.passed !== undefined && (\n                    <i \n                      className={`fas ${\n                        testCase.passed ? 'fa-check-circle text-success-600' : 'fa-times-circle text-error-600'\n                      }`}\n                    />\n                  )}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n\n            {visibleTestCases.slice(0, 3).map((testCase, index) => (\n              <TabsContent key={testCase.id} value={index.toString()}>\n                <ScrollArea className=\"h-64 p-6\">\n                  <div className=\"space-y-4\">\n                    {/* Input */}\n                    <div>\n                      <h5 className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                        Input:\n                      </h5>\n                      <div className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-3 font-mono text-sm\">\n                        <pre className=\"whitespace-pre-wrap\">{formatTestCase(testCase.input)}</pre>\n                      </div>\n                    </div>\n\n                    {/* Expected Output */}\n                    <div>\n                      <h5 className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                        Expected:\n                      </h5>\n                      <div className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-3 font-mono text-sm\">\n                        <pre className=\"whitespace-pre-wrap\">{formatTestCase(testCase.expected || testCase.output)}</pre>\n                      </div>\n                    </div>\n\n                    {/* Actual Output */}\n                    {testCase.output !== undefined && testCase.expected && (\n                      <div>\n                        <h5 className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                          Output:\n                        </h5>\n                        <div className={`rounded-lg p-3 font-mono text-sm ${\n                          testCase.passed \n                            ? 'bg-success-50 dark:bg-success-900/20 border border-success-200 dark:border-success-800' \n                            : 'bg-error-50 dark:bg-error-900/20 border border-error-200 dark:border-error-800'\n                        }`}>\n                          <pre className=\"whitespace-pre-wrap\">{formatTestCase(testCase.output)}</pre>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Runtime & Memory */}\n                    {(testCase.runtime !== undefined || testCase.memory !== undefined) && (\n                      <div className=\"flex items-center space-x-4 text-sm text-slate-600 dark:text-slate-400\">\n                        {testCase.runtime !== undefined && (\n                          <span>\n                            <i className=\"fas fa-clock mr-1\"></i>\n                            Runtime: {testCase.runtime}ms\n                          </span>\n                        )}\n                        {testCase.memory !== undefined && (\n                          <span>\n                            <i className=\"fas fa-memory mr-1\"></i>\n                            Memory: {testCase.memory}MB\n                          </span>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Explanation */}\n                    {testCase.explanation && (\n                      <div>\n                        <h5 className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                          Explanation:\n                        </h5>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          {testCase.explanation}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </TabsContent>\n            ))}\n          </Tabs>\n        )}\n      </div>\n\n      {/* Hidden test cases indicator */}\n      {testCases.filter(tc => tc.hidden).length > 0 && (\n        <div className=\"px-6 py-3 border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800\">\n          <div className=\"flex items-center justify-between text-sm text-slate-600 dark:text-slate-400\">\n            <span>\n              <i className=\"fas fa-lock mr-2\"></i>\n              {testCases.filter(tc => tc.hidden).length} hidden test case(s)\n            </span>\n            <span className=\"text-xs\">Will be revealed after submission</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7397},"client/src/components/layout/Footer.tsx":{"content":"export function Footer() {\n  return (\n    <footer className=\"bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <i className=\"fas fa-code text-2xl text-brand-600 mr-2\"></i>\n              <span className=\"text-xl font-bold text-gray-900 dark:text-white\">DSAGrind</span>\n            </div>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n              Master data structures and algorithms with AI-powered insights and real-time feedback.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider mb-4\">\n              Practice\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"/problems\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Problems\n                </a>\n              </li>\n              <li>\n                <a href=\"/contests\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Contests\n                </a>\n              </li>\n              <li>\n                <a href=\"/interview\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Interview Prep\n                </a>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider mb-4\">\n              Community\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"/discuss\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Discussions\n                </a>\n              </li>\n              <li>\n                <a href=\"/help\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Help Center\n                </a>\n              </li>\n              <li>\n                <a href=\"/feedback\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Feedback\n                </a>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider mb-4\">\n              Company\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"/about\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  About\n                </a>\n              </li>\n              <li>\n                <a href=\"/privacy\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Privacy Policy\n                </a>\n              </li>\n              <li>\n                <a href=\"/terms\" className=\"text-gray-600 dark:text-gray-400 hover:text-brand-600 text-sm\">\n                  Terms of Service\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"mt-8 pt-8 border-t border-gray-200 dark:border-gray-800\">\n          <p className=\"text-center text-gray-500 dark:text-gray-400 text-sm\">\n            © 2024 DSAGrind. All rights reserved. Built with ❤️ for developers.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3618},"client/src/components/layout/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/providers/ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport {\n  Code,\n  User,\n  Settings,\n  LogOut,\n  Sun,\n  Moon,\n  Laptop,\n  Menu,\n  X,\n  Shield,\n  Crown,\n  Brain,\n} from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user, logout, isAuthenticated, isAdmin } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/\", label: \"Home\", icon: Code },\n    { href: \"/problems\", label: \"Problems\", icon: Brain },\n  ];\n\n  if (isAdmin) {\n    navItems.push({ href: \"/admin\", label: \"Admin\", icon: Shield });\n  }\n\n  const handleAuthRequired = () => {\n    if (!isAuthenticated) {\n      setAuthModalOpen(true);\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <>\n      <nav className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <a className=\"flex items-center space-x-2 font-bold text-xl\">\n                  <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                    <Code className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent\">\n                    DSAGrind\n                  </span>\n                </a>\n              </Link>\n            </div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-6\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <a\n                    className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                      location === item.href\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n                    }`}\n                  >\n                    <item.icon className=\"w-4 h-4\" />\n                    <span>{item.label}</span>\n                  </a>\n                </Link>\n              ))}\n            </div>\n\n            {/* Right side actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Theme Toggle */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"theme-toggle\">\n                    <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n                    <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n                    <span className=\"sr-only\">Toggle theme</span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n                    <Sun className=\"mr-2 h-4 w-4\" />\n                    <span>Light</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n                    <Moon className=\"mr-2 h-4 w-4\" />\n                    <span>Dark</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n                    <Laptop className=\"mr-2 h-4 w-4\" />\n                    <span>System</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* User Menu */}\n              {isAuthenticated ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={(user as any)?.avatar} alt={(user as any)?.username} />\n                        <AvatarFallback>\n                          {(user as any)?.username?.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <p className=\"font-medium\">{(user as any)?.username}</p>\n                        <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                          {user?.email}\n                        </p>\n                        <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                          <span>Solved: {user?.totalSolved}</span>\n                          {user?.subscriptionStatus === \"premium\" && (\n                            <Crown className=\"w-3 h-3 text-yellow-500\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\">\n                        <a className=\"flex items-center\">\n                          <User className=\"mr-2 h-4 w-4\" />\n                          <span>Profile</span>\n                        </a>\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.subscriptionStatus === \"free\" && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/subscribe\">\n                          <a className=\"flex items-center\">\n                            <Crown className=\"mr-2 h-4 w-4\" />\n                            <span>Upgrade to Premium</span>\n                          </a>\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/settings\">\n                        <a className=\"flex items-center\">\n                          <Settings className=\"mr-2 h-4 w-4\" />\n                          <span>Settings</span>\n                        </a>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={logout} className=\"text-red-600\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Log out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Button onClick={() => setAuthModalOpen(true)} data-testid=\"login-button\">\n                  Sign In\n                </Button>\n              )}\n\n              {/* Mobile Menu Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"mobile-menu-toggle\"\n              >\n                {mobileMenuOpen ? (\n                  <X className=\"h-5 w-5\" />\n                ) : (\n                  <Menu className=\"h-5 w-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile Navigation */}\n          {mobileMenuOpen && (\n            <div className=\"md:hidden border-t\">\n              <div className=\"space-y-1 px-2 pb-4 pt-2\">\n                {navItems.map((item) => (\n                  <Link key={item.href} href={item.href}>\n                    <a\n                      className={`flex items-center space-x-2 px-3 py-2 rounded-md text-base font-medium ${\n                        location === item.href\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n                      }`}\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      <item.icon className=\"w-5 h-5\" />\n                      <span>{item.label}</span>\n                    </a>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      <AuthModal \n        open={authModalOpen} \n        onOpenChange={setAuthModalOpen}\n      />\n    </>\n  );\n}","size_bytes":9336},"client/src/components/problems/ProblemFilters.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Category } from '@/types/api';\n\ninterface ProblemFiltersProps {\n  categories: Category[];\n  filters: {\n    categoryId?: string;\n    difficulty?: string;\n    isPaid?: boolean;\n    search?: string;\n  };\n  onFiltersChange: (filters: any) => void;\n}\n\nexport function ProblemFilters({ categories, filters, onFiltersChange }: ProblemFiltersProps) {\n  const [searchValue, setSearchValue] = useState(filters.search || '');\n\n  const handleFilterChange = (key: string, value: any) => {\n    const newFilters = { ...filters };\n    \n    if (value === 'all' || value === '' || value === undefined) {\n      delete newFilters[key as keyof typeof newFilters];\n    } else {\n      (newFilters as any)[key] = value;\n    }\n    \n    onFiltersChange(newFilters);\n  };\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchValue(value);\n    \n    // Debounce search\n    const timeoutId = setTimeout(() => {\n      handleFilterChange('search', value || undefined);\n    }, 300);\n    \n    return () => clearTimeout(timeoutId);\n  };\n\n  const clearFilters = () => {\n    setSearchValue('');\n    onFiltersChange({});\n  };\n\n  const activeFiltersCount = Object.keys(filters).length;\n\n  return (\n    <Card className=\"mb-6\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white\">\n            Filter Problems\n          </h3>\n          {activeFiltersCount > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\">{activeFiltersCount} filter(s) active</Badge>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={clearFilters}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear All\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Search */}\n          <div>\n            <Label htmlFor=\"search\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2 block\">\n              Search\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"search\"\n                type=\"text\"\n                placeholder=\"Search problems...\"\n                value={searchValue}\n                onChange={handleSearchChange}\n                className=\"pl-10\"\n                data-testid=\"input-search-problems\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\"></i>\n            </div>\n          </div>\n\n          {/* Category */}\n          <div>\n            <Label htmlFor=\"category\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2 block\">\n              Category\n            </Label>\n            <Select \n              value={filters.categoryId || 'all'} \n              onValueChange={(value) => handleFilterChange('categoryId', value)}\n            >\n              <SelectTrigger data-testid=\"select-category\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Difficulty */}\n          <div>\n            <Label htmlFor=\"difficulty\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2 block\">\n              Difficulty\n            </Label>\n            <Select \n              value={filters.difficulty || 'all'} \n              onValueChange={(value) => handleFilterChange('difficulty', value)}\n            >\n              <SelectTrigger data-testid=\"select-difficulty\">\n                <SelectValue placeholder=\"All Levels\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"Easy\">Easy</SelectItem>\n                <SelectItem value=\"Medium\">Medium</SelectItem>\n                <SelectItem value=\"Hard\">Hard</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Access Level */}\n          <div>\n            <Label htmlFor=\"access\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2 block\">\n              Access\n            </Label>\n            <Select \n              value={\n                filters.isPaid === undefined ? 'all' : \n                filters.isPaid ? 'premium' : 'free'\n              } \n              onValueChange={(value) => {\n                if (value === 'all') {\n                  handleFilterChange('isPaid', undefined);\n                } else {\n                  handleFilterChange('isPaid', value === 'premium');\n                }\n              }}\n            >\n              <SelectTrigger data-testid=\"select-access\">\n                <SelectValue placeholder=\"All Access\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Access</SelectItem>\n                <SelectItem value=\"free\">Free</SelectItem>\n                <SelectItem value=\"premium\">Premium</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Quick Filters */}\n        <div className=\"mt-4 pt-4 border-t border-slate-200 dark:border-slate-700\">\n          <Label className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-3 block\">\n            Quick Filters\n          </Label>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant={filters.difficulty === 'Easy' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleFilterChange('difficulty', filters.difficulty === 'Easy' ? undefined : 'Easy')}\n              className=\"h-8\"\n              data-testid=\"button-filter-easy\"\n            >\n              Easy Problems\n            </Button>\n            <Button\n              variant={filters.isPaid === false ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleFilterChange('isPaid', filters.isPaid === false ? undefined : false)}\n              className=\"h-8\"\n              data-testid=\"button-filter-free\"\n            >\n              Free Only\n            </Button>\n            <Button\n              variant={filters.isPaid === true ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => handleFilterChange('isPaid', filters.isPaid === true ? undefined : true)}\n              className=\"h-8\"\n              data-testid=\"button-filter-premium\"\n            >\n              Premium Only\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7459},"client/src/components/problems/ProblemTable.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Problem } from '@/types/api';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProblemTableProps {\n  problems: Problem[];\n  isLoading?: boolean;\n}\n\nexport function ProblemTable({ problems, isLoading = false }: ProblemTableProps) {\n  const { user } = useAuth();\n  const [hoveredRow, setHoveredRow] = useState<string | null>(null);\n\n  const getDifficultyBadgeClass = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy':\n        return 'difficulty-easy';\n      case 'medium':\n        return 'difficulty-medium';\n      case 'hard':\n        return 'difficulty-hard';\n      default:\n        return '';\n    }\n  };\n\n  const getStatusIcon = (problemId: string) => {\n    // This would normally come from user progress data\n    // For now, we'll show a mock status\n    const statuses = ['solved', 'attempted', 'not-started'];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    \n    switch (status) {\n      case 'solved':\n        return <i className=\"fas fa-check-circle text-success-500 text-lg\" />;\n      case 'attempted':\n        return <i className=\"fas fa-minus-circle text-warning-500 text-lg\" />;\n      default:\n        return <i className=\"fas fa-circle text-slate-300 dark:text-slate-600 text-lg\" />;\n    }\n  };\n\n  const canAccessProblem = (problem: Problem) => {\n    return !problem.isPaid || (user?.subscriptionPlan === 'premium' && user?.subscriptionStatus === 'active');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-slate-200 dark:border-slate-800 overflow-hidden\">\n        <div className=\"animate-pulse\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-6 h-6 bg-slate-200 dark:bg-slate-700 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/3 mb-2\"></div>\n                  <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/4\"></div>\n                </div>\n                <div className=\"w-16 h-6 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (problems.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-slate-200 dark:border-slate-800 p-12 text-center\">\n        <i className=\"fas fa-search text-4xl text-slate-300 dark:text-slate-600 mb-4\"></i>\n        <h3 className=\"text-lg font-semibold text-slate-900 dark:text-white mb-2\">\n          No problems found\n        </h3>\n        <p className=\"text-slate-600 dark:text-slate-400\">\n          Try adjusting your filters or search terms.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-slate-200 dark:border-slate-800 overflow-hidden\">\n      <Table>\n        <TableHeader>\n          <TableRow className=\"bg-slate-50 dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700\">\n            <TableHead className=\"w-16\">Status</TableHead>\n            <TableHead>Title</TableHead>\n            <TableHead className=\"w-24\">Acceptance</TableHead>\n            <TableHead className=\"w-32\">Difficulty</TableHead>\n            <TableHead>Tags</TableHead>\n            <TableHead className=\"w-20\">Access</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {problems.map((problem, index) => (\n            <TableRow\n              key={problem.id}\n              className={`hover:bg-slate-50 dark:hover:bg-slate-800 cursor-pointer transition-colors ${\n                hoveredRow === problem.id ? 'bg-slate-50 dark:bg-slate-800' : ''\n              }`}\n              onMouseEnter={() => setHoveredRow(problem.id)}\n              onMouseLeave={() => setHoveredRow(null)}\n              data-testid={`row-problem-${index}`}\n            >\n              <TableCell>\n                <Tooltip>\n                  <TooltipTrigger>\n                    {getStatusIcon(problem.id)}\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Problem status</p>\n                  </TooltipContent>\n                </Tooltip>\n              </TableCell>\n              \n              <TableCell>\n                {canAccessProblem(problem) ? (\n                  <Link href={`/problem/${problem.id}`}>\n                    <Button \n                      variant=\"link\" \n                      className=\"p-0 h-auto font-medium text-slate-900 dark:text-white hover:text-brand-600 dark:hover:text-brand-400\"\n                      data-testid={`link-problem-${problem.title.replace(/\\s+/g, '-').toLowerCase()}`}\n                    >\n                      {index + 1}. {problem.title}\n                    </Button>\n                  </Link>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-medium text-slate-900 dark:text-white\">\n                      {index + 1}. {problem.title}\n                    </span>\n                    <i className=\"fas fa-lock text-amber-500 text-sm\" />\n                  </div>\n                )}\n              </TableCell>\n              \n              <TableCell>\n                <span className=\"text-slate-600 dark:text-slate-400\">\n                  {problem.acceptanceRate}%\n                </span>\n              </TableCell>\n              \n              <TableCell>\n                <Badge className={getDifficultyBadgeClass(problem.difficulty)}>\n                  {problem.difficulty}\n                </Badge>\n              </TableCell>\n              \n              <TableCell>\n                <div className=\"flex flex-wrap gap-1\">\n                  {(Array.isArray(problem.tags) ? problem.tags : []).slice(0, 3).map((tag: string) => (\n                    <Badge\n                      key={tag}\n                      variant=\"outline\"\n                      className=\"text-xs bg-blue-50 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-300 dark:border-blue-800\"\n                    >\n                      {tag}\n                    </Badge>\n                  ))}\n                  {Array.isArray(problem.tags) && problem.tags.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{problem.tags.length - 3}\n                    </Badge>\n                  )}\n                </div>\n              </TableCell>\n              \n              <TableCell>\n                {problem.isPremium ? (\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <i className=\"fas fa-crown text-amber-500\" />\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Premium only</p>\n                    </TooltipContent>\n                  </Tooltip>\n                ) : (\n                  <span className=\"text-slate-400 dark:text-slate-600 text-sm\">Free</span>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":7646},"client/src/components/providers/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1604},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nconst Alert = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(\n      \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertDescription = forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription };","size_bytes":828},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/api/useAI.ts":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AIHintRequest, AIExplanationRequest, AICodeAnalysisRequest, AIResponse } from \"@/types/api\";\n\nexport function useAIHint() {\n  return useMutation({\n    mutationFn: async (request: AIHintRequest): Promise<AIResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/ai/hint\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useAIExplanation() {\n  return useMutation({\n    mutationFn: async (request: AIExplanationRequest): Promise<AIResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/ai/explanation\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useAICodeAnalysis() {\n  return useMutation({\n    mutationFn: async (request: AICodeAnalysisRequest): Promise<AIResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/ai/analysis\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useAICodeReview() {\n  return useMutation({\n    mutationFn: async (request: AICodeAnalysisRequest): Promise<AIResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/ai/review\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useAIOptimization() {\n  return useMutation({\n    mutationFn: async (request: AICodeAnalysisRequest): Promise<AIResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/ai/optimize\", request);\n      return response.json();\n    }\n  });\n}","size_bytes":1504},"client/src/hooks/api/usePayments.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { PaymentIntent, CreatePaymentRequest, SubscriptionPlan, Subscription } from \"@/types/api\";\n\nexport function useSubscriptionPlans() {\n  return useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/payments/plans\"]\n  });\n}\n\nexport function useUserSubscription(userId: string) {\n  return useQuery<Subscription>({\n    queryKey: [\"/api/payments/subscription\", userId],\n    enabled: !!userId\n  });\n}\n\nexport function useCreatePaymentIntent() {\n  return useMutation({\n    mutationFn: async (request: CreatePaymentRequest): Promise<PaymentIntent> => {\n      const response = await apiRequest(\"POST\", \"/api/payments/intent\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useCreateSubscription() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (request: { planId: string; paymentMethodId: string }): Promise<Subscription> => {\n      const response = await apiRequest(\"POST\", \"/api/payments/subscription\", request);\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments/subscription\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    }\n  });\n}\n\nexport function useCancelSubscription() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (subscriptionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/payments/subscription/${subscriptionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments/subscription\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    }\n  });\n}\n\nexport function useUserPayments(userId: string, page = 1, pageSize = 20) {\n  return useQuery({\n    queryKey: [\"/api/payments/history\", userId, { page, pageSize }],\n    enabled: !!userId,\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString()\n      });\n      \n      const response = await fetch(`/api/payments/history?${params}`);\n      return response.json();\n    }\n  });\n}","size_bytes":2287},"client/src/hooks/api/useProblems.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Problem, Category, SearchRequest, SearchResult } from \"@/types/api\";\n\nexport function useProblems(page = 1, pageSize = 20, difficulty?: string, categoryId?: string) {\n  return useQuery({\n    queryKey: [\"/api/problems\", { page, pageSize, difficulty, categoryId }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString(),\n        ...(difficulty && { difficulty }),\n        ...(categoryId && { categoryId })\n      });\n      \n      const response = await fetch(`/api/problems?${params}`);\n      return response.json();\n    }\n  });\n}\n\nexport function useProblem(id: string) {\n  return useQuery({\n    queryKey: [\"/api/problems\", id],\n    enabled: !!id\n  });\n}\n\nexport function useCategories() {\n  return useQuery<Category[]>({\n    queryKey: [\"/api/categories\"]\n  });\n}\n\nexport function useSearchProblems() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (searchRequest: SearchRequest): Promise<SearchResult> => {\n      const response = await apiRequest(\"POST\", \"/api/search/problems\", searchRequest);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/search\"] });\n    }\n  });\n}\n\nexport function useProblemRecommendations(userId: string) {\n  return useQuery<Problem[]>({\n    queryKey: [\"/api/search/recommendations\", userId],\n    enabled: !!userId\n  });\n}\n\nexport function useLikeProblem() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ problemId, isLike }: { problemId: string; isLike: boolean }) => {\n      const response = await apiRequest(\"POST\", `/api/problems/${problemId}/like`, { isLike });\n      return response.json();\n    },\n    onSuccess: (_, { problemId }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\", problemId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\"] });\n    }\n  });\n}","size_bytes":2105},"client/src/hooks/api/useSubmissions.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { API_CONFIG, buildApiUrl } from \"@/lib/config\";\nimport { Submission, CodeExecutionRequest, CodeExecutionResult } from \"@/types/api\";\n\nexport function useSubmissions(userId?: string, problemId?: string, page = 1, pageSize = 20) {\n  return useQuery({\n    queryKey: [API_CONFIG.ENDPOINTS.SUBMISSIONS.LIST, { userId, problemId, page, pageSize }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        pageSize: pageSize.toString(),\n        ...(userId && { userId }),\n        ...(problemId && { problemId })\n      });\n      \n      const response = await fetch(buildApiUrl(`${API_CONFIG.ENDPOINTS.SUBMISSIONS.LIST}?${params}`));\n      return response.json();\n    }\n  });\n}\n\nexport function useSubmission(id: string) {\n  return useQuery<Submission>({\n    queryKey: [\"/api/submissions\", id],\n    enabled: !!id\n  });\n}\n\nexport function useUserSubmissions(userId: string, page = 1, pageSize = 20) {\n  return useQuery<{ submissions: Submission[]; totalCount: number }>({\n    queryKey: [\"/api/submissions/user\", userId, { page, pageSize }],\n    enabled: !!userId\n  });\n}\n\nexport function useSubmitCode() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (request: CodeExecutionRequest): Promise<CodeExecutionResult> => {\n      const response = await apiRequest(\"POST\", API_CONFIG.ENDPOINTS.SUBMISSIONS.EXECUTE, request);\n      return response.json();\n    },\n    onSuccess: (_, { problemId }) => {\n      queryClient.invalidateQueries({ queryKey: [API_CONFIG.ENDPOINTS.SUBMISSIONS.LIST] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", \"user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\", problemId] });\n    }\n  });\n}\n\nexport function useValidateCode() {\n  return useMutation({\n    mutationFn: async (request: CodeExecutionRequest): Promise<CodeExecutionResult> => {\n      const response = await apiRequest(\"POST\", \"/api/submissions/validate\", request);\n      return response.json();\n    }\n  });\n}\n\nexport function useSubmissionStats(userId: string) {\n  return useQuery({\n    queryKey: [\"/api/submissions/stats\", userId],\n    enabled: !!userId,\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions/stats/${userId}`);\n      return response.json();\n    }\n  });\n}","size_bytes":2452},"backend/src/Services/DSAGrind.AI.API/Controllers/AIController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing DSAGrind.AI.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.AI.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\n[Authorize]\npublic class AIController : ControllerBase\n{\n    private readonly IAIService _aiService;\n    private readonly ILogger<AIController> _logger;\n\n    public AIController(IAIService aiService, ILogger<AIController> logger)\n    {\n        _aiService = aiService;\n        _logger = logger;\n    }\n\n    [HttpPost(\"hint\")]\n    public async Task<ActionResult<string>> GenerateHint([FromBody] Services.AIHintRequestDto request)\n    {\n        try\n        {\n            var hint = await _aiService.GenerateHintAsync(request.ProblemId, request.UserCode, request.HintLevel);\n            return Ok(new { hint });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating hint\");\n            return StatusCode(500, new { message = \"An error occurred while generating hint\" });\n        }\n    }\n\n    [HttpPost(\"explain\")]\n    public async Task<ActionResult<string>> ExplainSolution([FromBody] SolutionExplanationRequestDto request)\n    {\n        try\n        {\n            var explanation = await _aiService.ExplainSolutionAsync(request.ProblemId, request.Code);\n            return Ok(new { explanation });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error explaining solution\");\n            return StatusCode(500, new { message = \"An error occurred while explaining solution\" });\n        }\n    }\n\n    [HttpPost(\"analyze\")]\n    public async Task<ActionResult<CodeAnalysisDto>> AnalyzeCode([FromBody] CodeAnalysisRequestDto request)\n    {\n        try\n        {\n            var analysis = await _aiService.AnalyzeCodeAsync(request.Code, request.Language, request.ProblemId);\n            return Ok(analysis);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error analyzing code\");\n            return StatusCode(500, new { message = \"An error occurred while analyzing code\" });\n        }\n    }\n\n    [HttpPost(\"optimize\")]\n    public async Task<ActionResult<string>> OptimizeCode([FromBody] CodeOptimizationRequestDto request)\n    {\n        try\n        {\n            var optimizedCode = await _aiService.OptimizeCodeAsync(request.Code, request.Language);\n            return Ok(new { optimizedCode });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error optimizing code\");\n            return StatusCode(500, new { message = \"An error occurred while optimizing code\" });\n        }\n    }\n\n    [HttpPost(\"debug\")]\n    public async Task<ActionResult<string>> DebugCode([FromBody] CodeDebugRequestDto request)\n    {\n        try\n        {\n            var debugSuggestion = await _aiService.DebugCodeAsync(request.Code, request.Language, request.ErrorMessage);\n            return Ok(new { debugSuggestion });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error debugging code\");\n            return StatusCode(500, new { message = \"An error occurred while debugging code\" });\n        }\n    }\n\n    [HttpPost(\"generate-testcases\")]\n    [Authorize(Roles = \"admin\")]\n    public async Task<ActionResult<string>> GenerateTestCases([FromBody] TestCaseGenerationRequestDto request)\n    {\n        try\n        {\n            var testCases = await _aiService.GenerateTestCasesAsync(request.ProblemDescription, request.Count);\n            return Ok(new { testCases });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating test cases\");\n            return StatusCode(500, new { message = \"An error occurred while generating test cases\" });\n        }\n    }\n\n    [HttpPost(\"estimate-difficulty\")]\n    [Authorize(Roles = \"admin\")]\n    public async Task<ActionResult<DifficultyEstimateDto>> EstimateDifficulty([FromBody] string problemDescription)\n    {\n        try\n        {\n            var estimate = await _aiService.EstimateDifficultyAsync(problemDescription);\n            return Ok(estimate);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error estimating difficulty\");\n            return StatusCode(500, new { message = \"An error occurred while estimating difficulty\" });\n        }\n    }\n}","size_bytes":4346},"backend/src/Services/DSAGrind.AI.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.AI.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.AI.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":390},"backend/src/Services/DSAGrind.AI.API/Services/AIService.cs":{"content":"using DSAGrind.Models.DTOs;\nusing Microsoft.SemanticKernel;\nusing Microsoft.SemanticKernel.Connectors.OpenAI;\nusing System.ComponentModel;\n\nnamespace DSAGrind.AI.API.Services;\n\npublic class AIService : IAIService\n{\n    private readonly Kernel _kernel;\n    private readonly ILogger<AIService> _logger;\n\n    public AIService(IConfiguration configuration, ILogger<AIService> logger)\n    {\n        _logger = logger;\n        \n        var builder = Kernel.CreateBuilder();\n        builder.AddOpenAIChatCompletion(\n            \"gpt-3.5-turbo\",\n            configuration[\"OpenAI:ApiKey\"] ?? throw new InvalidOperationException(\"OpenAI API key not configured\"));\n        \n        _kernel = builder.Build();\n    }\n\n    public async Task<string> GenerateHintAsync(string problemId, string userCode, int hintLevel, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert programming tutor. Generate a helpful hint for this coding problem.\n                \n                Problem ID: {problemId}\n                User's current code: {userCode}\n                Hint Level: {hintLevel} (1=gentle nudge, 2=more specific, 3=detailed guidance)\n                \n                Provide a hint that guides the user without giving away the complete solution.\n                Focus on the algorithmic approach or key insight needed.\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating hint for problem {ProblemId}\", problemId);\n            return \"Unable to generate hint at this time. Please try again later.\";\n        }\n    }\n\n    public async Task<string> ExplainSolutionAsync(string problemId, string code, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert programming educator. Explain this solution to a coding problem in detail.\n                \n                Problem ID: {problemId}\n                Solution Code: {code}\n                \n                Provide a comprehensive explanation that covers:\n                1. The algorithm/approach used\n                2. Time and space complexity\n                3. Key insights and why this approach works\n                4. Line-by-line walkthrough of important parts\n                \n                Make it educational and easy to understand.\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error explaining solution for problem {ProblemId}\", problemId);\n            return \"Unable to explain solution at this time. Please try again later.\";\n        }\n    }\n\n    public async Task<CodeAnalysisDto> AnalyzeCodeAsync(string code, string language, string? problemId = null, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n\n\n            var prompt = $$\"\"\"\nYou are an expert programming problem curator. Analyze this problem and estimate its difficulty.\n\nProblem Description: {problemDescription}\n\nProvide your analysis in this JSON format:\n{\n    \"estimatedDifficulty\": \"Easy|Medium|Hard\",\n    \"confidence\": 0.85,\n    \"reasoningFactors\": [\"factor1\", \"factor2\"],\n    \"estimatedTimeMinutes\": 30,\n    \"requiredConcepts\": [\"concept1\", \"concept2\"]\n}\n\nConsider:\n- Algorithmic complexity required\n- Data structures needed\n- Problem-solving techniques\n- Implementation difficulty\n- Typical time to solve for different skill levels\n\"\"\";\n\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            \n            // Parse the JSON response\n            var response = result.ToString();\n            var analysis = System.Text.Json.JsonSerializer.Deserialize<CodeAnalysisDto>(response, new System.Text.Json.JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true\n            });\n\n            return analysis ?? new CodeAnalysisDto\n            {\n                TimeComplexity = \"Unable to analyze\",\n                SpaceComplexity = \"Unable to analyze\",\n                CodeQualityScore = 50,\n                Suggestions = new List<string> { \"Analysis failed, please try again\" }\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error analyzing code\");\n            return new CodeAnalysisDto\n            {\n                TimeComplexity = \"Analysis failed\",\n                SpaceComplexity = \"Analysis failed\",\n                CodeQualityScore = 0,\n                Issues = new List<string> { \"Unable to analyze code at this time\" }\n            };\n        }\n    }\n\n    public async Task<string> GenerateTestCasesAsync(string problemDescription, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert test case designer. Generate {count} diverse test cases for this problem.\n                \n                Problem Description: {problemDescription}\n                \n                Generate test cases that cover:\n                - Edge cases (empty input, single element, etc.)\n                - Boundary conditions\n                - Normal cases\n                - Large inputs (if applicable)\n                \n                Format as:\n                Input: [input]\n                Expected Output: [output]\n                ---\n                (repeat for each test case)\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating test cases\");\n            return \"Unable to generate test cases at this time.\";\n        }\n    }\n\n    public async Task<DifficultyEstimateDto> EstimateDifficultyAsync(string problemDescription, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = @\"\nYou are an expert programming problem curator. Analyze this problem and estimate its difficulty.\n\nProblem Description: {problemDescription}\n\nProvide your analysis in this JSON format:\n{\n    \"\"estimatedDifficulty\"\": \"\"Easy|Medium|Hard\"\",\n    \"\"confidence\"\": 0.85,\n    \"\"reasoningFactors\"\": [\"\"factor1\"\", \"\"factor2\"\"],\n    \"\"estimatedTimeMinutes\"\": 30,\n    \"\"requiredConcepts\"\": [\"\"concept1\"\", \"\"concept2\"\"]\n}\n\nConsider:\n- Algorithmic complexity required\n- Data structures needed\n- Problem-solving techniques\n- Implementation difficulty\n- Typical time to solve for different skill levels\n\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            \n            var response = result.ToString();\n            var estimate = System.Text.Json.JsonSerializer.Deserialize<DifficultyEstimateDto>(response, new System.Text.Json.JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true\n            });\n\n            return estimate ?? new DifficultyEstimateDto\n            {\n                EstimatedDifficulty = \"Medium\",\n                Confidence = 0.5,\n                ReasoningFactors = new List<string> { \"Analysis incomplete\" },\n                EstimatedTimeMinutes = 45,\n                RequiredConcepts = new List<string> { \"Problem solving\" }\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error estimating difficulty\");\n            return new DifficultyEstimateDto\n            {\n                EstimatedDifficulty = \"Unknown\",\n                Confidence = 0.0,\n                ReasoningFactors = new List<string> { \"Analysis failed\" },\n                EstimatedTimeMinutes = 0,\n                RequiredConcepts = new List<string>()\n            };\n        }\n    }\n\n    public async Task<string> OptimizeCodeAsync(string code, string language, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert code optimizer. Optimize this {language} code for better performance and readability.\n                \n                Original Code: {code}\n                \n                Provide an optimized version that:\n                1. Improves time/space complexity if possible\n                2. Follows best practices\n                3. Is more readable and maintainable\n                4. Includes brief comments explaining optimizations\n                \n                Return only the optimized code.\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error optimizing code\");\n            return \"Unable to optimize code at this time. Please try again later.\";\n        }\n    }\n\n    public async Task<string> GenerateAlternativeSolutionAsync(string problemId, string currentCode, string language, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert programmer. Generate an alternative solution approach for this problem.\n                \n                Problem ID: {problemId}\n                Current Solution: {currentCode}\n                Language: {language}\n                \n                Provide a completely different algorithmic approach that:\n                1. Uses different data structures or algorithms\n                2. Has different time/space complexity trade-offs\n                3. Demonstrates alternative problem-solving techniques\n                4. Is well-commented to explain the approach\n                \n                Return only the alternative solution code.\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating alternative solution\");\n            return \"Unable to generate alternative solution at this time.\";\n        }\n    }\n\n    public async Task<string> DebugCodeAsync(string code, string language, string errorMessage, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var prompt = $\"\"\"\n                You are an expert debugger. Help fix this {language} code that's producing an error.\n                \n                Code: {code}\n                Error Message: {errorMessage}\n                \n                Provide:\n                1. Explanation of what's causing the error\n                2. The corrected code\n                3. Explanation of the fix\n                4. Tips to avoid similar errors in the future\n                \n                Be clear and educational in your response.\n                \"\"\";\n\n            var result = await _kernel.InvokePromptAsync(prompt, cancellationToken: cancellationToken);\n            return result.ToString();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error debugging code\");\n            return \"Unable to debug code at this time. Please try again later.\";\n        }\n    }\n}","size_bytes":11558},"backend/src/Services/DSAGrind.AI.API/Services/IAIService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.AI.API.Services;\n\npublic interface IAIService\n{\n    Task<string> GenerateHintAsync(string problemId, string userCode, int hintLevel, CancellationToken cancellationToken = default);\n    Task<string> ExplainSolutionAsync(string problemId, string code, CancellationToken cancellationToken = default);\n    Task<CodeAnalysisDto> AnalyzeCodeAsync(string code, string language, string? problemId = null, CancellationToken cancellationToken = default);\n    Task<string> GenerateTestCasesAsync(string problemDescription, int count, CancellationToken cancellationToken = default);\n    Task<DifficultyEstimateDto> EstimateDifficultyAsync(string problemDescription, CancellationToken cancellationToken = default);\n    Task<string> OptimizeCodeAsync(string code, string language, CancellationToken cancellationToken = default);\n    Task<string> GenerateAlternativeSolutionAsync(string problemId, string currentCode, string language, CancellationToken cancellationToken = default);\n    Task<string> DebugCodeAsync(string code, string language, string errorMessage, CancellationToken cancellationToken = default);\n}\n\n\npublic class AIHintRequestDto\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string UserCode { get; set; } = string.Empty;\n    public int HintLevel { get; set; } = 1;\n}\n\npublic class CodeAnalysisRequestDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string? ProblemId { get; set; }\n}\n\npublic class SolutionExplanationRequestDto\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n}\n\npublic class TestCaseGenerationRequestDto\n{\n    public string ProblemDescription { get; set; } = string.Empty;\n    public int Count { get; set; } = 5;\n}\n\npublic class CodeOptimizationRequestDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\npublic class CodeDebugRequestDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string ErrorMessage { get; set; } = string.Empty;\n}","size_bytes":2214},"backend/src/Services/DSAGrind.Admin.API/Controllers/AdminController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing DSAGrind.Admin.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Admin.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\n[Authorize(Roles = \"Admin\")]\npublic class AdminController : ControllerBase\n{\n    private readonly IAdminService _adminService;\n    private readonly ILogger<AdminController> _logger;\n\n    public AdminController(IAdminService adminService, ILogger<AdminController> logger)\n    {\n        _adminService = adminService;\n        _logger = logger;\n    }\n\n    [HttpGet(\"dashboard\")]\n    public async Task<ActionResult<AdminDashboardDto>> GetDashboard()\n    {\n        try\n        {\n            var dashboard = await _adminService.GetDashboardDataAsync();\n            return Ok(dashboard);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting admin dashboard\");\n            return StatusCode(500, new { message = \"An error occurred while getting dashboard data\" });\n        }\n    }\n\n    [HttpGet(\"users\")]\n    public async Task<ActionResult<List<UserDto>>> GetUsers([FromQuery] int page = 1, [FromQuery] int pageSize = 50, [FromQuery] string? search = null)\n    {\n        try\n        {\n            var users = await _adminService.GetUsersAsync(page, pageSize, search);\n            return Ok(users);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting users\");\n            return StatusCode(500, new { message = \"An error occurred while getting users\" });\n        }\n    }\n\n    [HttpGet(\"users/{userId}\")]\n    public async Task<ActionResult<UserDto>> GetUser(string userId)\n    {\n        try\n        {\n            var user = await _adminService.GetUserAsync(userId);\n            if (user == null)\n            {\n                return NotFound();\n            }\n            return Ok(user);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting user {UserId}\", userId);\n            return StatusCode(500, new { message = \"An error occurred while getting user\" });\n        }\n    }\n\n    [HttpPut(\"users/{userId}/ban\")]\n    public async Task<IActionResult> BanUser(string userId, [FromBody] BanUserRequestDto request)\n    {\n        try\n        {\n            var adminUserId = User.FindFirst(\"sub\")?.Value ?? User.FindFirst(\"id\")?.Value ?? \"system\";\n            var success = await _adminService.BanUserAsync(userId, request.Reason, adminUserId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to ban user\" });\n            }\n            return Ok(new { message = \"User banned successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error banning user {UserId}\", userId);\n            return StatusCode(500, new { message = \"An error occurred while banning user\" });\n        }\n    }\n\n    [HttpPut(\"users/{userId}/unban\")]\n    public async Task<IActionResult> UnbanUser(string userId)\n    {\n        try\n        {\n            var adminUserId = User.FindFirst(\"sub\")?.Value ?? User.FindFirst(\"id\")?.Value ?? \"system\";\n            var success = await _adminService.UnbanUserAsync(userId, adminUserId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to unban user\" });\n            }\n            return Ok(new { message = \"User unbanned successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error unbanning user {UserId}\", userId);\n            return StatusCode(500, new { message = \"An error occurred while unbanning user\" });\n        }\n    }\n\n    [HttpGet(\"problems/pending\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetPendingProblems()\n    {\n        try\n        {\n            var problems = await _adminService.GetPendingProblemsAsync();\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting pending problems\");\n            return StatusCode(500, new { message = \"An error occurred while getting pending problems\" });\n        }\n    }\n\n    [HttpPut(\"problems/{problemId}/approve\")]\n    public async Task<IActionResult> ApproveProblem(string problemId)\n    {\n        try\n        {\n            var adminUserId = User.FindFirst(\"sub\")?.Value ?? User.FindFirst(\"id\")?.Value ?? \"system\";\n            var success = await _adminService.ApproveProblemAsync(problemId, adminUserId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to approve problem\" });\n            }\n            return Ok(new { message = \"Problem approved successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error approving problem {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while approving problem\" });\n        }\n    }\n\n    [HttpPut(\"problems/{problemId}/reject\")]\n    public async Task<IActionResult> RejectProblem(string problemId, [FromBody] RejectProblemRequestDto request)\n    {\n        try\n        {\n            var adminUserId = User.FindFirst(\"sub\")?.Value ?? User.FindFirst(\"id\")?.Value ?? \"system\";\n            var success = await _adminService.RejectProblemAsync(problemId, request.Reason, adminUserId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to reject problem\" });\n            }\n            return Ok(new { message = \"Problem rejected successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error rejecting problem {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while rejecting problem\" });\n        }\n    }\n\n    [HttpGet(\"analytics\")]\n    public async Task<ActionResult<object>> GetAnalytics()\n    {\n        try\n        {\n            var analytics = await _adminService.GetAnalyticsAsync();\n            return Ok(analytics);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting analytics\");\n            return StatusCode(500, new { message = \"An error occurred while getting analytics\" });\n        }\n    }\n\n    [HttpPost(\"system/backup\")]\n    public async Task<IActionResult> CreateBackup()\n    {\n        try\n        {\n            var success = await _adminService.CreateBackupAsync();\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to create backup\" });\n            }\n            var backupId = Guid.NewGuid().ToString();\n            return Ok(new { backupId, message = \"Backup created successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating backup\");\n            return StatusCode(500, new { message = \"An error occurred while creating backup\" });\n        }\n    }\n\n    [HttpGet(\"system/health\")]\n    public async Task<ActionResult<SystemHealthDto>> GetSystemHealth()\n    {\n        try\n        {\n            var health = await _adminService.GetSystemHealthAsync();\n            return Ok(health);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting system health\");\n            return StatusCode(500, new { message = \"An error occurred while getting system health\" });\n        }\n    }\n}","size_bytes":7382},"backend/src/Services/DSAGrind.Admin.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Admin.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Admin.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":396},"backend/src/Services/DSAGrind.Admin.API/Services/AdminService.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Common.Services;\nusing AutoMapper;\nusing MongoDB.Bson;\n\nnamespace DSAGrind.Admin.API.Services;\n\npublic class AdminService : IAdminService\n{\n    private readonly IMongoRepository<User> _userRepository;\n    private readonly IMongoRepository<Problem> _problemRepository;\n    private readonly IMongoRepository<Submission> _submissionRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ILogger<AdminService> _logger;\n    private readonly IUserManagementService _userManagementService;\n    private readonly IContentModerationService _contentModerationService;\n\n    public AdminService(\n        IMongoRepository<User> userRepository,\n        IMongoRepository<Problem> problemRepository,\n        IMongoRepository<Submission> submissionRepository,\n        IEventPublisher eventPublisher,\n        ILogger<AdminService> logger,\n        IUserManagementService userManagementService,\n        IContentModerationService contentModerationService)\n    {\n        _userRepository = userRepository;\n        _problemRepository = problemRepository;\n        _submissionRepository = submissionRepository;\n        _eventPublisher = eventPublisher;\n        _logger = logger;\n        _userManagementService = userManagementService;\n        _contentModerationService = contentModerationService;\n    }\n\n    public async Task<AdminDashboardDto> GetDashboardAsync(CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var totalUsers = await _userRepository.CountAsync(cancellationToken: cancellationToken);\n            var activeUsers = await _userRepository.CountAsync(u => u.LastLoginAt >= DateTime.UtcNow.AddDays(-30), cancellationToken);\n            var totalProblems = await _problemRepository.CountAsync(cancellationToken: cancellationToken);\n            var pendingProblems = await _problemRepository.CountAsync(p => p.Status == \"pending\", cancellationToken);\n            var totalSubmissions = await _submissionRepository.CountAsync(cancellationToken: cancellationToken);\n            var todaySubmissions = await _submissionRepository.CountAsync(s => s.CreatedAt >= DateTime.UtcNow.Date, cancellationToken);\n\n            return new AdminDashboardDto\n            {\n                TotalUsers = (int)totalUsers,\n                ActiveUsers = (int)activeUsers,\n                TotalProblems = (int)totalProblems,\n                PendingProblems = (int)pendingProblems,\n                TotalSubmissions = (int)totalSubmissions,\n                TodaySubmissions = (int)todaySubmissions,\n                Revenue = 12450.00m, // Mock data\n                PremiumUsers = (int)(totalUsers * 0.15), // Mock 15% premium rate\n                SubmissionsChart = GenerateSubmissionsChart(),\n                UsersChart = GenerateUsersChart()\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting admin dashboard\");\n            return new AdminDashboardDto();\n        }\n    }\n\n    public async Task<List<AdminNotificationDto>> GetNotificationsAsync(CancellationToken cancellationToken = default)\n    {\n        // Mock notifications - in real implementation, query notifications collection\n        return await Task.FromResult(new List<AdminNotificationDto>\n        {\n            new() { Id = \"1\", Title = \"New Problem Pending Review\", Message = \"Problem 'Binary Search Tree' needs approval\", Type = \"info\", IsRead = false, CreatedAt = DateTime.UtcNow.AddHours(-2) },\n            new() { Id = \"2\", Title = \"High Error Rate Detected\", Message = \"Submissions service showing 5% error rate\", Type = \"warning\", IsRead = false, CreatedAt = DateTime.UtcNow.AddHours(-4) },\n            new() { Id = \"3\", Title = \"System Maintenance Complete\", Message = \"Database optimization completed successfully\", Type = \"success\", IsRead = true, CreatedAt = DateTime.UtcNow.AddHours(-6) }\n        });\n    }\n\n    public async Task<bool> MarkNotificationReadAsync(string notificationId, CancellationToken cancellationToken = default)\n    {\n        // In real implementation, update notification in database\n        _logger.LogInformation(\"Marking notification {NotificationId} as read\", notificationId);\n        return await Task.FromResult(true);\n    }\n\n    public async Task<SystemHealthDto> GetSystemHealthAsync(CancellationToken cancellationToken = default)\n    {\n        var services = new List<ServiceHealthDto>\n        {\n            new() { Name = \"Problems API\", IsHealthy = true, Status = \"Healthy\", ResponseTime = 45.2, LastCheck = DateTime.UtcNow },\n            new() { Name = \"Submissions API\", IsHealthy = true, Status = \"Healthy\", ResponseTime = 67.8, LastCheck = DateTime.UtcNow },\n            new() { Name = \"AI API\", IsHealthy = true, Status = \"Healthy\", ResponseTime = 123.4, LastCheck = DateTime.UtcNow },\n            new() { Name = \"Search API\", IsHealthy = true, Status = \"Healthy\", ResponseTime = 89.1, LastCheck = DateTime.UtcNow },\n            new() { Name = \"Auth API\", IsHealthy = true, Status = \"Healthy\", ResponseTime = 34.6, LastCheck = DateTime.UtcNow }\n        };\n\n        return await Task.FromResult(new SystemHealthDto\n        {\n            IsHealthy = services.All(s => s.IsHealthy),\n            Services = services,\n            Database = new DatabaseHealthDto { IsHealthy = true, ResponseTime = 12.3, ConnectionCount = 25 },\n            ExternalServices = new ExternalServiceHealthDto\n            {\n                StripeHealthy = true,\n                RedisHealthy = true,\n                KafkaHealthy = true,\n                QdrantHealthy = true\n            }\n        });\n    }\n\n    public async Task<List<AdminAuditLogDto>> GetAuditLogsAsync(int page = 1, int pageSize = 50, CancellationToken cancellationToken = default)\n    {\n        // Mock audit logs - in real implementation, query audit logs collection\n        var logs = new List<AdminAuditLogDto>\n        {\n            new() { Id = \"1\", UserId = \"admin1\", Action = \"APPROVE_PROBLEM\", Resource = \"problem:123\", Details = \"Approved problem 'Two Sum'\", Timestamp = DateTime.UtcNow.AddHours(-1) },\n            new() { Id = \"2\", UserId = \"admin1\", Action = \"BAN_USER\", Resource = \"user:456\", Details = \"Banned user for spam\", Timestamp = DateTime.UtcNow.AddHours(-3) },\n            new() { Id = \"3\", UserId = \"admin2\", Action = \"CREATE_CATEGORY\", Resource = \"category:789\", Details = \"Created new category 'Dynamic Programming'\", Timestamp = DateTime.UtcNow.AddHours(-5) }\n        };\n\n        return await Task.FromResult(logs.Skip((page - 1) * pageSize).Take(pageSize).ToList());\n    }\n\n    public async Task<AdminDashboardDto> GetDashboardDataAsync(CancellationToken cancellationToken = default)\n    {\n        return await GetDashboardAsync(cancellationToken);\n    }\n\n    public async Task<object> GetAnalyticsAsync(CancellationToken cancellationToken = default)\n    {\n        // Mock analytics data\n        return await Task.FromResult(new\n        {\n            TotalRevenue = 125000.50m,\n            MonthlyGrowth = 12.5,\n            UserRetentionRate = 85.3,\n            ProblemCompletionRate = 73.2\n        });\n    }\n\n    public async Task<bool> CreateBackupAsync(CancellationToken cancellationToken = default)\n    {\n        // Mock backup creation\n        _logger.LogInformation(\"Creating system backup...\");\n        await Task.Delay(1000, cancellationToken); // Simulate backup time\n        return true;\n    }\n\n    // Delegate to UserManagementService methods\n    public async Task<List<UserDto>> GetUsersAsync(int page = 1, int pageSize = 50, string? search = null, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.GetUsersAsync(page, pageSize, search, cancellationToken);\n    }\n\n    public async Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.GetUserAsync(userId, cancellationToken);\n    }\n\n    public async Task<bool> BanUserAsync(string userId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.BanUserAsync(userId, reason, adminUserId, cancellationToken);\n    }\n\n    public async Task<bool> UnbanUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.UnbanUserAsync(userId, adminUserId, cancellationToken);\n    }\n\n    public async Task<bool> UpdateUserRoleAsync(string userId, string role, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.UpdateUserRoleAsync(userId, role, adminUserId, cancellationToken);\n    }\n\n    public async Task<bool> DeleteUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _userManagementService.DeleteUserAsync(userId, adminUserId, cancellationToken);\n    }\n\n    // Delegate to ContentModerationService methods\n    public async Task<List<ProblemDto>> GetPendingProblemsAsync(CancellationToken cancellationToken = default)\n    {\n        return await _contentModerationService.GetPendingProblemsAsync(cancellationToken);\n    }\n\n    public async Task<List<SubmissionDto>> GetFlaggedSubmissionsAsync(CancellationToken cancellationToken = default)\n    {\n        return await _contentModerationService.GetFlaggedSubmissionsAsync(cancellationToken);\n    }\n\n    public async Task<bool> ApproveProblemAsync(string problemId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _contentModerationService.ApproveProblemAsync(problemId, adminUserId, cancellationToken);\n    }\n\n    public async Task<bool> RejectProblemAsync(string problemId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _contentModerationService.RejectProblemAsync(problemId, reason, adminUserId, cancellationToken);\n    }\n\n    public async Task<bool> RemoveSubmissionAsync(string submissionId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        return await _contentModerationService.RemoveSubmissionAsync(submissionId, reason, adminUserId, cancellationToken);\n    }\n\n    private List<DashboardChartDto> GenerateSubmissionsChart()\n    {\n        return new List<DashboardChartDto>\n        {\n            new() { Label = \"Mon\", Value = 245 },\n            new() { Label = \"Tue\", Value = 312 },\n            new() { Label = \"Wed\", Value = 189 },\n            new() { Label = \"Thu\", Value = 421 },\n            new() { Label = \"Fri\", Value = 356 },\n            new() { Label = \"Sat\", Value = 278 },\n            new() { Label = \"Sun\", Value = 234 }\n        };\n    }\n\n    private List<DashboardChartDto> GenerateUsersChart()\n    {\n        return new List<DashboardChartDto>\n        {\n            new() { Label = \"Jan\", Value = 1240 },\n            new() { Label = \"Feb\", Value = 1456 },\n            new() { Label = \"Mar\", Value = 1678 },\n            new() { Label = \"Apr\", Value = 1892 },\n            new() { Label = \"May\", Value = 2134 },\n            new() { Label = \"Jun\", Value = 2387 }\n        };\n    }\n}\n\npublic class UserManagementService : IUserManagementService\n{\n    private readonly IMongoRepository<User> _userRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ILogger<UserManagementService> _logger;\n\n    public UserManagementService(\n        IMongoRepository<User> userRepository,\n        IEventPublisher eventPublisher,\n        ILogger<UserManagementService> logger)\n    {\n        _userRepository = userRepository;\n        _eventPublisher = eventPublisher;\n        _logger = logger;\n    }\n\n    public async Task<List<UserDto>> GetUsersAsync(int page = 1, int pageSize = 50, string? search = null, CancellationToken cancellationToken = default)\n    {\n        var users = await _userRepository.GetManyAsync(\n            u => string.IsNullOrEmpty(search) || u.Email.Contains(search) || u.FirstName.Contains(search) || u.LastName.Contains(search),\n            cancellationToken);\n\n        return users.Select(u => new UserDto\n        {\n            Id = u.Id,\n            Email = u.Email,\n            FirstName = u.FirstName,\n            LastName = u.LastName,\n            Role = u.Role,\n            IsEmailVerified = u.IsEmailVerified,\n            IsActive = u.IsActive,\n            CreatedAt = u.CreatedAt,\n            LastLoginAt = u.LastLoginAt\n        }).ToList();\n    }\n\n    public async Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null) return null;\n\n        return new UserDto\n        {\n            Id = user.Id,\n            Email = user.Email,\n            FirstName = user.FirstName,\n            LastName = user.LastName,\n            Role = user.Role,\n            IsEmailVerified = user.IsEmailVerified,\n            IsActive = user.IsActive,\n            CreatedAt = user.CreatedAt,\n            LastLoginAt = user.LastLoginAt\n        };\n    }\n\n    public async Task<bool> BanUserAsync(string userId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null) return false;\n\n        user.IsActive = false;\n        user.UpdatedAt = DateTime.UtcNow;\n        \n        await _userRepository.UpdateAsync(user.Id, user, cancellationToken);\n        await _eventPublisher.PublishAsync(\"user.banned\", new { UserId = userId, Reason = reason, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> UnbanUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null) return false;\n\n        user.IsActive = true;\n        user.UpdatedAt = DateTime.UtcNow;\n        \n        await _userRepository.UpdateAsync(user.Id, user, cancellationToken);\n        await _eventPublisher.PublishAsync(\"user.unbanned\", new { UserId = userId, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> UpdateUserRoleAsync(string userId, string role, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null) return false;\n\n        var oldRole = user.Role;\n        user.Role = role;\n        user.UpdatedAt = DateTime.UtcNow;\n        \n        await _userRepository.UpdateAsync(user.Id, user, cancellationToken);\n        await _eventPublisher.PublishAsync(\"user.role_updated\", new { UserId = userId, OldRole = oldRole, NewRole = role, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> DeleteUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var success = await _userRepository.DeleteAsync(userId, cancellationToken);\n        if (success)\n        {\n            await _eventPublisher.PublishAsync(\"user.deleted\", new { UserId = userId, AdminUserId = adminUserId }, cancellationToken);\n        }\n\n        return success;\n    }\n}\n\npublic class ContentModerationService : IContentModerationService\n{\n    private readonly IMongoRepository<Problem> _problemRepository;\n    private readonly IMongoRepository<Submission> _submissionRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ILogger<ContentModerationService> _logger;\n\n    public ContentModerationService(\n        IMongoRepository<Problem> problemRepository,\n        IMongoRepository<Submission> submissionRepository,\n        IEventPublisher eventPublisher,\n        ILogger<ContentModerationService> logger)\n    {\n        _problemRepository = problemRepository;\n        _submissionRepository = submissionRepository;\n        _eventPublisher = eventPublisher;\n        _logger = logger;\n    }\n\n    public async Task<List<ProblemDto>> GetPendingProblemsAsync(CancellationToken cancellationToken = default)\n    {\n        var problems = await _problemRepository.GetManyAsync(p => p.Status == \"pending\", cancellationToken);\n        \n        return problems.Select(p => new ProblemDto\n        {\n            Id = p.Id,\n            Title = p.Title,\n            Description = p.Description,\n            Difficulty = p.Difficulty,\n            Status = p.Status,\n            CreatedAt = p.CreatedAt,\n            CreatedBy = p.CreatedBy\n        }).ToList();\n    }\n\n    public async Task<List<SubmissionDto>> GetFlaggedSubmissionsAsync(CancellationToken cancellationToken = default)\n    {\n        // In real implementation, query submissions flagged by users or AI\n        var submissions = await _submissionRepository.GetManyAsync(s => s.Notes != null && s.Notes.Contains(\"flagged\"), cancellationToken);\n        \n        return submissions.Select(s => new SubmissionDto\n        {\n            Id = s.Id,\n            UserId = s.UserId,\n            ProblemId = s.ProblemId,\n            Code = s.Code,\n            Language = s.Language,\n            Status = s.Status,\n            CreatedAt = s.CreatedAt,\n            Notes = s.Notes\n        }).ToList();\n    }\n\n    public async Task<bool> ApproveProblemAsync(string problemId, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(problemId, cancellationToken);\n        if (problem == null) return false;\n\n        problem.Status = \"approved\";\n        problem.UpdatedAt = DateTime.UtcNow;\n        problem.UpdatedBy = adminUserId;\n\n        await _problemRepository.UpdateAsync(problem.Id, problem, cancellationToken);\n        await _eventPublisher.PublishAsync(\"problem.approved\", new { ProblemId = problemId, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> RejectProblemAsync(string problemId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(problemId, cancellationToken);\n        if (problem == null) return false;\n\n        problem.Status = \"rejected\";\n        problem.UpdatedAt = DateTime.UtcNow;\n        problem.UpdatedBy = adminUserId;\n\n        await _problemRepository.UpdateAsync(problem.Id, problem, cancellationToken);\n        await _eventPublisher.PublishAsync(\"problem.rejected\", new { ProblemId = problemId, Reason = reason, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> RemoveSubmissionAsync(string submissionId, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var success = await _submissionRepository.DeleteAsync(submissionId, cancellationToken);\n        if (success)\n        {\n            await _eventPublisher.PublishAsync(\"submission.removed\", new { SubmissionId = submissionId, Reason = reason, AdminUserId = adminUserId }, cancellationToken);\n        }\n\n        return success;\n    }\n}","size_bytes":19298},"backend/src/Services/DSAGrind.Admin.API/Services/IAdminService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Admin.API.Services;\n\npublic interface IAdminService\n{\n    Task<AdminDashboardDto> GetDashboardAsync(CancellationToken cancellationToken = default);\n    Task<AdminDashboardDto> GetDashboardDataAsync(CancellationToken cancellationToken = default);\n    Task<List<AdminNotificationDto>> GetNotificationsAsync(CancellationToken cancellationToken = default);\n    Task<bool> MarkNotificationReadAsync(string notificationId, CancellationToken cancellationToken = default);\n    Task<SystemHealthDto> GetSystemHealthAsync(CancellationToken cancellationToken = default);\n    Task<List<AdminAuditLogDto>> GetAuditLogsAsync(int page = 1, int pageSize = 50, CancellationToken cancellationToken = default);\n    \n    // User Management Methods\n    Task<List<UserDto>> GetUsersAsync(int page = 1, int pageSize = 50, string? search = null, CancellationToken cancellationToken = default);\n    Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default);\n    Task<bool> BanUserAsync(string userId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> UnbanUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateUserRoleAsync(string userId, string role, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> DeleteUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default);\n    \n    // Content Moderation Methods\n    Task<List<ProblemDto>> GetPendingProblemsAsync(CancellationToken cancellationToken = default);\n    Task<List<SubmissionDto>> GetFlaggedSubmissionsAsync(CancellationToken cancellationToken = default);\n    Task<bool> ApproveProblemAsync(string problemId, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> RejectProblemAsync(string problemId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> RemoveSubmissionAsync(string submissionId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n    \n    // Analytics and Backup Methods\n    Task<object> GetAnalyticsAsync(CancellationToken cancellationToken = default);\n    Task<bool> CreateBackupAsync(CancellationToken cancellationToken = default);\n}\n\npublic interface IUserManagementService\n{\n    Task<List<UserDto>> GetUsersAsync(int page = 1, int pageSize = 50, string? search = null, CancellationToken cancellationToken = default);\n    Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default);\n    Task<bool> BanUserAsync(string userId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> UnbanUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateUserRoleAsync(string userId, string role, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> DeleteUserAsync(string userId, string adminUserId, CancellationToken cancellationToken = default);\n}\n\npublic interface IContentModerationService\n{\n    Task<List<ProblemDto>> GetPendingProblemsAsync(CancellationToken cancellationToken = default);\n    Task<List<SubmissionDto>> GetFlaggedSubmissionsAsync(CancellationToken cancellationToken = default);\n    Task<bool> ApproveProblemAsync(string problemId, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> RejectProblemAsync(string problemId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n    Task<bool> RemoveSubmissionAsync(string submissionId, string reason, string adminUserId, CancellationToken cancellationToken = default);\n}\n\n","size_bytes":3760},"backend/src/Services/DSAGrind.Auth.API/Controllers/AuthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Auth.API.Services;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Common.Services;\n\nnamespace DSAGrind.Auth.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AuthController : ControllerBase\n{\n    private readonly IAuthService _authService;\n    private readonly IRedisService _redisService;\n    private readonly ILogger<AuthController> _logger;\n\n    public AuthController(\n        IAuthService authService,\n        IRedisService redisService,\n        ILogger<AuthController> logger)\n    {\n        _authService = authService;\n        _redisService = redisService;\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Authenticate user with email and password\n    /// </summary>\n    [HttpPost(\"login\")]\n    public async Task<ActionResult<AuthResponseDto>> Login([FromBody] LoginRequestDto request)\n    {\n        try\n        {\n            var ipAddress = GetIpAddress();\n            var result = await _authService.LoginAsync(request, ipAddress);\n            \n            SetRefreshTokenCookie(result.RefreshToken);\n            \n            return Ok(result);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            return Unauthorized(new { message = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during login for email: {Email}\", request.Email);\n            return StatusCode(500, new { message = \"An error occurred during login\" });\n        }\n    }\n\n    /// <summary>\n    /// Register a new user account\n    /// </summary>\n    [HttpPost(\"register\")]\n    public async Task<ActionResult<AuthResponseDto>> Register([FromBody] RegisterRequestDto request)\n    {\n        try\n        {\n            var ipAddress = GetIpAddress();\n            var result = await _authService.RegisterAsync(request, ipAddress);\n            \n            SetRefreshTokenCookie(result.RefreshToken);\n            \n            return Ok(result);\n        }\n        catch (InvalidOperationException ex)\n        {\n            return BadRequest(new { message = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during registration for email: {Email}\", request.Email);\n            return StatusCode(500, new { message = \"An error occurred during registration\" });\n        }\n    }\n\n    /// <summary>\n    /// Refresh access token using refresh token\n    /// </summary>\n    [HttpPost(\"refresh\")]\n    public async Task<ActionResult<AuthResponseDto>> RefreshToken([FromBody] RefreshTokenRequestDto? request = null)\n    {\n        try\n        {\n            var refreshToken = request?.RefreshToken ?? Request.Cookies[\"refreshToken\"];\n            \n            if (string.IsNullOrEmpty(refreshToken))\n            {\n                return BadRequest(new { message = \"Refresh token is required\" });\n            }\n\n            var ipAddress = GetIpAddress();\n            var result = await _authService.RefreshTokenAsync(refreshToken, ipAddress);\n            \n            SetRefreshTokenCookie(result.RefreshToken);\n            \n            return Ok(result);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            return Unauthorized(new { message = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during token refresh\");\n            return StatusCode(500, new { message = \"An error occurred during token refresh\" });\n        }\n    }\n\n    /// <summary>\n    /// Revoke refresh token (logout)\n    /// </summary>\n    [HttpPost(\"revoke\")]\n    public async Task<IActionResult> RevokeToken([FromBody] RefreshTokenRequestDto? request = null)\n    {\n        try\n        {\n            var refreshToken = request?.RefreshToken ?? Request.Cookies[\"refreshToken\"];\n            \n            if (string.IsNullOrEmpty(refreshToken))\n            {\n                return BadRequest(new { message = \"Refresh token is required\" });\n            }\n\n            var ipAddress = GetIpAddress();\n            await _authService.RevokeTokenAsync(refreshToken, ipAddress);\n            \n            // Clear the refresh token cookie\n            Response.Cookies.Delete(\"refreshToken\");\n            \n            return Ok(new { message = \"Token revoked successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during token revocation\");\n            return StatusCode(500, new { message = \"An error occurred during logout\" });\n        }\n    }\n\n    /// <summary>\n    /// Revoke all refresh tokens for the current user\n    /// </summary>\n    [Authorize]\n    [HttpPost(\"revoke-all\")]\n    public async Task<IActionResult> RevokeAllTokens()\n    {\n        try\n        {\n            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var ipAddress = GetIpAddress();\n            await _authService.RevokeAllTokensAsync(userId, ipAddress);\n            \n            Response.Cookies.Delete(\"refreshToken\");\n            \n            return Ok(new { message = \"All tokens revoked successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during all tokens revocation\");\n            return StatusCode(500, new { message = \"An error occurred during logout\" });\n        }\n    }\n\n    /// <summary>\n    /// Verify email address using verification token\n    /// </summary>\n    [HttpPost(\"verify-email\")]\n    public async Task<IActionResult> VerifyEmail([FromBody] EmailVerificationRequestDto request)\n    {\n        try\n        {\n            var success = await _authService.VerifyEmailAsync(request.Token);\n            \n            if (!success)\n            {\n                return BadRequest(new { message = \"Invalid or expired verification token\" });\n            }\n            \n            return Ok(new { message = \"Email verified successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during email verification\");\n            return StatusCode(500, new { message = \"An error occurred during email verification\" });\n        }\n    }\n\n    /// <summary>\n    /// Resend email verification link\n    /// </summary>\n    [HttpPost(\"resend-verification\")]\n    public async Task<IActionResult> ResendVerification([FromBody] ResendVerificationRequestDto request)\n    {\n        try\n        {\n            var success = await _authService.ResendEmailVerificationAsync(request.Email);\n            \n            if (!success)\n            {\n                return BadRequest(new { message = \"Email not found or already verified\" });\n            }\n            \n            return Ok(new { message = \"Verification email sent successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during verification email resend\");\n            return StatusCode(500, new { message = \"An error occurred while sending verification email\" });\n        }\n    }\n\n    /// <summary>\n    /// Request password reset\n    /// </summary>\n    [HttpPost(\"forgot-password\")]\n    public async Task<IActionResult> ForgotPassword([FromBody] ForgotPasswordRequestDto request)\n    {\n        try\n        {\n            var ipAddress = GetIpAddress();\n            await _authService.ForgotPasswordAsync(request.Email, ipAddress);\n            \n            // Always return success to prevent email enumeration\n            return Ok(new { message = \"If an account with that email exists, a password reset link has been sent\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during forgot password\");\n            return StatusCode(500, new { message = \"An error occurred while processing your request\" });\n        }\n    }\n\n    /// <summary>\n    /// Reset password using reset token\n    /// </summary>\n    [HttpPost(\"reset-password\")]\n    public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordRequestDto request)\n    {\n        try\n        {\n            var ipAddress = GetIpAddress();\n            var success = await _authService.ResetPasswordAsync(request, ipAddress);\n            \n            if (!success)\n            {\n                return BadRequest(new { message = \"Invalid or expired reset token\" });\n            }\n            \n            return Ok(new { message = \"Password reset successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during password reset\");\n            return StatusCode(500, new { message = \"An error occurred during password reset\" });\n        }\n    }\n\n    /// <summary>\n    /// Change password for authenticated user\n    /// </summary>\n    [Authorize]\n    [HttpPost(\"change-password\")]\n    public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordRequestDto request)\n    {\n        try\n        {\n            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _authService.ChangePasswordAsync(userId, request);\n            \n            if (!success)\n            {\n                return BadRequest(new { message = \"Current password is incorrect\" });\n            }\n            \n            return Ok(new { message = \"Password changed successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during password change\");\n            return StatusCode(500, new { message = \"An error occurred while changing password\" });\n        }\n    }\n\n    /// <summary>\n    /// Get current user information\n    /// </summary>\n    [Authorize]\n    [HttpGet(\"me\")]\n    public async Task<ActionResult<UserDto>> GetCurrentUser()\n    {\n        try\n        {\n            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var user = await _authService.GetUserAsync(userId);\n            if (user == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(user);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting current user\");\n            return StatusCode(500, new { message = \"An error occurred while getting user information\" });\n        }\n    }\n\n    /// <summary>\n    /// Update user profile\n    /// </summary>\n    [Authorize]\n    [HttpPut(\"profile\")]\n    public async Task<ActionResult<UserDto>> UpdateProfile([FromBody] UserProfileDto profile)\n    {\n        try\n        {\n            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var updatedUser = await _authService.UpdateProfileAsync(userId, profile);\n            if (updatedUser == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(updatedUser);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating user profile\");\n            return StatusCode(500, new { message = \"An error occurred while updating profile\" });\n        }\n    }\n\n    /// <summary>\n    /// Validate access token\n    /// </summary>\n    [HttpPost(\"validate\")]\n    public async Task<IActionResult> ValidateToken([FromBody] string token)\n    {\n        try\n        {\n            var isValid = await _authService.ValidateTokenAsync(token);\n            return Ok(new { isValid });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error validating token\");\n            return StatusCode(500, new { message = \"An error occurred during token validation\" });\n        }\n    }\n\n    private void SetRefreshTokenCookie(string refreshToken)\n    {\n        var cookieOptions = new CookieOptions\n        {\n            HttpOnly = true,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Secure = true,\n            SameSite = SameSiteMode.Strict,\n            Path = \"/api/auth\"\n        };\n        \n        Response.Cookies.Append(\"refreshToken\", refreshToken, cookieOptions);\n    }\n\n    private string GetIpAddress()\n    {\n        return Request.Headers.ContainsKey(\"X-Forwarded-For\") \n            ? Request.Headers[\"X-Forwarded-For\"].ToString().Split(',')[0].Trim()\n            : HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n    }\n}","size_bytes":12664},"backend/src/Services/DSAGrind.Auth.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Auth.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Auth.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":394},"backend/src/Services/DSAGrind.Auth.API/Controllers/OAuthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing DSAGrind.Auth.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Auth.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class OAuthController : ControllerBase\n{\n    private readonly IAuthService _authService;\n    private readonly ILogger<OAuthController> _logger;\n\n    public OAuthController(IAuthService authService, ILogger<OAuthController> logger)\n    {\n        _authService = authService;\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Get OAuth authorization URL for the specified provider\n    /// </summary>\n    [HttpGet(\"{provider}/url\")]\n    public async Task<ActionResult<string>> GetAuthorizationUrl(string provider, [FromQuery] string? state = null)\n    {\n        try\n        {\n            if (!IsValidProvider(provider))\n            {\n                return BadRequest(new { message = \"Unsupported OAuth provider\" });\n            }\n\n            var stateValue = state ?? Guid.NewGuid().ToString();\n            var authUrl = await _authService.GenerateOAuthUrlAsync(provider, stateValue);\n            \n            return Ok(new { url = authUrl, state = stateValue });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating OAuth URL for provider {Provider}\", provider);\n            return StatusCode(500, new { message = \"An error occurred while generating authorization URL\" });\n        }\n    }\n\n    /// <summary>\n    /// Handle OAuth callback and authenticate user\n    /// </summary>\n    [HttpPost(\"{provider}/callback\")]\n    public async Task<ActionResult<AuthResponseDto>> HandleCallback(string provider, [FromBody] OAuthCallbackDto callback)\n    {\n        try\n        {\n            if (!IsValidProvider(provider))\n            {\n                return BadRequest(new { message = \"Unsupported OAuth provider\" });\n            }\n\n            if (!string.IsNullOrEmpty(callback.Error))\n            {\n                _logger.LogWarning(\"OAuth error for provider {Provider}: {Error} - {ErrorDescription}\", \n                    provider, callback.Error, callback.ErrorDescription);\n                return BadRequest(new { message = $\"OAuth error: {callback.ErrorDescription ?? callback.Error}\" });\n            }\n\n            if (string.IsNullOrEmpty(callback.Code))\n            {\n                return BadRequest(new { message = \"Authorization code is required\" });\n            }\n\n            var ipAddress = GetIpAddress();\n            var result = await _authService.OAuthLoginAsync(provider, callback.Code, callback.State, ipAddress);\n            \n            SetRefreshTokenCookie(result.RefreshToken);\n            \n            return Ok(result);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            return Unauthorized(new { message = ex.Message });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error during OAuth callback for provider {Provider}\", provider);\n            return StatusCode(500, new { message = \"An error occurred during OAuth authentication\" });\n        }\n    }\n\n    /// <summary>\n    /// Get supported OAuth providers\n    /// </summary>\n    [HttpGet(\"providers\")]\n    public IActionResult GetProviders()\n    {\n        var providers = new[]\n        {\n            new { name = \"google\", displayName = \"Google\", icon = \"google\" },\n            new { name = \"github\", displayName = \"GitHub\", icon = \"github\" }\n        };\n        \n        return Ok(providers);\n    }\n\n    private static bool IsValidProvider(string provider)\n    {\n        var validProviders = new[] { \"google\", \"github\" };\n        return validProviders.Contains(provider.ToLower());\n    }\n\n    private void SetRefreshTokenCookie(string refreshToken)\n    {\n        var cookieOptions = new CookieOptions\n        {\n            HttpOnly = true,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Secure = true,\n            SameSite = SameSiteMode.Strict,\n            Path = \"/api/auth\"\n        };\n        \n        Response.Cookies.Append(\"refreshToken\", refreshToken, cookieOptions);\n    }\n\n    private string GetIpAddress()\n    {\n        return Request.Headers.ContainsKey(\"X-Forwarded-For\") \n            ? Request.Headers[\"X-Forwarded-For\"].ToString().Split(',')[0].Trim()\n            : HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n    }\n}","size_bytes":4350},"backend/src/Services/DSAGrind.Auth.API/Mappings/MappingProfile.cs":{"content":"using AutoMapper;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Auth.API.Mappings;\n\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        // User mappings\n        CreateMap<User, UserDto>();\n        CreateMap<UserProfile, UserProfileDto>();\n        CreateMap<UserPreferences, UserPreferencesDto>();\n        CreateMap<NotificationSettings, NotificationSettingsDto>();\n\n        // Reverse mappings\n        CreateMap<UserDto, User>();\n        CreateMap<UserProfileDto, UserProfile>();\n        CreateMap<UserPreferencesDto, UserPreferences>();\n        CreateMap<NotificationSettingsDto, NotificationSettings>();\n\n        // Registration mapping\n        CreateMap<RegisterRequestDto, User>()\n            .ForMember(dest => dest.Id, opt => opt.Ignore())\n            .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())\n            .ForMember(dest => dest.Role, opt => opt.MapFrom(src => \"user\"))\n            .ForMember(dest => dest.IsEmailVerified, opt => opt.MapFrom(src => false))\n            .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow))\n            .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => DateTime.UtcNow));\n    }\n}","size_bytes":1235},"backend/src/Services/DSAGrind.Auth.API/Repositories/IUserRepository.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Auth.API.Repositories;\n\npublic interface IUserRepository : IMongoRepository<User>\n{\n    Task<User?> GetByEmailAsync(string email, CancellationToken cancellationToken = default);\n    Task<User?> GetByUsernameAsync(string username, CancellationToken cancellationToken = default);\n    Task<User?> GetByGitHubIdAsync(string githubId, CancellationToken cancellationToken = default);\n    Task<User?> GetByGoogleIdAsync(string googleId, CancellationToken cancellationToken = default);\n    Task<User?> GetByEmailVerificationTokenAsync(string token, CancellationToken cancellationToken = default);\n    Task<User?> GetByResetPasswordTokenAsync(string token, CancellationToken cancellationToken = default);\n    Task<bool> IsEmailTakenAsync(string email, CancellationToken cancellationToken = default);\n    Task<bool> IsUsernameTakenAsync(string username, CancellationToken cancellationToken = default);\n    Task<bool> UpdateRefreshTokensAsync(string userId, List<RefreshToken> refreshTokens, CancellationToken cancellationToken = default);\n    Task<bool> RevokeRefreshTokenAsync(string userId, string refreshToken, string revokedByIp, string? replacedByToken = null, CancellationToken cancellationToken = default);\n    Task<bool> RevokeAllRefreshTokensAsync(string userId, string revokedByIp, CancellationToken cancellationToken = default);\n    Task<List<RefreshToken>> GetActiveRefreshTokensAsync(string userId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateEmailVerificationAsync(string userId, bool isVerified, string? token = null, CancellationToken cancellationToken = default);\n    Task<bool> UpdatePasswordResetTokenAsync(string userId, string? token, DateTime? expires, CancellationToken cancellationToken = default);\n    Task<bool> UpdatePasswordAsync(string userId, string passwordHash, CancellationToken cancellationToken = default);\n    Task<bool> UpdateLastLoginAsync(string userId, DateTime lastLogin, CancellationToken cancellationToken = default);\n    Task<bool> UpdateProfileAsync(string userId, UserProfile profile, CancellationToken cancellationToken = default);\n}","size_bytes":2183},"backend/src/Services/DSAGrind.Auth.API/Repositories/UserRepository.cs":{"content":"using MongoDB.Driver;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Repositories;\nusing DSAGrind.Common.Configuration;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Auth.API.Repositories;\n\npublic class UserRepository : MongoRepository<User>, IUserRepository\n{\n    public UserRepository(IMongoDatabase database) : base(database, \"users\")\n    {\n        // Create indexes for better performance\n        CreateIndexesAsync().GetAwaiter().GetResult();\n    }\n\n    private async Task CreateIndexesAsync()\n    {\n        var emailIndex = Builders<User>.IndexKeys.Ascending(u => u.Email);\n        var usernameIndex = Builders<User>.IndexKeys.Ascending(u => u.Username);\n        var githubIdIndex = Builders<User>.IndexKeys.Ascending(u => u.GitHubId);\n        var googleIdIndex = Builders<User>.IndexKeys.Ascending(u => u.GoogleId);\n        var emailVerificationTokenIndex = Builders<User>.IndexKeys.Ascending(u => u.EmailVerificationToken);\n        var resetPasswordTokenIndex = Builders<User>.IndexKeys.Ascending(u => u.ResetPasswordToken);\n\n        await _collection.Indexes.CreateManyAsync(new[]\n        {\n            new CreateIndexModel<User>(emailIndex, new CreateIndexOptions { Unique = true }),\n            new CreateIndexModel<User>(usernameIndex, new CreateIndexOptions { Unique = true }),\n            new CreateIndexModel<User>(githubIdIndex, new CreateIndexOptions { Sparse = true }),\n            new CreateIndexModel<User>(googleIdIndex, new CreateIndexOptions { Sparse = true }),\n            new CreateIndexModel<User>(emailVerificationTokenIndex, new CreateIndexOptions { Sparse = true }),\n            new CreateIndexModel<User>(resetPasswordTokenIndex, new CreateIndexOptions { Sparse = true })\n        });\n    }\n\n    public async Task<User?> GetByEmailAsync(string email, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.Email == email, cancellationToken);\n    }\n\n    public async Task<User?> GetByUsernameAsync(string username, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.Username == username, cancellationToken);\n    }\n\n    public async Task<User?> GetByGitHubIdAsync(string githubId, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.GitHubId == githubId, cancellationToken);\n    }\n\n    public async Task<User?> GetByGoogleIdAsync(string googleId, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.GoogleId == googleId, cancellationToken);\n    }\n\n    public async Task<User?> GetByEmailVerificationTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.EmailVerificationToken == token, cancellationToken);\n    }\n\n    public async Task<User?> GetByResetPasswordTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        return await GetAsync(u => u.ResetPasswordToken == token && u.ResetPasswordExpires > DateTime.UtcNow, cancellationToken);\n    }\n\n    public async Task<bool> IsEmailTakenAsync(string email, CancellationToken cancellationToken = default)\n    {\n        return await ExistsAsync(u => u.Email == email, cancellationToken);\n    }\n\n    public async Task<bool> IsUsernameTakenAsync(string username, CancellationToken cancellationToken = default)\n    {\n        return await ExistsAsync(u => u.Username == username, cancellationToken);\n    }\n\n    public async Task<bool> UpdateRefreshTokensAsync(string userId, List<RefreshToken> refreshTokens, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.RefreshTokens, refreshTokens)\n            .Set(u => u.UpdatedAt, DateTime.UtcNow);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> RevokeRefreshTokenAsync(string userId, string refreshToken, string revokedByIp, string? replacedByToken = null, CancellationToken cancellationToken = default)\n    {\n        var user = await GetByIdAsync(userId, cancellationToken);\n        if (user == null) return false;\n\n        var token = user.RefreshTokens.FirstOrDefault(rt => rt.Token == refreshToken);\n        if (token == null) return false;\n\n        token.Revoked = DateTime.UtcNow;\n        token.RevokedByIp = revokedByIp;\n        token.ReplacedByToken = replacedByToken;\n\n        return await UpdateRefreshTokensAsync(userId, user.RefreshTokens, cancellationToken);\n    }\n\n    public async Task<bool> RevokeAllRefreshTokensAsync(string userId, string revokedByIp, CancellationToken cancellationToken = default)\n    {\n        var user = await GetByIdAsync(userId, cancellationToken);\n        if (user == null) return false;\n\n        foreach (var token in user.RefreshTokens.Where(rt => rt.IsActive))\n        {\n            token.Revoked = DateTime.UtcNow;\n            token.RevokedByIp = revokedByIp;\n        }\n\n        return await UpdateRefreshTokensAsync(userId, user.RefreshTokens, cancellationToken);\n    }\n\n    public async Task<List<RefreshToken>> GetActiveRefreshTokensAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        var user = await GetByIdAsync(userId, cancellationToken);\n        return user?.RefreshTokens.Where(rt => rt.IsActive).ToList() ?? new List<RefreshToken>();\n    }\n\n    public async Task<bool> UpdateEmailVerificationAsync(string userId, bool isVerified, string? token = null, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.IsEmailVerified, isVerified)\n            .Set(u => u.EmailVerificationToken, token)\n            .Set(u => u.UpdatedAt, DateTime.UtcNow);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdatePasswordResetTokenAsync(string userId, string? token, DateTime? expires, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.ResetPasswordToken, token)\n            .Set(u => u.ResetPasswordExpires, expires)\n            .Set(u => u.UpdatedAt, DateTime.UtcNow);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdatePasswordAsync(string userId, string passwordHash, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.PasswordHash, passwordHash)\n            .Set(u => u.ResetPasswordToken, null)\n            .Set(u => u.ResetPasswordExpires, null)\n            .Set(u => u.UpdatedAt, DateTime.UtcNow);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdateLastLoginAsync(string userId, DateTime lastLogin, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.UpdatedAt, lastLogin);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdateProfileAsync(string userId, UserProfile profile, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<User>.Filter.Eq(u => u.Id, userId);\n        var update = Builders<User>.Update\n            .Set(u => u.Profile, profile)\n            .Set(u => u.UpdatedAt, DateTime.UtcNow);\n\n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n}","size_bytes":8210},"backend/src/Services/DSAGrind.Auth.API/Services/AuthService.cs":{"content":"using System.Security.Cryptography;\nusing AutoMapper;\nusing DSAGrind.Auth.API.Repositories;\nusing DSAGrind.Auth.API.Services;\nusing DSAGrind.Common.Services;\nusing DSAGrind.Events;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Models.Entities;\nusing Microsoft.Extensions.Logging;\nusing BCrypt.Net;\n\nnamespace DSAGrind.Auth.API.Services;\n\npublic class AuthService : IAuthService\n{\n    private readonly IUserRepository _userRepository;\n    private readonly IJwtService _jwtService;\n    private readonly IOAuthService _oauthService;\n    private readonly IEmailService _emailService;\n    private readonly IKafkaService _kafkaService;\n    private readonly IRedisService _redisService;\n    private readonly IMapper _mapper;\n    private readonly ILogger<AuthService> _logger;\n\n    public AuthService(\n        IUserRepository userRepository,\n        IJwtService jwtService,\n        IOAuthService oauthService,\n        IEmailService emailService,\n        IKafkaService kafkaService,\n        IRedisService redisService,\n        IMapper mapper,\n        ILogger<AuthService> logger)\n    {\n        _userRepository = userRepository;\n        _jwtService = jwtService;\n        _oauthService = oauthService;\n        _emailService = emailService;\n        _kafkaService = kafkaService;\n        _redisService = redisService;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<AuthResponseDto> LoginAsync(LoginRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        // Check rate limiting\n        var rateLimitKey = $\"login_attempts:{request.Email}\";\n        var isRateLimited = await _redisService.IsRateLimitedAsync(rateLimitKey, 5, TimeSpan.FromMinutes(15), cancellationToken);\n        if (isRateLimited)\n        {\n            throw new UnauthorizedAccessException(\"Too many login attempts. Please try again later.\");\n        }\n\n        var user = await _userRepository.GetByEmailAsync(request.Email, cancellationToken);\n        if (user == null || string.IsNullOrEmpty(user.PasswordHash) || !BCrypt.Net.BCrypt.Verify(request.Password, user.PasswordHash))\n        {\n            await _redisService.IncrementAsync(rateLimitKey, cancellationToken: cancellationToken);\n            await _redisService.ExpireAsync(rateLimitKey, TimeSpan.FromMinutes(15), cancellationToken);\n            throw new UnauthorizedAccessException(\"Invalid email or password.\");\n        }\n\n        // Clear rate limiting on successful login\n        await _redisService.DeleteAsync(rateLimitKey, cancellationToken);\n\n        if (!user.IsEmailVerified)\n        {\n            throw new UnauthorizedAccessException(\"Email not verified. Please check your email for verification instructions.\");\n        }\n\n        // Generate tokens\n        var accessToken = _jwtService.GenerateAccessToken(user);\n        var refreshToken = GenerateRefreshToken();\n\n        // Add refresh token to user\n        var newRefreshToken = new RefreshToken\n        {\n            Token = refreshToken,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Created = DateTime.UtcNow,\n            CreatedByIp = ipAddress\n        };\n\n        user.RefreshTokens.Add(newRefreshToken);\n\n        // Remove old refresh tokens (keep only the latest 5)\n        user.RefreshTokens = user.RefreshTokens\n            .Where(rt => rt.IsActive)\n            .OrderByDescending(rt => rt.Created)\n            .Take(5)\n            .ToList();\n\n        await _userRepository.UpdateRefreshTokensAsync(user.Id, user.RefreshTokens, cancellationToken);\n        await _userRepository.UpdateLastLoginAsync(user.Id, DateTime.UtcNow, cancellationToken);\n\n        // Publish login event\n        await _kafkaService.PublishAsync(\"user-events\", new UserLoginEvent\n        {\n            UserId = user.Id,\n            Username = user.Username,\n            IpAddress = ipAddress,\n            UserAgent = string.Empty, // Will be set by controller\n            LoginMethod = \"password\"\n        }, cancellationToken: cancellationToken);\n\n        // Cache user data\n        await _redisService.SetAsync($\"user:{user.Id}\", _mapper.Map<UserDto>(user), TimeSpan.FromMinutes(30), cancellationToken);\n\n        return new AuthResponseDto\n        {\n            AccessToken = accessToken,\n            RefreshToken = refreshToken,\n            User = _mapper.Map<UserDto>(user),\n            ExpiresAt = DateTime.UtcNow.AddMinutes(15)\n        };\n    }\n\n    public async Task<AuthResponseDto> RegisterAsync(RegisterRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        // Check if email or username already exists\n        if (await _userRepository.IsEmailTakenAsync(request.Email, cancellationToken))\n        {\n            throw new InvalidOperationException(\"Email is already registered.\");\n        }\n\n        if (await _userRepository.IsUsernameTakenAsync(request.Username, cancellationToken))\n        {\n            throw new InvalidOperationException(\"Username is already taken.\");\n        }\n\n        // Hash password\n        var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.Password);\n\n        // Generate email verification token\n        var verificationToken = GenerateSecureToken();\n\n        var user = new User\n        {\n            Username = request.Username,\n            Email = request.Email,\n            PasswordHash = passwordHash,\n            FirstName = request.FirstName,\n            LastName = request.LastName,\n            EmailVerificationToken = verificationToken,\n            Role = \"user\",\n            CreatedAt = DateTime.UtcNow,\n            UpdatedAt = DateTime.UtcNow\n        };\n\n        await _userRepository.CreateAsync(user, cancellationToken);\n\n        // Send verification email\n        await _emailService.SendEmailVerificationAsync(user.Email, user.Username, verificationToken, cancellationToken);\n\n        // Publish registration event\n        await _kafkaService.PublishAsync(\"user-events\", new UserRegisteredEvent\n        {\n            UserId = user.Id,\n            Username = user.Username,\n            Email = user.Email,\n            Role = user.Role\n        }, cancellationToken: cancellationToken);\n\n        _logger.LogInformation(\"User registered successfully: {Email}\", user.Email);\n\n        // Generate tokens for immediate login (but mark as unverified)\n        var accessToken = _jwtService.GenerateAccessToken(user);\n        var refreshToken = GenerateRefreshToken();\n\n        var newRefreshToken = new RefreshToken\n        {\n            Token = refreshToken,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Created = DateTime.UtcNow,\n            CreatedByIp = ipAddress\n        };\n\n        user.RefreshTokens.Add(newRefreshToken);\n        await _userRepository.UpdateRefreshTokensAsync(user.Id, user.RefreshTokens, cancellationToken);\n\n        return new AuthResponseDto\n        {\n            AccessToken = accessToken,\n            RefreshToken = refreshToken,\n            User = _mapper.Map<UserDto>(user),\n            ExpiresAt = DateTime.UtcNow.AddMinutes(15)\n        };\n    }\n\n    public async Task<AuthResponseDto> RefreshTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var users = await _userRepository.GetAllAsync(cancellationToken);\n        var user = users.FirstOrDefault(u => u.RefreshTokens.Any(rt => rt.Token == refreshToken));\n\n        if (user == null)\n        {\n            throw new UnauthorizedAccessException(\"Invalid refresh token.\");\n        }\n\n        var token = user.RefreshTokens.Single(rt => rt.Token == refreshToken);\n\n        if (!token.IsActive)\n        {\n            throw new UnauthorizedAccessException(\"Invalid refresh token.\");\n        }\n\n        // Replace old refresh token with new one\n        var newRefreshToken = GenerateRefreshToken();\n        token.Revoked = DateTime.UtcNow;\n        token.RevokedByIp = ipAddress;\n        token.ReplacedByToken = newRefreshToken;\n\n        var newToken = new RefreshToken\n        {\n            Token = newRefreshToken,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Created = DateTime.UtcNow,\n            CreatedByIp = ipAddress\n        };\n\n        user.RefreshTokens.Add(newToken);\n        await _userRepository.UpdateRefreshTokensAsync(user.Id, user.RefreshTokens, cancellationToken);\n\n        // Generate new access token\n        var accessToken = _jwtService.GenerateAccessToken(user);\n\n        // Update cache\n        await _redisService.SetAsync($\"user:{user.Id}\", _mapper.Map<UserDto>(user), TimeSpan.FromMinutes(30), cancellationToken);\n\n        return new AuthResponseDto\n        {\n            AccessToken = accessToken,\n            RefreshToken = newRefreshToken,\n            User = _mapper.Map<UserDto>(user),\n            ExpiresAt = DateTime.UtcNow.AddMinutes(15)\n        };\n    }\n\n    public async Task<bool> RevokeTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var users = await _userRepository.GetAllAsync(cancellationToken);\n        var user = users.FirstOrDefault(u => u.RefreshTokens.Any(rt => rt.Token == refreshToken));\n\n        if (user == null)\n        {\n            return false;\n        }\n\n        var success = await _userRepository.RevokeRefreshTokenAsync(user.Id, refreshToken, ipAddress, cancellationToken: cancellationToken);\n\n        if (success)\n        {\n            await _kafkaService.PublishAsync(\"user-events\", new RefreshTokenRevokedEvent\n            {\n                UserId = user.Id,\n                RefreshToken = refreshToken,\n                RevokedByIp = ipAddress\n            }, cancellationToken: cancellationToken);\n\n            // Clear user cache\n            await _redisService.DeleteAsync($\"user:{user.Id}\", cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> RevokeAllTokensAsync(string userId, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var success = await _userRepository.RevokeAllRefreshTokensAsync(userId, ipAddress, cancellationToken);\n\n        if (success)\n        {\n            // Clear user cache\n            await _redisService.DeleteAsync($\"user:{userId}\", cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> VerifyEmailAsync(string token, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByEmailVerificationTokenAsync(token, cancellationToken);\n        if (user == null)\n        {\n            return false;\n        }\n\n        var success = await _userRepository.UpdateEmailVerificationAsync(user.Id, true, null, cancellationToken);\n\n        if (success)\n        {\n            await _kafkaService.PublishAsync(\"user-events\", new UserEmailVerifiedEvent\n            {\n                UserId = user.Id,\n                Email = user.Email\n            }, cancellationToken: cancellationToken);\n\n            await _emailService.SendWelcomeEmailAsync(user.Email, user.Username, cancellationToken);\n\n            // Clear user cache to force refresh\n            await _redisService.DeleteAsync($\"user:{user.Id}\", cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> ResendEmailVerificationAsync(string email, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByEmailAsync(email, cancellationToken);\n        if (user == null || user.IsEmailVerified)\n        {\n            return false;\n        }\n\n        var verificationToken = GenerateSecureToken();\n        await _userRepository.UpdateEmailVerificationAsync(user.Id, false, verificationToken, cancellationToken);\n        await _emailService.SendEmailVerificationAsync(user.Email, user.Username, verificationToken, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> ForgotPasswordAsync(string email, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByEmailAsync(email, cancellationToken);\n        if (user == null)\n        {\n            // Don't reveal that email doesn't exist\n            return true;\n        }\n\n        var resetToken = GenerateSecureToken();\n        var expires = DateTime.UtcNow.AddHours(1);\n\n        await _userRepository.UpdatePasswordResetTokenAsync(user.Id, resetToken, expires, cancellationToken);\n        await _emailService.SendPasswordResetAsync(user.Email, user.Username, resetToken, cancellationToken);\n\n        await _kafkaService.PublishAsync(\"user-events\", new PasswordResetRequestedEvent\n        {\n            UserId = user.Id,\n            Email = user.Email,\n            ResetToken = resetToken,\n            IpAddress = ipAddress\n        }, cancellationToken: cancellationToken);\n\n        return true;\n    }\n\n    public async Task<bool> ResetPasswordAsync(ResetPasswordRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByResetPasswordTokenAsync(request.Token, cancellationToken);\n        if (user == null)\n        {\n            return false;\n        }\n\n        var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.NewPassword);\n        var success = await _userRepository.UpdatePasswordAsync(user.Id, passwordHash, cancellationToken);\n\n        if (success)\n        {\n            // Revoke all refresh tokens for security\n            await _userRepository.RevokeAllRefreshTokensAsync(user.Id, ipAddress, cancellationToken);\n\n            await _kafkaService.PublishAsync(\"user-events\", new PasswordResetCompletedEvent\n            {\n                UserId = user.Id,\n                Email = user.Email,\n                IpAddress = ipAddress\n            }, cancellationToken: cancellationToken);\n\n            // Clear user cache\n            await _redisService.DeleteAsync($\"user:{user.Id}\", cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> ChangePasswordAsync(string userId, ChangePasswordRequestDto request, CancellationToken cancellationToken = default)\n    {\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null || string.IsNullOrEmpty(user.PasswordHash))\n        {\n            return false;\n        }\n\n        if (!BCrypt.Net.BCrypt.Verify(request.CurrentPassword, user.PasswordHash))\n        {\n            return false;\n        }\n\n        var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.NewPassword);\n        var success = await _userRepository.UpdatePasswordAsync(user.Id, passwordHash, cancellationToken);\n\n        if (success)\n        {\n            // Clear user cache\n            await _redisService.DeleteAsync($\"user:{userId}\", cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        // Try cache first\n        var cachedUser = await _redisService.GetAsync<UserDto>($\"user:{userId}\", cancellationToken);\n        if (cachedUser != null)\n        {\n            return cachedUser;\n        }\n\n        var user = await _userRepository.GetByIdAsync(userId, cancellationToken);\n        if (user == null)\n        {\n            return null;\n        }\n\n        var userDto = _mapper.Map<UserDto>(user);\n\n        // Cache for 30 minutes\n        await _redisService.SetAsync($\"user:{userId}\", userDto, TimeSpan.FromMinutes(30), cancellationToken);\n\n        return userDto;\n    }\n\n    public async Task<UserDto?> UpdateProfileAsync(string userId, UserProfileDto profile, CancellationToken cancellationToken = default)\n    {\n        var userProfile = _mapper.Map<UserProfile>(profile);\n        var success = await _userRepository.UpdateProfileAsync(userId, userProfile, cancellationToken);\n\n        if (!success)\n        {\n            return null;\n        }\n\n        // Clear cache to force refresh\n        await _redisService.DeleteAsync($\"user:{userId}\", cancellationToken);\n\n        return await GetUserAsync(userId, cancellationToken);\n    }\n\n    public async Task<AuthResponseDto> OAuthLoginAsync(string provider, string code, string state, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        var oauthUser = await _oauthService.ExchangeCodeForUserAsync(provider, code, state, cancellationToken);\n        if (oauthUser == null)\n        {\n            throw new UnauthorizedAccessException(\"OAuth authentication failed.\");\n        }\n\n        User? user = provider.ToLower() switch\n        {\n            \"google\" => await _userRepository.GetByGoogleIdAsync(oauthUser.Id, cancellationToken),\n            \"github\" => await _userRepository.GetByGitHubIdAsync(oauthUser.Id, cancellationToken),\n            _ => null\n        };\n\n        if (user == null)\n        {\n            // Check if user exists with same email\n            user = await _userRepository.GetByEmailAsync(oauthUser.Email, cancellationToken);\n\n            if (user != null)\n            {\n                // Link OAuth account to existing user\n                switch (provider.ToLower())\n                {\n                    case \"google\":\n                        user.GoogleId = oauthUser.Id;\n                        break;\n                    case \"github\":\n                        user.GitHubId = oauthUser.Id;\n                        break;\n                }\n\n                user.IsEmailVerified = true; // OAuth emails are pre-verified\n                await _userRepository.UpdateAsync(user.Id, user, cancellationToken);\n            }\n            else\n            {\n                // Create new user\n                user = new User\n                {\n                    Username = oauthUser.Username ?? oauthUser.Email.Split('@')[0],\n                    Email = oauthUser.Email,\n                    FirstName = oauthUser.FirstName,\n                    LastName = oauthUser.LastName,\n                    Avatar = oauthUser.Avatar,\n                    IsEmailVerified = true,\n                    Role = \"user\",\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                };\n\n                switch (provider.ToLower())\n                {\n                    case \"google\":\n                        user.GoogleId = oauthUser.Id;\n                        break;\n                    case \"github\":\n                        user.GitHubId = oauthUser.Id;\n                        break;\n                }\n\n                // Ensure username is unique\n                var baseUsername = user.Username;\n                int counter = 1;\n                while (await _userRepository.IsUsernameTakenAsync(user.Username, cancellationToken))\n                {\n                    user.Username = $\"{baseUsername}{counter}\";\n                    counter++;\n                }\n\n                await _userRepository.CreateAsync(user, cancellationToken);\n\n                await _kafkaService.PublishAsync(\"user-events\", new UserRegisteredEvent\n                {\n                    UserId = user.Id,\n                    Username = user.Username,\n                    Email = user.Email,\n                    Role = user.Role\n                }, cancellationToken: cancellationToken);\n            }\n        }\n\n        // Generate tokens\n        var accessToken = _jwtService.GenerateAccessToken(user);\n        var refreshToken = GenerateRefreshToken();\n\n        var newRefreshToken = new RefreshToken\n        {\n            Token = refreshToken,\n            Expires = DateTime.UtcNow.AddDays(7),\n            Created = DateTime.UtcNow,\n            CreatedByIp = ipAddress\n        };\n\n        user.RefreshTokens.Add(newRefreshToken);\n        await _userRepository.UpdateRefreshTokensAsync(user.Id, user.RefreshTokens, cancellationToken);\n        await _userRepository.UpdateLastLoginAsync(user.Id, DateTime.UtcNow, cancellationToken);\n\n        await _kafkaService.PublishAsync(\"user-events\", new UserLoginEvent\n        {\n            UserId = user.Id,\n            Username = user.Username,\n            IpAddress = ipAddress,\n            LoginMethod = provider\n        }, cancellationToken: cancellationToken);\n\n        // Cache user data\n        await _redisService.SetAsync($\"user:{user.Id}\", _mapper.Map<UserDto>(user), TimeSpan.FromMinutes(30), cancellationToken);\n\n        return new AuthResponseDto\n        {\n            AccessToken = accessToken,\n            RefreshToken = refreshToken,\n            User = _mapper.Map<UserDto>(user),\n            ExpiresAt = DateTime.UtcNow.AddMinutes(15)\n        };\n    }\n\n    public async Task<string> GenerateOAuthUrlAsync(string provider, string state, CancellationToken cancellationToken = default)\n    {\n        return await _oauthService.GenerateAuthorizationUrlAsync(provider, state, cancellationToken);\n    }\n\n    public async Task<bool> ValidateTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        return _jwtService.ValidateToken(token);\n    }\n\n    public async Task<string?> GetUserIdFromTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        return _jwtService.GetUserIdFromToken(token);\n    }\n\n    private static string GenerateRefreshToken()\n    {\n        var randomNumber = new byte[64];\n        using var rng = RandomNumberGenerator.Create();\n        rng.GetBytes(randomNumber);\n        return Convert.ToBase64String(randomNumber);\n    }\n\n    private static string GenerateSecureToken()\n    {\n        var randomNumber = new byte[32];\n        using var rng = RandomNumberGenerator.Create();\n        rng.GetBytes(randomNumber);\n        return Convert.ToBase64String(randomNumber).Replace(\"+\", \"-\").Replace(\"/\", \"_\").Replace(\"=\", \"\");\n    }\n}","size_bytes":21653},"backend/src/Services/DSAGrind.Auth.API/Services/IAuthService.cs":{"content":"using DSAGrind.Models.DTOs;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Auth.API.Services;\n\npublic interface IAuthService\n{\n    Task<AuthResponseDto> LoginAsync(LoginRequestDto request, string ipAddress, CancellationToken cancellationToken = default);\n    Task<AuthResponseDto> RegisterAsync(RegisterRequestDto request, string ipAddress, CancellationToken cancellationToken = default);\n    Task<AuthResponseDto> RefreshTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default);\n    Task<bool> RevokeTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default);\n    Task<bool> RevokeAllTokensAsync(string userId, string ipAddress, CancellationToken cancellationToken = default);\n    Task<bool> VerifyEmailAsync(string token, CancellationToken cancellationToken = default);\n    Task<bool> ResendEmailVerificationAsync(string email, CancellationToken cancellationToken = default);\n    Task<bool> ForgotPasswordAsync(string email, string ipAddress, CancellationToken cancellationToken = default);\n    Task<bool> ResetPasswordAsync(ResetPasswordRequestDto request, string ipAddress, CancellationToken cancellationToken = default);\n    Task<bool> ChangePasswordAsync(string userId, ChangePasswordRequestDto request, CancellationToken cancellationToken = default);\n    Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default);\n    Task<UserDto?> UpdateProfileAsync(string userId, UserProfileDto profile, CancellationToken cancellationToken = default);\n    Task<AuthResponseDto> OAuthLoginAsync(string provider, string code, string state, string ipAddress, CancellationToken cancellationToken = default);\n    Task<string> GenerateOAuthUrlAsync(string provider, string state, CancellationToken cancellationToken = default);\n    Task<bool> ValidateTokenAsync(string token, CancellationToken cancellationToken = default);\n    Task<string?> GetUserIdFromTokenAsync(string token, CancellationToken cancellationToken = default);\n}","size_bytes":2032},"backend/src/Services/DSAGrind.Auth.API/Services/IOAuthService.cs":{"content":"namespace DSAGrind.Auth.API.Services;\n\npublic interface IOAuthService\n{\n    Task<string> GenerateAuthorizationUrlAsync(string provider, string state, CancellationToken cancellationToken = default);\n    Task<OAuthUser?> ExchangeCodeForUserAsync(string provider, string code, string state, CancellationToken cancellationToken = default);\n    Task<OAuthUser?> GetGoogleUserAsync(string accessToken, CancellationToken cancellationToken = default);\n    Task<OAuthUser?> GetGitHubUserAsync(string accessToken, CancellationToken cancellationToken = default);\n}\n\npublic class OAuthUser\n{\n    public string Id { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string? Username { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string? Avatar { get; set; }\n    public Dictionary<string, object> RawData { get; set; } = new();\n}\n\npublic class OAuthTokenResponse\n{\n    public string AccessToken { get; set; } = string.Empty;\n    public string? RefreshToken { get; set; }\n    public string TokenType { get; set; } = \"Bearer\";\n    public int ExpiresIn { get; set; }\n    public string? Scope { get; set; }\n}","size_bytes":1197},"backend/src/Services/DSAGrind.Auth.API/Services/MockAuthService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Auth.API.Services;\n\npublic class MockAuthService : IAuthService\n{\n    private readonly ILogger<MockAuthService> _logger;\n\n    public MockAuthService(ILogger<MockAuthService> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task<AuthResponseDto> LoginAsync(LoginRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock login for email: {Email}\", request.Email);\n        \n        return Task.FromResult(new AuthResponseDto\n        {\n            AccessToken = \"mock-jwt-token\",\n            RefreshToken = \"mock-refresh-token\",\n            User = new UserDto\n            {\n                Id = \"mock-user-id\",\n                Username = request.Email,\n                Email = request.Email,\n                Role = \"User\",\n                IsEmailVerified = true,\n                SubscriptionPlan = \"Free\",\n                SubscriptionStatus = \"Active\",\n                CreatedAt = DateTime.UtcNow\n            },\n            ExpiresAt = DateTime.UtcNow.AddHours(1)\n        });\n    }\n\n    public Task<AuthResponseDto> RegisterAsync(RegisterRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock register for email: {Email}\", request.Email);\n        \n        return Task.FromResult(new AuthResponseDto\n        {\n            AccessToken = \"mock-jwt-token\",\n            RefreshToken = \"mock-refresh-token\",\n            User = new UserDto\n            {\n                Id = \"mock-new-user-id\",\n                Username = request.Username,\n                Email = request.Email,\n                FirstName = request.FirstName,\n                LastName = request.LastName,\n                Role = \"User\",\n                IsEmailVerified = false,\n                SubscriptionPlan = \"Free\",\n                SubscriptionStatus = \"Active\",\n                CreatedAt = DateTime.UtcNow\n            },\n            ExpiresAt = DateTime.UtcNow.AddHours(1)\n        });\n    }\n\n    public Task<AuthResponseDto> RefreshTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock refresh token\");\n        \n        return Task.FromResult(new AuthResponseDto\n        {\n            AccessToken = \"mock-new-jwt-token\",\n            RefreshToken = \"mock-new-refresh-token\",\n            User = new UserDto\n            {\n                Id = \"mock-user-id\",\n                Username = \"mock-user\",\n                Email = \"mock@example.com\",\n                Role = \"User\",\n                IsEmailVerified = true,\n                SubscriptionPlan = \"Free\",\n                SubscriptionStatus = \"Active\",\n                CreatedAt = DateTime.UtcNow\n            },\n            ExpiresAt = DateTime.UtcNow.AddHours(1)\n        });\n    }\n\n    public Task<bool> RevokeTokenAsync(string refreshToken, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock revoke token\");\n        return Task.FromResult(true);\n    }\n\n    public Task<UserDto?> GetUserAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock get user for user: {UserId}\", userId);\n        \n        return Task.FromResult<UserDto?>(new UserDto\n        {\n            Id = userId,\n            Username = \"mock-user\",\n            Email = \"mock@example.com\",\n            FirstName = \"Mock\",\n            LastName = \"User\",\n            Role = \"User\",\n            IsEmailVerified = true,\n            SubscriptionPlan = \"Free\",\n            SubscriptionStatus = \"Active\",\n            CreatedAt = DateTime.UtcNow,\n            Profile = new UserProfileDto\n            {\n                Bio = \"This is a mock user profile for development\",\n                Location = \"Mock City\",\n                Website = \"https://mock-website.com\"\n            }\n        });\n    }\n\n    public Task<UserDto?> UpdateProfileAsync(string userId, UserProfileDto profile, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock update profile for user: {UserId}\", userId);\n        \n        return Task.FromResult<UserDto?>(new UserDto\n        {\n            Id = userId,\n            Username = \"mock-user\",\n            Email = \"mock@example.com\",\n            FirstName = \"Mock\",\n            LastName = \"User\",\n            Role = \"User\",\n            IsEmailVerified = true,\n            SubscriptionPlan = \"Free\",\n            SubscriptionStatus = \"Active\",\n            CreatedAt = DateTime.UtcNow,\n            Profile = profile\n        });\n    }\n\n    public Task<bool> ChangePasswordAsync(string userId, ChangePasswordRequestDto request, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock change password for user: {UserId}\", userId);\n        return Task.FromResult(true);\n    }\n\n    public Task<bool> VerifyEmailAsync(string token, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock verify email with token: {Token}\", token);\n        return Task.FromResult(true);\n    }\n\n    public Task<bool> ForgotPasswordAsync(string email, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock forgot password for email: {Email}\", email);\n        return Task.FromResult(true);\n    }\n\n    public Task<bool> ResetPasswordAsync(ResetPasswordRequestDto request, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock reset password\");\n        return Task.FromResult(true);\n    }\n\n    public Task<bool> RevokeAllTokensAsync(string userId, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock revoke all tokens for user: {UserId}\", userId);\n        return Task.FromResult(true);\n    }\n\n    public Task<bool> ResendEmailVerificationAsync(string email, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock resend email verification for email: {Email}\", email);\n        return Task.FromResult(true);\n    }\n\n    public Task<AuthResponseDto> OAuthLoginAsync(string provider, string code, string state, string ipAddress, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock OAuth login for provider: {Provider}\", provider);\n        \n        return Task.FromResult(new AuthResponseDto\n        {\n            AccessToken = \"mock-oauth-jwt-token\",\n            RefreshToken = \"mock-oauth-refresh-token\",\n            User = new UserDto\n            {\n                Id = \"mock-oauth-user-id\",\n                Username = \"mock-oauth-user\",\n                Email = \"oauth@example.com\",\n                Role = \"User\",\n                IsEmailVerified = true,\n                SubscriptionPlan = \"Free\",\n                SubscriptionStatus = \"Active\",\n                CreatedAt = DateTime.UtcNow\n            },\n            ExpiresAt = DateTime.UtcNow.AddHours(1)\n        });\n    }\n\n    public Task<string> GenerateOAuthUrlAsync(string provider, string state, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock generate OAuth URL for provider: {Provider}\", provider);\n        return Task.FromResult($\"https://mock-oauth-{provider}.com/auth?state={state}\");\n    }\n\n    public Task<bool> ValidateTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock validate token\");\n        return Task.FromResult(true);\n    }\n\n    public Task<string?> GetUserIdFromTokenAsync(string token, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Mock get user ID from token\");\n        return Task.FromResult<string?>(\"mock-user-id\");\n    }\n}","size_bytes":7834},"backend/src/Services/DSAGrind.Auth.API/Services/OAuthService.cs":{"content":"using System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\nusing DSAGrind.Common.Services;\n\nnamespace DSAGrind.Auth.API.Services;\n\npublic class OAuthService : IOAuthService\n{\n    private readonly OAuthSettings _oauthSettings;\n    private readonly IRedisService _redisService;\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<OAuthService> _logger;\n\n    public OAuthService(\n        IOptions<OAuthSettings> oauthSettings,\n        IRedisService redisService,\n        HttpClient httpClient,\n        ILogger<OAuthService> logger)\n    {\n        _oauthSettings = oauthSettings.Value;\n        _redisService = redisService;\n        _httpClient = httpClient;\n        _logger = logger;\n    }\n\n    public async Task<string> GenerateAuthorizationUrlAsync(string provider, string state, CancellationToken cancellationToken = default)\n    {\n        // Store state in Redis for validation (expires in 10 minutes)\n        await _redisService.SetAsync($\"oauth_state:{state}\", provider, TimeSpan.FromMinutes(10), cancellationToken);\n\n        return provider.ToLower() switch\n        {\n            \"google\" => GenerateGoogleAuthUrl(state),\n            \"github\" => GenerateGitHubAuthUrl(state),\n            _ => throw new ArgumentException($\"Unsupported OAuth provider: {provider}\")\n        };\n    }\n\n    public async Task<OAuthUser?> ExchangeCodeForUserAsync(string provider, string code, string state, CancellationToken cancellationToken = default)\n    {\n        // Validate state\n        var storedProvider = await _redisService.GetAsync<string>($\"oauth_state:{state}\", cancellationToken);\n        if (string.IsNullOrEmpty(storedProvider))\n        {\n            _logger.LogWarning(\"Invalid OAuth state: {State}\", state);\n            return null;\n        }\n\n        // Clean up state after validation\n        await _redisService.DeleteAsync($\"oauth_state:{state}\", cancellationToken);\n\n        return provider.ToLower() switch\n        {\n            \"google\" => await ExchangeGoogleCodeAsync(code, cancellationToken),\n            \"github\" => await ExchangeGitHubCodeAsync(code, cancellationToken),\n            _ => null\n        };\n    }\n\n    public async Task<OAuthUser?> GetGoogleUserAsync(string accessToken, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = \n                new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", accessToken);\n\n            var userResponse = await _httpClient.GetAsync(\"https://www.googleapis.com/oauth2/v2/userinfo\", cancellationToken);\n            \n            if (!userResponse.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"Failed to get Google user info: {StatusCode}\", userResponse.StatusCode);\n                return null;\n            }\n\n            var userJson = await userResponse.Content.ReadAsStringAsync(cancellationToken);\n            using var userDoc = JsonDocument.Parse(userJson);\n            var root = userDoc.RootElement;\n\n            return new OAuthUser\n            {\n                Id = root.GetProperty(\"id\").GetString() ?? string.Empty,\n                Email = root.GetProperty(\"email\").GetString() ?? string.Empty,\n                FirstName = root.TryGetProperty(\"given_name\", out var givenName) ? givenName.GetString() : null,\n                LastName = root.TryGetProperty(\"family_name\", out var familyName) ? familyName.GetString() : null,\n                Avatar = root.TryGetProperty(\"picture\", out var picture) ? picture.GetString() : null,\n                RawData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJson) ?? new()\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting Google user info\");\n            return null;\n        }\n        finally\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = null;\n        }\n    }\n\n    public async Task<OAuthUser?> GetGitHubUserAsync(string accessToken, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = \n                new System.Net.Http.Headers.AuthenticationHeaderValue(\"token\", accessToken);\n            _httpClient.DefaultRequestHeaders.UserAgent.ParseAdd(\"DSAGrind/1.0\");\n\n            var userResponse = await _httpClient.GetAsync(\"https://api.github.com/user\", cancellationToken);\n            \n            if (!userResponse.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"Failed to get GitHub user info: {StatusCode}\", userResponse.StatusCode);\n                return null;\n            }\n\n            var userJson = await userResponse.Content.ReadAsStringAsync(cancellationToken);\n            using var userDoc = JsonDocument.Parse(userJson);\n            var root = userDoc.RootElement;\n\n            // Get primary email (GitHub might not provide email in user endpoint)\n            var email = root.TryGetProperty(\"email\", out var emailProp) && !emailProp.ValueKind.Equals(JsonValueKind.Null) \n                ? emailProp.GetString() \n                : await GetGitHubPrimaryEmailAsync(accessToken, cancellationToken);\n\n            var fullName = root.TryGetProperty(\"name\", out var nameProp) ? nameProp.GetString() : null;\n            var nameParts = fullName?.Split(' ', 2);\n\n            return new OAuthUser\n            {\n                Id = root.GetProperty(\"id\").GetInt32().ToString(),\n                Email = email ?? string.Empty,\n                Username = root.TryGetProperty(\"login\", out var login) ? login.GetString() : null,\n                FirstName = nameParts?.Length > 0 ? nameParts[0] : null,\n                LastName = nameParts?.Length > 1 ? nameParts[1] : null,\n                Avatar = root.TryGetProperty(\"avatar_url\", out var avatar) ? avatar.GetString() : null,\n                RawData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJson) ?? new()\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting GitHub user info\");\n            return null;\n        }\n        finally\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = null;\n            _httpClient.DefaultRequestHeaders.UserAgent.Clear();\n        }\n    }\n\n    private string GenerateGoogleAuthUrl(string state)\n    {\n        var googleSettings = _oauthSettings.Google;\n        var queryParams = new StringBuilder();\n        queryParams.Append($\"response_type=code\");\n        queryParams.Append($\"&client_id={googleSettings.ClientId}\");\n        queryParams.Append($\"&redirect_uri={Uri.EscapeDataString(googleSettings.RedirectUri)}\");\n        queryParams.Append($\"&scope={Uri.EscapeDataString(googleSettings.Scope)}\");\n        queryParams.Append($\"&state={state}\");\n        queryParams.Append(\"&access_type=offline\");\n        queryParams.Append(\"&include_granted_scopes=true\");\n\n        return $\"https://accounts.google.com/o/oauth2/v2/auth?{queryParams}\";\n    }\n\n    private string GenerateGitHubAuthUrl(string state)\n    {\n        var githubSettings = _oauthSettings.GitHub;\n        var queryParams = new StringBuilder();\n        queryParams.Append($\"response_type=code\");\n        queryParams.Append($\"&client_id={githubSettings.ClientId}\");\n        queryParams.Append($\"&redirect_uri={Uri.EscapeDataString(githubSettings.RedirectUri)}\");\n        queryParams.Append($\"&scope={Uri.EscapeDataString(githubSettings.Scope)}\");\n        queryParams.Append($\"&state={state}\");\n\n        return $\"https://github.com/login/oauth/authorize?{queryParams}\";\n    }\n\n    private async Task<OAuthUser?> ExchangeGoogleCodeAsync(string code, CancellationToken cancellationToken)\n    {\n        try\n        {\n            var googleSettings = _oauthSettings.Google;\n\n            // Exchange code for access token\n            var tokenRequest = new Dictionary<string, string>\n            {\n                { \"code\", code },\n                { \"client_id\", googleSettings.ClientId },\n                { \"client_secret\", googleSettings.ClientSecret },\n                { \"redirect_uri\", googleSettings.RedirectUri },\n                { \"grant_type\", \"authorization_code\" }\n            };\n\n            var tokenResponse = await _httpClient.PostAsync(\"https://oauth2.googleapis.com/token\", \n                new FormUrlEncodedContent(tokenRequest), cancellationToken);\n\n            if (!tokenResponse.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"Failed to exchange Google code for token: {StatusCode}\", tokenResponse.StatusCode);\n                return null;\n            }\n\n            var tokenJson = await tokenResponse.Content.ReadAsStringAsync(cancellationToken);\n            using var tokenDoc = JsonDocument.Parse(tokenJson);\n            var accessToken = tokenDoc.RootElement.GetProperty(\"access_token\").GetString();\n\n            if (string.IsNullOrEmpty(accessToken))\n            {\n                _logger.LogError(\"No access token received from Google\");\n                return null;\n            }\n\n            return await GetGoogleUserAsync(accessToken, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error exchanging Google OAuth code\");\n            return null;\n        }\n    }\n\n    private async Task<OAuthUser?> ExchangeGitHubCodeAsync(string code, CancellationToken cancellationToken)\n    {\n        try\n        {\n            var githubSettings = _oauthSettings.GitHub;\n\n            // Exchange code for access token\n            var tokenRequest = new Dictionary<string, string>\n            {\n                { \"code\", code },\n                { \"client_id\", githubSettings.ClientId },\n                { \"client_secret\", githubSettings.ClientSecret },\n                { \"redirect_uri\", githubSettings.RedirectUri }\n            };\n\n            _httpClient.DefaultRequestHeaders.Accept.Clear();\n            _httpClient.DefaultRequestHeaders.Accept.Add(\n                new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            var tokenResponse = await _httpClient.PostAsync(\"https://github.com/login/oauth/access_token\", \n                new FormUrlEncodedContent(tokenRequest), cancellationToken);\n\n            if (!tokenResponse.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"Failed to exchange GitHub code for token: {StatusCode}\", tokenResponse.StatusCode);\n                return null;\n            }\n\n            var tokenJson = await tokenResponse.Content.ReadAsStringAsync(cancellationToken);\n            using var tokenDoc = JsonDocument.Parse(tokenJson);\n            var accessToken = tokenDoc.RootElement.GetProperty(\"access_token\").GetString();\n\n            if (string.IsNullOrEmpty(accessToken))\n            {\n                _logger.LogError(\"No access token received from GitHub\");\n                return null;\n            }\n\n            _httpClient.DefaultRequestHeaders.Accept.Clear();\n            return await GetGitHubUserAsync(accessToken, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error exchanging GitHub OAuth code\");\n            return null;\n        }\n    }\n\n    private async Task<string?> GetGitHubPrimaryEmailAsync(string accessToken, CancellationToken cancellationToken)\n    {\n        try\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = \n                new System.Net.Http.Headers.AuthenticationHeaderValue(\"token\", accessToken);\n            _httpClient.DefaultRequestHeaders.UserAgent.ParseAdd(\"DSAGrind/1.0\");\n\n            var emailResponse = await _httpClient.GetAsync(\"https://api.github.com/user/emails\", cancellationToken);\n            \n            if (!emailResponse.IsSuccessStatusCode)\n            {\n                return null;\n            }\n\n            var emailJson = await emailResponse.Content.ReadAsStringAsync(cancellationToken);\n            using var emailDoc = JsonDocument.Parse(emailJson);\n            \n            foreach (var emailElement in emailDoc.RootElement.EnumerateArray())\n            {\n                if (emailElement.TryGetProperty(\"primary\", out var isPrimary) && isPrimary.GetBoolean())\n                {\n                    return emailElement.GetProperty(\"email\").GetString();\n                }\n            }\n\n            // If no primary email found, return the first verified email\n            foreach (var emailElement in emailDoc.RootElement.EnumerateArray())\n            {\n                if (emailElement.TryGetProperty(\"verified\", out var isVerified) && isVerified.GetBoolean())\n                {\n                    return emailElement.GetProperty(\"email\").GetString();\n                }\n            }\n\n            return null;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting GitHub primary email\");\n            return null;\n        }\n        finally\n        {\n            _httpClient.DefaultRequestHeaders.Authorization = null;\n            _httpClient.DefaultRequestHeaders.UserAgent.Clear();\n        }\n    }\n}","size_bytes":13156},"backend/src/Services/DSAGrind.Gateway.API/Controllers/AIController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AIController : ControllerBase\n{\n    private readonly ILogger<AIController> _logger;\n\n    public AIController(ILogger<AIController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Generate hints for a coding problem\n    /// </summary>\n    [HttpPost(\"hint\")]\n    public async Task<IActionResult> GenerateHint([FromBody] HintRequest request)\n    {\n        _logger.LogInformation(\"Generating hint for problem: {ProblemId}, level: {Level}\", request.ProblemId, request.HintLevel);\n        \n        await Task.Delay(500); // Simulate AI processing time\n        \n        var hints = new Dictionary<int, string>\n        {\n            [1] = \"Think about what data structure would help you look up values efficiently. Consider the relationship between the target and each number in the array.\",\n            [2] = \"A hash table (dictionary) can store numbers you've seen before. As you iterate through the array, check if the complement (target - current number) exists in your hash table.\",\n            [3] = \"Here's the approach: Create a hash map, iterate through the array once, and for each number, check if (target - number) exists in the map. If yes, return the indices. If no, add the current number and its index to the map.\"\n        };\n        \n        var hint = hints.GetValueOrDefault(request.HintLevel, \"Try breaking down the problem into smaller steps and think about the most efficient approach.\");\n        \n        return Ok(new { hint, hintLevel = request.HintLevel, nextHintAvailable = request.HintLevel < 3 });\n    }\n\n    /// <summary>\n    /// Explain a solution with detailed analysis\n    /// </summary>\n    [HttpPost(\"explain\")]\n    public async Task<IActionResult> ExplainSolution([FromBody] ExplainRequest request)\n    {\n        _logger.LogInformation(\"Explaining solution for problem: {ProblemId}\", request.ProblemId);\n        \n        await Task.Delay(800); // Simulate AI processing time\n        \n        return Ok(new\n        {\n            explanation = \"This solution uses a Hash Map approach:\\n\\n\" +\n                         \"1. **Algorithm**: We iterate through the array once, and for each element, we check if its complement (target - current element) exists in our hash map.\\n\\n\" +\n                         \"2. **Time Complexity**: O(n) - We traverse the array exactly once\\n\\n\" +\n                         \"3. **Space Complexity**: O(n) - In the worst case, we store all n elements in the hash map\\n\\n\" +\n                         \"4. **Key Insight**: Instead of checking all pairs (which would be O(n²)), we use the hash map to achieve O(1) lookups\",\n            timeComplexity = \"O(n)\",\n            spaceComplexity = \"O(n)\",\n            approach = \"Hash Map\"\n        });\n    }\n\n    /// <summary>\n    /// Analyze code for complexity and potential improvements\n    /// </summary>\n    [HttpPost(\"analyze\")]\n    public async Task<IActionResult> AnalyzeCode([FromBody] AnalyzeRequest request)\n    {\n        _logger.LogInformation(\"Analyzing code for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        await Task.Delay(600);\n        \n        return Ok(new\n        {\n            analysis = new\n            {\n                timeComplexity = \"O(n)\",\n                spaceComplexity = \"O(n)\",\n                codeQuality = \"Good\",\n                readability = 8.5m,\n                efficiency = 9.2m\n            },\n            suggestions = new[]\n            {\n                \"Consider edge cases: empty array, single element, no solution\",\n                \"Add input validation for null arrays\",\n                \"Variable names are clear and descriptive - good practice\"\n            }\n        });\n    }\n}\n\npublic class HintRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string UserCode { get; set; } = string.Empty;\n    public int HintLevel { get; set; } = 1;\n}\n\npublic class ExplainRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n}\n\npublic class AnalyzeRequest\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n}","size_bytes":4365},"backend/src/Services/DSAGrind.Gateway.API/Controllers/AuthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AuthController : ControllerBase\n{\n    private readonly ILogger<AuthController> _logger;\n\n    public AuthController(ILogger<AuthController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Authenticate user with email and password\n    /// </summary>\n    [HttpPost(\"login\")]\n    public async Task<IActionResult> Login([FromBody] LoginRequest request)\n    {\n        _logger.LogInformation(\"Login attempt for email: {Email}\", request.Email);\n        \n        await Task.Delay(100); // Simulate processing\n        \n        return Ok(new\n        {\n            userId = \"demo-user-123\",\n            username = request.Email?.Split('@')[0] ?? \"demouser\",\n            email = request.Email,\n            token = \"demo-jwt-token-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            refreshToken = \"demo-refresh-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            expiresAt = DateTime.UtcNow.AddHours(24),\n            message = \"Login successful (demo mode)\"\n        });\n    }\n\n    /// <summary>\n    /// Register a new user account\n    /// </summary>\n    [HttpPost(\"register\")]\n    public async Task<IActionResult> Register([FromBody] RegisterRequest request)\n    {\n        _logger.LogInformation(\"Registration attempt for email: {Email}\", request.Email);\n        \n        await Task.Delay(150); // Simulate processing\n        \n        return Ok(new\n        {\n            userId = \"demo-new-user-\" + Guid.NewGuid().ToString(\"N\")[..8],\n            username = request.Username,\n            email = request.Email,\n            token = \"demo-jwt-token-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            refreshToken = \"demo-refresh-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            expiresAt = DateTime.UtcNow.AddHours(24),\n            message = \"Registration successful (demo mode)\"\n        });\n    }\n\n    /// <summary>\n    /// Get user profile\n    /// </summary>\n    [HttpGet(\"profile\")]\n    public async Task<IActionResult> GetProfile()\n    {\n        _logger.LogInformation(\"Get profile request\");\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            userId = \"demo-user-123\",\n            username = \"demouser\",\n            email = \"demo@dsagrind.com\",\n            firstName = \"Demo\",\n            lastName = \"User\",\n            bio = \"This is a demo user profile for testing purposes\",\n            location = \"Demo City\",\n            website = \"https://dsagrind.com\",\n            joinedDate = DateTime.UtcNow.AddDays(-30),\n            problemsSolved = 42,\n            submissionsCount = 156,\n            acceptanceRate = 78.5m\n        });\n    }\n}\n\npublic class LoginRequest\n{\n    public string Email { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n}\n\npublic class RegisterRequest\n{\n    public string Username { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n}","size_bytes":3191},"backend/src/Services/DSAGrind.Gateway.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    private readonly ILogger<HealthController> _logger;\n    private readonly HttpClient _httpClient;\n\n    public HealthController(ILogger<HealthController> logger, HttpClient httpClient)\n    {\n        _logger = logger;\n        _httpClient = httpClient;\n    }\n\n    [HttpGet]\n    public async Task<ActionResult> GetHealth()\n    {\n        var services = new Dictionary<string, object>\n        {\n            { \"gateway\", \"healthy\" },\n            { \"timestamp\", DateTime.UtcNow }\n        };\n\n        var serviceChecks = new Dictionary<string, string>\n        {\n            { \"auth\", \"http://localhost:8080/api/health\" },\n            { \"problems\", \"http://localhost:5001/api/health\" },\n            { \"submissions\", \"http://localhost:5002/api/health\" },\n            { \"ai\", \"http://localhost:5003/api/health\" },\n            { \"search\", \"http://localhost:5004/api/health\" },\n            { \"admin\", \"http://localhost:5005/api/health\" },\n            { \"payments\", \"http://localhost:5006/api/health\" }\n        };\n\n        foreach (var service in serviceChecks)\n        {\n            try\n            {\n                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));\n                var response = await _httpClient.GetAsync(service.Value, cts.Token);\n                services[service.Key] = response.IsSuccessStatusCode ? \"healthy\" : \"unhealthy\";\n            }\n            catch\n            {\n                services[service.Key] = \"unavailable\";\n            }\n        }\n\n        var allHealthy = services.Values.OfType<string>().All(status => status == \"healthy\");\n        \n        if (allHealthy)\n        {\n            return Ok(new { status = \"healthy\", services });\n        }\n        \n        return StatusCode(503, new { status = \"degraded\", services });\n    }\n\n    [HttpGet(\"ready\")]\n    public ActionResult GetReadiness()\n    {\n        return Ok(new { status = \"ready\", timestamp = DateTime.UtcNow });\n    }\n}","size_bytes":2098},"backend/src/Services/DSAGrind.Gateway.API/Controllers/ProblemsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProblemsController : ControllerBase\n{\n    private readonly ILogger<ProblemsController> _logger;\n\n    public ProblemsController(ILogger<ProblemsController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Get all problems with optional filtering and pagination\n    /// </summary>\n    [HttpGet]\n    public async Task<IActionResult> GetProblems(\n        [FromQuery] string? search = null,\n        [FromQuery] string? difficulty = null,\n        [FromQuery] string? tag = null,\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 20)\n    {\n        _logger.LogInformation(\"Get problems: search={Search}, difficulty={Difficulty}, page={Page}\", search, difficulty, page);\n        \n        await Task.Delay(100);\n\n        var problems = new[]\n        {\n            new {\n                id = \"prob-1\",\n                title = \"Two Sum\",\n                slug = \"two-sum\",\n                difficulty = \"Easy\",\n                tags = new[] { \"Array\", \"Hash Table\" },\n                acceptanceRate = 85.2m,\n                totalSubmissions = 1250000,\n                acceptedSubmissions = 1065000,\n                description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n                sampleInput = \"[2,7,11,15], target = 9\",\n                sampleOutput = \"[0,1]\"\n            },\n            new {\n                id = \"prob-2\", \n                title = \"Reverse Linked List\",\n                slug = \"reverse-linked-list\",\n                difficulty = \"Easy\",\n                tags = new[] { \"Linked List\", \"Recursion\" },\n                acceptanceRate = 78.5m,\n                totalSubmissions = 890000,\n                acceptedSubmissions = 698650,\n                description = \"Given the head of a singly linked list, reverse the list, and return the reversed list.\",\n                sampleInput = \"head = [1,2,3,4,5]\",\n                sampleOutput = \"[5,4,3,2,1]\"\n            },\n            new {\n                id = \"prob-3\",\n                title = \"Valid Parentheses\",\n                slug = \"valid-parentheses\", \n                difficulty = \"Easy\",\n                tags = new[] { \"String\", \"Stack\" },\n                acceptanceRate = 92.1m,\n                totalSubmissions = 756000,\n                acceptedSubmissions = 696216,\n                description = \"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\",\n                sampleInput = \"s = \\\"()\\\"\",\n                sampleOutput = \"true\"\n            },\n            new {\n                id = \"prob-4\",\n                title = \"Binary Search\",\n                slug = \"binary-search\",\n                difficulty = \"Easy\", \n                tags = new[] { \"Array\", \"Binary Search\" },\n                acceptanceRate = 89.7m,\n                totalSubmissions = 532000,\n                acceptedSubmissions = 477204,\n                description = \"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.\",\n                sampleInput = \"nums = [-1,0,3,5,9,12], target = 9\",\n                sampleOutput = \"4\"\n            }\n        };\n\n        var filteredProblems = problems.AsEnumerable();\n        \n        if (!string.IsNullOrEmpty(difficulty))\n            filteredProblems = filteredProblems.Where(p => p.difficulty.Equals(difficulty, StringComparison.OrdinalIgnoreCase));\n            \n        if (!string.IsNullOrEmpty(search))\n            filteredProblems = filteredProblems.Where(p => p.title.Contains(search, StringComparison.OrdinalIgnoreCase));\n            \n        if (!string.IsNullOrEmpty(tag))\n            filteredProblems = filteredProblems.Where(p => p.tags.Any(t => t.Equals(tag, StringComparison.OrdinalIgnoreCase)));\n\n        var result = filteredProblems.ToList();\n        \n        return Ok(new\n        {\n            problems = result,\n            totalCount = result.Count,\n            pageNumber = page,\n            pageSize = pageSize,\n            totalPages = (int)Math.Ceiling((double)result.Count / pageSize)\n        });\n    }\n\n    /// <summary>\n    /// Get a specific problem by ID\n    /// </summary>\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetProblem(string id)\n    {\n        _logger.LogInformation(\"Get problem: {ProblemId}\", id);\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            id = id,\n            title = \"Two Sum\",\n            slug = \"two-sum\",\n            difficulty = \"Easy\",\n            tags = new[] { \"Array\", \"Hash Table\" },\n            description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\n\\nYou can return the answer in any order.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\",\n            sampleInput = \"[2,7,11,15], target = 9\",\n            sampleOutput = \"[0,1]\",\n            explanation = \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\n            constraints = new[]\n            {\n                \"2 <= nums.length <= 10^4\",\n                \"-10^9 <= nums[i] <= 10^9\",\n                \"-10^9 <= target <= 10^9\",\n                \"Only one valid answer exists.\"\n            },\n            codeTemplate = \"class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n    }\\n}\",\n            acceptanceRate = 85.2m,\n            totalSubmissions = 1250000,\n            acceptedSubmissions = 1065000\n        });\n    }\n}","size_bytes":5767},"backend/src/Services/DSAGrind.Gateway.API/Controllers/SubmissionsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SubmissionsController : ControllerBase\n{\n    private readonly ILogger<SubmissionsController> _logger;\n\n    public SubmissionsController(ILogger<SubmissionsController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Submit code for execution and testing\n    /// </summary>\n    [HttpPost]\n    public async Task<IActionResult> SubmitCode([FromBody] SubmissionRequest request)\n    {\n        _logger.LogInformation(\"Code submission for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        // Simulate code execution time\n        await Task.Delay(Random.Shared.Next(800, 2000));\n        \n        var isAccepted = Random.Shared.Next(1, 101) <= 78; // 78% pass rate\n        \n        var result = new\n        {\n            submissionId = Guid.NewGuid().ToString(),\n            status = isAccepted ? \"Accepted\" : Random.Shared.Next(1, 5) switch\n            {\n                1 => \"Wrong Answer\",\n                2 => \"Time Limit Exceeded\", \n                3 => \"Runtime Error\",\n                4 => \"Compilation Error\",\n                _ => \"Memory Limit Exceeded\"\n            },\n            runtime = Random.Shared.Next(8, 150) + \"ms\",\n            memory = Random.Shared.Next(10, 45) + \".2MB\",\n            passedTestCases = isAccepted ? \"15/15\" : $\"{Random.Shared.Next(5, 14)}/15\",\n            submittedAt = DateTime.UtcNow,\n            code = request.Code,\n            language = request.Language,\n            problemId = request.ProblemId\n        };\n        \n        if (isAccepted)\n        {\n            return Ok(new\n            {\n                result,\n                message = \"Congratulations! Your solution has been accepted.\",\n                performance = new\n                {\n                    runtimePercentile = Random.Shared.Next(45, 98) + Random.Shared.NextSingle(),\n                    memoryPercentile = Random.Shared.Next(35, 95) + Random.Shared.NextSingle(),\n                    timeComplexity = \"O(n)\",\n                    spaceComplexity = \"O(n)\"\n                }\n            });\n        }\n        else\n        {\n            return Ok(new\n            {\n                result,\n                error = new\n                {\n                    testCase = \"Test Case \" + Random.Shared.Next(3, 12),\n                    input = \"[3,2,4], target = 6\",\n                    expected = \"[1,2]\", \n                    actual = result.status == \"Wrong Answer\" ? \"[0,2]\" : null,\n                    errorMessage = result.status switch\n                    {\n                        \"Time Limit Exceeded\" => \"Your solution exceeded the time limit of 1000ms\",\n                        \"Runtime Error\" => \"IndexOutOfRangeException: Index was outside the bounds of the array\",\n                        \"Compilation Error\" => \"CS1002: Syntax error, ';' expected\",\n                        \"Memory Limit Exceeded\" => \"Your solution used more than 256MB of memory\",\n                        _ => \"Your output doesn't match the expected result for the given input\"\n                    }\n                }\n            });\n        }\n    }\n\n    /// <summary>\n    /// Run code against sample test cases\n    /// </summary>\n    [HttpPost(\"run\")]\n    public async Task<IActionResult> RunCode([FromBody] RunCodeRequest request)\n    {\n        _logger.LogInformation(\"Running code for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        await Task.Delay(Random.Shared.Next(300, 800));\n        \n        var testResults = new[]\n        {\n            new {\n                testCase = 1,\n                input = \"[2,7,11,15], target = 9\",\n                expected = \"[0,1]\",\n                actual = \"[0,1]\",\n                passed = true,\n                runtime = \"12ms\"\n            },\n            new {\n                testCase = 2, \n                input = \"[3,2,4], target = 6\",\n                expected = \"[1,2]\",\n                actual = \"[1,2]\",\n                passed = true,\n                runtime = \"8ms\"\n            },\n            new {\n                testCase = 3,\n                input = \"[3,3], target = 6\", \n                expected = \"[0,1]\",\n                actual = \"[0,1]\",\n                passed = true,\n                runtime = \"6ms\"\n            }\n        };\n        \n        var allPassed = testResults.All(t => t.passed);\n        \n        return Ok(new\n        {\n            success = allPassed,\n            testResults,\n            summary = new\n            {\n                totalTests = testResults.Length,\n                passedTests = testResults.Count(t => t.passed),\n                avgRuntime = testResults.Average(t => int.Parse(t.runtime.Replace(\"ms\", \"\"))) + \"ms\"\n            },\n            message = allPassed ? \"All test cases passed! Ready to submit.\" : \"Some test cases failed. Please review your code.\"\n        });\n    }\n\n    /// <summary>\n    /// Get user's submission history\n    /// </summary>\n    [HttpGet(\"history\")]\n    public async Task<IActionResult> GetSubmissionHistory([FromQuery] int page = 1, [FromQuery] int pageSize = 20)\n    {\n        _logger.LogInformation(\"Getting submission history: page={Page}\", page);\n        \n        await Task.Delay(150);\n        \n        var submissions = Enumerable.Range(1, 15).Select(i => new\n        {\n            id = $\"sub-{i}\",\n            problemTitle = $\"Problem {Random.Shared.Next(1, 100)}\",\n            status = Random.Shared.Next(1, 4) switch\n            {\n                1 => \"Accepted\",\n                2 => \"Wrong Answer\", \n                3 => \"Time Limit Exceeded\",\n                _ => \"Runtime Error\"\n            },\n            language = Random.Shared.Next(1, 4) switch\n            {\n                1 => \"C#\",\n                2 => \"Python\",\n                3 => \"JavaScript\", \n                _ => \"Java\"\n            },\n            runtime = Random.Shared.Next(8, 200) + \"ms\",\n            submittedAt = DateTime.UtcNow.AddDays(-Random.Shared.Next(0, 30))\n        }).ToArray();\n        \n        return Ok(new\n        {\n            submissions,\n            totalCount = submissions.Length,\n            pageNumber = page,\n            pageSize = pageSize,\n            acceptanceRate = Math.Round((double)submissions.Count(s => s.status == \"Accepted\") / submissions.Length * 100, 1)\n        });\n    }\n}\n\npublic class SubmissionRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\npublic class RunCodeRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}","size_bytes":6846},"backend/src/Services/DSAGrind.Gateway.API/Controllers/TestController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Gateway.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class TestController : ControllerBase\n{\n    [HttpGet(\"health\")]\n    public IActionResult Health()\n    {\n        return Ok(new { \n            status = \"healthy\", \n            service = \"DSAGrind Test API\", \n            timestamp = DateTime.UtcNow,\n            message = \"All systems operational!\" \n        });\n    }\n\n    [HttpGet(\"categories\")]\n    public IActionResult GetCategories()\n    {\n        var categories = new[]\n        {\n            new { id = \"1\", name = \"Arrays & Hashing\", slug = \"arrays-hashing\", freeQuestionLimit = 5, totalQuestions = 15 },\n            new { id = \"2\", name = \"Two Pointers\", slug = \"two-pointers\", freeQuestionLimit = 3, totalQuestions = 10 },\n            new { id = \"3\", name = \"Binary Search\", slug = \"binary-search\", freeQuestionLimit = 3, totalQuestions = 12 },\n            new { id = \"4\", name = \"Trees\", slug = \"trees\", freeQuestionLimit = 4, totalQuestions = 20 },\n            new { id = \"5\", name = \"Dynamic Programming\", slug = \"dynamic-programming\", freeQuestionLimit = 2, totalQuestions = 25 }\n        };\n        \n        return Ok(categories);\n    }\n\n    [HttpGet(\"problems\")]\n    public IActionResult GetProblems()\n    {\n        var problems = new[]\n        {\n            new { \n                id = \"1\", \n                title = \"Two Sum\", \n                slug = \"two-sum\",\n                difficulty = \"Easy\", \n                description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n                isPremium = false,\n                category = \"Arrays & Hashing\"\n            },\n            new { \n                id = \"2\", \n                title = \"Valid Palindrome\", \n                slug = \"valid-palindrome\",\n                difficulty = \"Easy\", \n                description = \"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward.\",\n                isPremium = false,\n                category = \"Two Pointers\"\n            },\n            new { \n                id = \"3\", \n                title = \"Binary Search\", \n                slug = \"binary-search\",\n                difficulty = \"Easy\", \n                description = \"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.\",\n                isPremium = false,\n                category = \"Binary Search\"\n            }\n        };\n        \n        return Ok(problems);\n    }\n\n    [HttpPost(\"auth/login\")]\n    public IActionResult Login([FromBody] object loginData)\n    {\n        return Ok(new { \n            message = \"Login endpoint working\",\n            token = \"test-jwt-token\",\n            user = new { id = \"1\", email = \"test@example.com\", username = \"testuser\" }\n        });\n    }\n\n    [HttpPost(\"auth/register\")]\n    public IActionResult Register([FromBody] object registerData)\n    {\n        return Ok(new { \n            message = \"Registration endpoint working\",\n            token = \"test-jwt-token\",\n            user = new { id = \"1\", email = \"test@example.com\", username = \"testuser\" }\n        });\n    }\n}","size_bytes":3336},"backend/src/Services/DSAGrind.MCP.API/Controllers/MCPController.cs":{"content":"using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing DSAGrind.MCP.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.MCP.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class MCPController : ControllerBase\n{\n    private readonly IMCPService _mcpService;\n    private readonly ILogger<MCPController> _logger;\n\n    public MCPController(IMCPService mcpService, ILogger<MCPController> logger)\n    {\n        _mcpService = mcpService;\n        _logger = logger;\n    }\n\n    [HttpPost(\"initialize\")]\n    public async Task<IActionResult> Initialize([FromBody] InitializeRequestDto request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Initializing MCP server for client: {ClientInfo}\", request.ClientInfo?.Name);\n            var response = await _mcpService.InitializeAsync(request);\n            return Ok(response);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error initializing MCP server\");\n            return StatusCode(500, new { error = \"Failed to initialize MCP server\" });\n        }\n    }\n\n    [HttpPost(\"tools/list\")]\n    public async Task<IActionResult> ListTools()\n    {\n        try\n        {\n            var tools = await _mcpService.ListToolsAsync();\n            return Ok(new { tools });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error listing MCP tools\");\n            return StatusCode(500, new { error = \"Failed to list tools\" });\n        }\n    }\n\n    [HttpPost(\"tools/call\")]\n    public async Task<IActionResult> CallTool([FromBody] ToolCallRequestDto request)\n    {\n        try\n        {\n            _logger.LogInformation(\"Calling tool: {ToolName}\", request.Name);\n            var result = await _mcpService.CallToolAsync(request);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error calling tool: {ToolName}\", request.Name);\n            return StatusCode(500, new { error = $\"Failed to call tool: {request.Name}\" });\n        }\n    }\n\n    [HttpPost(\"prompts/list\")]\n    public async Task<IActionResult> ListPrompts()\n    {\n        try\n        {\n            var prompts = await _mcpService.ListPromptsAsync();\n            return Ok(new { prompts });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error listing MCP prompts\");\n            return StatusCode(500, new { error = \"Failed to list prompts\" });\n        }\n    }\n\n    [HttpPost(\"prompts/get\")]\n    public async Task<IActionResult> GetPrompt([FromBody] GetPromptRequestDto request)\n    {\n        try\n        {\n            var prompt = await _mcpService.GetPromptAsync(request);\n            return Ok(prompt);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting prompt: {PromptName}\", request.Name);\n            return StatusCode(500, new { error = $\"Failed to get prompt: {request.Name}\" });\n        }\n    }\n\n    [HttpPost(\"resources/list\")]\n    public async Task<IActionResult> ListResources()\n    {\n        try\n        {\n            var resources = await _mcpService.ListResourcesAsync();\n            return Ok(new { resources });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error listing MCP resources\");\n            return StatusCode(500, new { error = \"Failed to list resources\" });\n        }\n    }\n\n    [HttpPost(\"resources/read\")]\n    public async Task<IActionResult> ReadResource([FromBody] ReadResourceRequestDto request)\n    {\n        try\n        {\n            var resource = await _mcpService.ReadResourceAsync(request);\n            return Ok(resource);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error reading resource: {ResourceUri}\", request.Uri);\n            return StatusCode(500, new { error = $\"Failed to read resource: {request.Uri}\" });\n        }\n    }\n}","size_bytes":3923},"backend/src/Services/DSAGrind.MCP.API/Services/IMCPService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.MCP.API.Services;\n\npublic interface IMCPService\n{\n    Task<InitializeResponseDto> InitializeAsync(InitializeRequestDto request);\n    Task<List<ToolDto>> ListToolsAsync();\n    Task<ToolCallResponseDto> CallToolAsync(ToolCallRequestDto request);\n    Task<List<PromptDto>> ListPromptsAsync();\n    Task<GetPromptResponseDto> GetPromptAsync(GetPromptRequestDto request);\n    Task<List<ResourceDto>> ListResourcesAsync();\n    Task<ReadResourceResponseDto> ReadResourceAsync(ReadResourceRequestDto request);\n}","size_bytes":550},"backend/src/Services/DSAGrind.MCP.API/Services/MCPService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.MCP.API.Services;\n\npublic class MCPService : IMCPService\n{\n    private readonly ILogger<MCPService> _logger;\n\n    public MCPService(ILogger<MCPService> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task<InitializeResponseDto> InitializeAsync(InitializeRequestDto request)\n    {\n        _logger.LogInformation(\"Initializing MCP server for client: {ClientName}\", request.ClientInfo?.Name);\n        \n        var response = new InitializeResponseDto\n        {\n            ProtocolVersion = \"2024-11-05\",\n            ServerInfo = new ServerInfoDto\n            {\n                Name = \"DSAGrind MCP Server\",\n                Version = \"1.0.0\"\n            },\n            Capabilities = new ServerCapabilitiesDto\n            {\n                Tools = new ToolsCapabilityDto { ListChanged = false },\n                Prompts = new PromptsCapabilityDto { ListChanged = false },\n                Resources = new ResourcesCapabilityDto { Subscribe = true, ListChanged = false },\n                Logging = new LoggingCapabilityDto()\n            }\n        };\n\n        return Task.FromResult(response);\n    }\n\n    public Task<List<ToolDto>> ListToolsAsync()\n    {\n        var tools = new List<ToolDto>\n        {\n            new ToolDto\n            {\n                Name = \"analyze_code\",\n                Description = \"Analyze code for complexity, patterns, and potential improvements\",\n                InputSchema = new { type = \"object\", properties = new { code = new { type = \"string\" }, language = new { type = \"string\" } } }\n            },\n            new ToolDto\n            {\n                Name = \"generate_test_cases\",\n                Description = \"Generate test cases for a given problem\",\n                InputSchema = new { type = \"object\", properties = new { problemDescription = new { type = \"string\" }, constraints = new { type = \"string\" } } }\n            },\n            new ToolDto\n            {\n                Name = \"code_review\",\n                Description = \"Perform code review and provide feedback\",\n                InputSchema = new { type = \"object\", properties = new { code = new { type = \"string\" }, language = new { type = \"string\" } } }\n            },\n            new ToolDto\n            {\n                Name = \"optimize_solution\",\n                Description = \"Suggest optimizations for existing code\",\n                InputSchema = new { type = \"object\", properties = new { code = new { type = \"string\" }, language = new { type = \"string\" } } }\n            }\n        };\n\n        return Task.FromResult(tools);\n    }\n\n    public async Task<ToolCallResponseDto> CallToolAsync(ToolCallRequestDto request)\n    {\n        _logger.LogInformation(\"Calling tool: {ToolName}\", request.Name);\n\n        var content = request.Name switch\n        {\n            \"analyze_code\" => await AnalyzeCodeAsync(request.Arguments),\n            \"generate_test_cases\" => await GenerateTestCasesAsync(request.Arguments),\n            \"code_review\" => await ReviewCodeAsync(request.Arguments),\n            \"optimize_solution\" => await OptimizeSolutionAsync(request.Arguments),\n            _ => throw new ArgumentException($\"Unknown tool: {request.Name}\")\n        };\n\n        return new ToolCallResponseDto\n        {\n            Content = new List<ContentDto>\n            {\n                new ContentDto\n                {\n                    Type = \"text\",\n                    Text = content\n                }\n            }\n        };\n    }\n\n    public Task<List<PromptDto>> ListPromptsAsync()\n    {\n        var prompts = new List<PromptDto>\n        {\n            new PromptDto\n            {\n                Name = \"algorithm_hint\",\n                Description = \"Generate algorithmic hints for coding problems\",\n                Arguments = new List<PromptArgumentDto>\n                {\n                    new PromptArgumentDto { Name = \"problem\", Description = \"The problem description\", Required = true },\n                    new PromptArgumentDto { Name = \"difficulty\", Description = \"Problem difficulty level\", Required = false }\n                }\n            },\n            new PromptDto\n            {\n                Name = \"code_explanation\",\n                Description = \"Explain code functionality and complexity\",\n                Arguments = new List<PromptArgumentDto>\n                {\n                    new PromptArgumentDto { Name = \"code\", Description = \"The code to explain\", Required = true },\n                    new PromptArgumentDto { Name = \"language\", Description = \"Programming language\", Required = true }\n                }\n            }\n        };\n\n        return Task.FromResult(prompts);\n    }\n\n    public async Task<GetPromptResponseDto> GetPromptAsync(GetPromptRequestDto request)\n    {\n        var content = request.Name switch\n        {\n            \"algorithm_hint\" => await GenerateAlgorithmHintAsync(request.Arguments),\n            \"code_explanation\" => await GenerateCodeExplanationAsync(request.Arguments),\n            _ => throw new ArgumentException($\"Unknown prompt: {request.Name}\")\n        };\n\n        return new GetPromptResponseDto\n        {\n            Messages = new List<PromptMessageDto>\n            {\n                new PromptMessageDto\n                {\n                    Role = \"user\",\n                    Content = new ContentDto\n                    {\n                        Type = \"text\",\n                        Text = content\n                    }\n                }\n            }\n        };\n    }\n\n    public Task<List<ResourceDto>> ListResourcesAsync()\n    {\n        var resources = new List<ResourceDto>\n        {\n            new ResourceDto\n            {\n                Uri = \"dsagrind://algorithms/\",\n                Name = \"Algorithm Reference\",\n                MimeType = \"application/json\",\n                Description = \"Comprehensive algorithm reference database\"\n            },\n            new ResourceDto\n            {\n                Uri = \"dsagrind://problems/\",\n                Name = \"Problem Database\",\n                MimeType = \"application/json\",\n                Description = \"Collection of coding problems and solutions\"\n            }\n        };\n\n        return Task.FromResult(resources);\n    }\n\n    public async Task<ReadResourceResponseDto> ReadResourceAsync(ReadResourceRequestDto request)\n    {\n        var content = request.Uri switch\n        {\n            \"dsagrind://algorithms/\" => await GetAlgorithmReferenceAsync(),\n            \"dsagrind://problems/\" => await GetProblemDatabaseAsync(),\n            _ => throw new ArgumentException($\"Unknown resource: {request.Uri}\")\n        };\n\n        return new ReadResourceResponseDto\n        {\n            Contents = new List<ContentDto>\n            {\n                new ContentDto\n                {\n                    Type = \"text\",\n                    Text = content\n                }\n            }\n        };\n    }\n\n    private Task<string> AnalyzeCodeAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Code analysis: The solution has O(n) time complexity and uses appropriate data structures.\");\n    }\n\n    private Task<string> GenerateTestCasesAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Generated test cases: [1,2,3] -> 6, [0,0,0] -> 0, [-1,1,-1] -> -1\");\n    }\n\n    private Task<string> ReviewCodeAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Code review: Good variable naming, consider edge case handling for empty inputs.\");\n    }\n\n    private Task<string> OptimizeSolutionAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Optimization suggestions: Consider using a hash map for O(1) lookups instead of linear search.\");\n    }\n\n    private Task<string> GenerateAlgorithmHintAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Algorithm hint: Consider using a two-pointer approach or sliding window technique.\");\n    }\n\n    private Task<string> GenerateCodeExplanationAsync(object arguments)\n    {\n        // Placeholder implementation - integrate with actual AI service\n        return Task.FromResult(\"Code explanation: This function implements a depth-first search traversal of a binary tree.\");\n    }\n\n    private Task<string> GetAlgorithmReferenceAsync()\n    {\n        return Task.FromResult(\"Algorithm reference data: Sorting, searching, graph algorithms, dynamic programming...\");\n    }\n\n    private Task<string> GetProblemDatabaseAsync()\n    {\n        return Task.FromResult(\"Problem database: Two Sum, Binary Tree Traversal, Maximum Subarray...\");\n    }\n}","size_bytes":8891},"backend/src/Services/DSAGrind.Payments.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Payments.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Payments.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":402},"backend/src/Services/DSAGrind.Payments.API/Controllers/PaymentsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Payments.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Payments.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\n[Authorize]\npublic class PaymentsController : ControllerBase\n{\n    private readonly IPaymentService _paymentService;\n    private readonly ISubscriptionService _subscriptionService;\n    private readonly ILogger<PaymentsController> _logger;\n\n    public PaymentsController(\n        IPaymentService paymentService, \n        ISubscriptionService subscriptionService,\n        ILogger<PaymentsController> logger)\n    {\n        _paymentService = paymentService;\n        _subscriptionService = subscriptionService;\n        _logger = logger;\n    }\n\n    [HttpPost(\"create-intent\")]\n    public async Task<ActionResult<PaymentIntentDto>> CreatePaymentIntent([FromBody] CreatePaymentIntentRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var createRequest = new CreatePaymentRequestDto\n            {\n                Amount = request.Amount,\n                Currency = request.Currency,\n                Description = request.Description,\n                Metadata = request.Metadata\n            };\n\n            var paymentIntent = await _paymentService.CreatePaymentIntentAsync(createRequest, userId);\n            return Ok(paymentIntent);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating payment intent\");\n            return StatusCode(500, new { message = \"An error occurred while creating payment intent\" });\n        }\n    }\n\n    [HttpPost(\"confirm\")]\n    public async Task<ActionResult<PaymentResultDto>> ConfirmPayment([FromBody] ConfirmPaymentRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            // Get the payment to verify it exists and belongs to the user\n            var payment = await _paymentService.GetPaymentAsync(request.PaymentIntentId, userId);\n            if (payment == null)\n            {\n                return NotFound(new { message = \"Payment not found\" });\n            }\n\n            // Create a payment result based on the payment status\n            var result = new PaymentResultDto\n            {\n                PaymentId = payment.Id,\n                Status = payment.Status,\n                Amount = payment.Amount,\n                Currency = payment.Currency,\n                Success = payment.Status == \"succeeded\",\n                ProcessedAt = DateTime.UtcNow\n            };\n\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error confirming payment\");\n            return StatusCode(500, new { message = \"An error occurred while confirming payment\" });\n        }\n    }\n\n    [HttpGet(\"history\")]\n    public async Task<ActionResult<List<PaymentDto>>> GetPaymentHistory([FromQuery] int page = 1, [FromQuery] int pageSize = 20)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var payments = await _paymentService.GetUserPaymentsAsync(userId, page, pageSize);\n            return Ok(payments);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting payment history\");\n            return StatusCode(500, new { message = \"An error occurred while getting payment history\" });\n        }\n    }\n\n    [HttpGet(\"{paymentId}\")]\n    public async Task<ActionResult<PaymentDto>> GetPayment(string paymentId)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var payment = await _paymentService.GetPaymentAsync(paymentId, userId);\n            if (payment == null)\n            {\n                return NotFound();\n            }\n\n            return Ok(payment);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting payment {PaymentId}\", paymentId);\n            return StatusCode(500, new { message = \"An error occurred while getting payment\" });\n        }\n    }\n\n    [HttpPost(\"subscriptions/create\")]\n    public async Task<ActionResult<SubscriptionDto>> CreateSubscription([FromBody] CreateSubscriptionRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var subscription = await _subscriptionService.CreateSubscriptionAsync(request, userId);\n            return Ok(subscription);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating subscription\");\n            return StatusCode(500, new { message = \"An error occurred while creating subscription\" });\n        }\n    }\n\n    [HttpPost(\"subscriptions/{subscriptionId}/cancel\")]\n    public async Task<IActionResult> CancelSubscription(string subscriptionId)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _subscriptionService.CancelSubscriptionAsync(subscriptionId, userId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to cancel subscription\" });\n            }\n\n            return Ok(new { message = \"Subscription cancelled successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error cancelling subscription {SubscriptionId}\", subscriptionId);\n            return StatusCode(500, new { message = \"An error occurred while cancelling subscription\" });\n        }\n    }\n\n    [HttpGet(\"subscriptions/current\")]\n    public async Task<ActionResult<SubscriptionDto>> GetCurrentSubscription()\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var subscription = await _subscriptionService.GetUserSubscriptionAsync(userId);\n            if (subscription == null)\n            {\n                return NotFound();\n            }\n\n            return Ok(subscription);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting current subscription\");\n            return StatusCode(500, new { message = \"An error occurred while getting subscription\" });\n        }\n    }\n\n    [HttpPost(\"webhook\")]\n    [AllowAnonymous]\n    public async Task<IActionResult> HandleWebhook()\n    {\n        try\n        {\n            var json = await new StreamReader(HttpContext.Request.Body).ReadToEndAsync();\n            var signature = Request.Headers[\"Stripe-Signature\"].FirstOrDefault() ?? \"\";\n            \n            var success = await _paymentService.ProcessWebhookAsync(json, signature);\n            \n            if (!success)\n            {\n                return BadRequest();\n            }\n            \n            return Ok();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling webhook\");\n            return StatusCode(500);\n        }\n    }\n\n    [HttpGet(\"plans\")]\n    [AllowAnonymous]\n    public async Task<ActionResult<List<SubscriptionPlanDto>>> GetSubscriptionPlans()\n    {\n        try\n        {\n            var plans = await _subscriptionService.GetSubscriptionPlansAsync();\n            return Ok(plans);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting subscription plans\");\n            return StatusCode(500, new { message = \"An error occurred while getting plans\" });\n        }\n    }\n\n    private string? GetCurrentUserId()\n    {\n        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n}","size_bytes":8291},"backend/src/Services/DSAGrind.Payments.API/Services/IPaymentService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Payments.API.Services;\n\npublic interface IPaymentService\n{\n    Task<PaymentIntentDto> CreatePaymentIntentAsync(CreatePaymentRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<PaymentDto?> GetPaymentAsync(string paymentId, string userId, CancellationToken cancellationToken = default);\n    Task<List<PaymentDto>> GetUserPaymentsAsync(string userId, int page = 1, int pageSize = 20, CancellationToken cancellationToken = default);\n    Task<bool> ProcessWebhookAsync(string payload, string signature, CancellationToken cancellationToken = default);\n    Task<RefundDto> RefundPaymentAsync(string paymentId, decimal? amount, string reason, string adminUserId, CancellationToken cancellationToken = default);\n}\n\n\n","size_bytes":796},"backend/src/Services/DSAGrind.Payments.API/Services/PaymentService.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Common.Services;\nusing Stripe;\nusing AutoMapper;\n\nnamespace DSAGrind.Payments.API.Services;\n\npublic class PaymentService : IPaymentService\n{\n    private readonly IMongoRepository<Payment> _paymentRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IMapper _mapper;\n    private readonly ILogger<PaymentService> _logger;\n    private readonly PaymentIntentService _paymentIntentService;\n\n    public PaymentService(\n        IMongoRepository<Payment> paymentRepository,\n        IEventPublisher eventPublisher,\n        IMapper mapper,\n        ILogger<PaymentService> logger)\n    {\n        _paymentRepository = paymentRepository;\n        _eventPublisher = eventPublisher;\n        _mapper = mapper;\n        _logger = logger;\n        _paymentIntentService = new PaymentIntentService();\n    }\n\n    public async Task<PaymentIntentDto> CreatePaymentIntentAsync(CreatePaymentRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Create Stripe PaymentIntent\n            var options = new PaymentIntentCreateOptions\n            {\n                Amount = (long)(request.Amount * 100), // Convert to cents\n                Currency = request.Currency,\n                Description = \"Payment for DSAGrind subscription\",\n                Metadata = request.Metadata?.ToDictionary(kvp => kvp.Key, kvp => kvp.Value) ?? new Dictionary<string, string>()\n            };\n\n            var paymentIntent = await _paymentIntentService.CreateAsync(options, cancellationToken: cancellationToken);\n\n            // Create payment record\n            var payment = new Payment\n            {\n                Id = Guid.NewGuid().ToString(),\n                UserId = userId,\n                Amount = request.Amount,\n                Currency = request.Currency,\n                Status = \"pending\",\n                ProviderPaymentId = paymentIntent.Id,\n                Metadata = request.Metadata?.ToDictionary(kvp => kvp.Key, kvp => (object)kvp.Value) ?? new Dictionary<string, object>(),\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _paymentRepository.CreateAsync(payment, cancellationToken);\n\n            // Publish event\n            await _eventPublisher.PublishAsync(\"payment.created\", new { PaymentId = payment.Id, UserId = userId, Amount = request.Amount }, cancellationToken);\n\n            return new PaymentIntentDto\n            {\n                Id = payment.Id,\n                ClientSecret = paymentIntent.ClientSecret,\n                Amount = request.Amount,\n                Currency = request.Currency,\n                Status = \"pending\"\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating payment intent for user {UserId}\", userId);\n            throw;\n        }\n    }\n\n    public async Task<PaymentDto?> GetPaymentAsync(string paymentId, string userId, CancellationToken cancellationToken = default)\n    {\n        var payment = await _paymentRepository.GetByIdAsync(paymentId, cancellationToken);\n        if (payment == null || payment.UserId != userId) return null;\n\n        return new PaymentDto\n        {\n            Id = payment.Id,\n            UserId = payment.UserId,\n            Amount = payment.Amount,\n            Currency = payment.Currency,\n            Status = payment.Status,\n            StripePaymentId = payment.ProviderPaymentId,\n            CreatedAt = payment.CreatedAt\n        };\n    }\n\n    public async Task<List<PaymentDto>> GetUserPaymentsAsync(string userId, int page = 1, int pageSize = 20, CancellationToken cancellationToken = default)\n    {\n        var payments = await _paymentRepository.GetManyAsync(\n            p => p.UserId == userId,\n            cancellationToken);\n\n        // Simple pagination without using page/pageSize parameters in GetManyAsync for now\n        var pagedPayments = payments.Skip((page - 1) * pageSize).Take(pageSize);\n        \n        return pagedPayments.Select(p => new PaymentDto\n        {\n            Id = p.Id,\n            UserId = p.UserId,\n            Amount = p.Amount,\n            Currency = p.Currency,\n            Status = p.Status,\n            StripePaymentId = p.ProviderPaymentId,\n            CreatedAt = p.CreatedAt\n        }).ToList();\n    }\n\n    public async Task<bool> ProcessWebhookAsync(string payload, string signature, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var stripeEvent = EventUtility.ConstructEvent(payload, signature, \"your_webhook_secret\");\n\n            switch (stripeEvent.Type)\n            {\n                case Stripe.Events.PaymentIntentSucceeded:\n                    var paymentIntent = stripeEvent.Data.Object as PaymentIntent;\n                    await HandlePaymentSucceeded(paymentIntent?.Id, cancellationToken);\n                    break;\n\n                case Stripe.Events.PaymentIntentPaymentFailed:\n                    var failedPaymentIntent = stripeEvent.Data.Object as PaymentIntent;\n                    await HandlePaymentFailed(failedPaymentIntent?.Id, cancellationToken);\n                    break;\n\n                default:\n                    _logger.LogInformation(\"Unhandled webhook event type: {EventType}\", stripeEvent.Type);\n                    break;\n            }\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error processing webhook\");\n            return false;\n        }\n    }\n\n    public async Task<RefundDto> RefundPaymentAsync(string paymentId, decimal? amount, string reason, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var payment = await _paymentRepository.GetByIdAsync(paymentId, cancellationToken);\n            if (payment == null) throw new ArgumentException(\"Payment not found\");\n\n            var refundService = new RefundService();\n            var refundOptions = new RefundCreateOptions\n            {\n                PaymentIntent = payment.ProviderPaymentId,\n                Amount = amount.HasValue ? (long)(amount.Value * 100) : null,\n                Reason = reason\n            };\n\n            var refund = await refundService.CreateAsync(refundOptions, cancellationToken: cancellationToken);\n\n            // Update payment record\n            payment.RefundInfo = new RefundInfo\n            {\n                RefundId = refund.Id,\n                Amount = (decimal)refund.Amount / 100,\n                Reason = reason,\n                ProcessedAt = DateTime.UtcNow,\n                Status = \"succeeded\"\n            };\n            payment.Status = \"refunded\";\n            payment.UpdatedAt = DateTime.UtcNow;\n\n            await _paymentRepository.UpdateAsync(payment.Id, payment, cancellationToken);\n\n            // Publish event\n            await _eventPublisher.PublishAsync(\"payment.refunded\", new { PaymentId = paymentId, RefundAmount = payment.RefundInfo.Amount, AdminUserId = adminUserId }, cancellationToken);\n\n            return new RefundDto\n            {\n                Id = refund.Id,\n                PaymentId = paymentId,\n                Amount = payment.RefundInfo.Amount,\n                Reason = reason,\n                Status = \"succeeded\",\n                CreatedAt = DateTime.UtcNow\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error refunding payment {PaymentId}\", paymentId);\n            throw;\n        }\n    }\n\n    private async Task HandlePaymentSucceeded(string? stripePaymentId, CancellationToken cancellationToken)\n    {\n        if (string.IsNullOrEmpty(stripePaymentId)) return;\n\n        var payment = await _paymentRepository.GetAsync(p => p.ProviderPaymentId == stripePaymentId, cancellationToken);\n        if (payment != null)\n        {\n            payment.Status = \"succeeded\";\n            payment.UpdatedAt = DateTime.UtcNow;\n            await _paymentRepository.UpdateAsync(payment.Id, payment, cancellationToken);\n\n            await _eventPublisher.PublishAsync(\"payment.succeeded\", new { PaymentId = payment.Id, UserId = payment.UserId }, cancellationToken);\n        }\n    }\n\n    private async Task HandlePaymentFailed(string? stripePaymentId, CancellationToken cancellationToken)\n    {\n        if (string.IsNullOrEmpty(stripePaymentId)) return;\n\n        var payment = await _paymentRepository.GetAsync(p => p.ProviderPaymentId == stripePaymentId, cancellationToken);\n        if (payment != null)\n        {\n            payment.Status = \"failed\";\n            payment.UpdatedAt = DateTime.UtcNow;\n            await _paymentRepository.UpdateAsync(payment.Id, payment, cancellationToken);\n\n            await _eventPublisher.PublishAsync(\"payment.failed\", new { PaymentId = payment.Id, UserId = payment.UserId }, cancellationToken);\n        }\n    }\n}\n","size_bytes":8929},"backend/src/Services/DSAGrind.Problems.API/Controllers/CategoriesController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Problems.API.Services;\n\nnamespace DSAGrind.Problems.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class CategoriesController : ControllerBase\n{\n    private readonly ICategoryService _categoryService;\n    private readonly ILogger<CategoriesController> _logger;\n\n    public CategoriesController(ICategoryService categoryService, ILogger<CategoriesController> logger)\n    {\n        _categoryService = categoryService;\n        _logger = logger;\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<List<CategoryDto>>> GetCategories()\n    {\n        try\n        {\n            var categories = await _categoryService.GetCategoriesAsync();\n            return Ok(categories);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting categories\");\n            return StatusCode(500, new { message = \"An error occurred while getting categories\" });\n        }\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<CategoryDto>> GetCategory(string id)\n    {\n        try\n        {\n            var category = await _categoryService.GetCategoryAsync(id);\n            if (category == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(category);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting category {CategoryId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while getting category\" });\n        }\n    }\n\n    [HttpGet(\"slug/{slug}\")]\n    public async Task<ActionResult<CategoryDto>> GetCategoryBySlug(string slug)\n    {\n        try\n        {\n            var category = await _categoryService.GetCategoryBySlugAsync(slug);\n            if (category == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(category);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting category by slug {Slug}\", slug);\n            return StatusCode(500, new { message = \"An error occurred while getting category\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPost]\n    public async Task<ActionResult<CategoryDto>> CreateCategory([FromBody] CreateCategoryRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var category = await _categoryService.CreateCategoryAsync(request, userId);\n            return CreatedAtAction(nameof(GetCategory), new { id = category.Id }, category);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating category\");\n            return StatusCode(500, new { message = \"An error occurred while creating category\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPut(\"{id}\")]\n    public async Task<ActionResult<CategoryDto>> UpdateCategory(string id, [FromBody] UpdateCategoryRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var category = await _categoryService.UpdateCategoryAsync(id, request, userId);\n            if (category == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(category);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating category {CategoryId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while updating category\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPost(\"reorder\")]\n    public async Task<IActionResult> UpdateCategoryOrder([FromBody] List<CategoryOrderDto> orders)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _categoryService.UpdateCategoryOrderAsync(orders, userId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to update category order\" });\n            }\n            \n            return Ok(new { message = \"Category order updated successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating category order\");\n            return StatusCode(500, new { message = \"An error occurred while updating category order\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpDelete(\"{id}\")]\n    public async Task<IActionResult> DeleteCategory(string id)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _categoryService.DeleteCategoryAsync(id, userId);\n            if (!success)\n            {\n                return NotFound();\n            }\n            \n            return Ok(new { message = \"Category deleted successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting category {CategoryId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while deleting category\" });\n        }\n    }\n\n    private string? GetCurrentUserId()\n    {\n        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n}","size_bytes":5649},"backend/src/Services/DSAGrind.Problems.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Problems.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Problems.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":402},"backend/src/Services/DSAGrind.Problems.API/Controllers/ProblemsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Problems.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Problems.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProblemsController : ControllerBase\n{\n    private readonly IProblemService _problemService;\n    private readonly ILogger<ProblemsController> _logger;\n\n    public ProblemsController(IProblemService problemService, ILogger<ProblemsController> logger)\n    {\n        _problemService = problemService;\n        _logger = logger;\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<ProblemSearchResponseDto>> GetProblems([FromQuery] ProblemSearchRequestDto request)\n    {\n        try\n        {\n            var result = await _problemService.SearchProblemsAsync(request);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching problems\");\n            return StatusCode(500, new { message = \"An error occurred while searching problems\" });\n        }\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<ProblemDto>> GetProblem(string id)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            var problem = await _problemService.GetProblemAsync(id, userId);\n            \n            if (problem == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(problem);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting problem {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while getting problem\" });\n        }\n    }\n\n    [HttpGet(\"slug/{slug}\")]\n    public async Task<ActionResult<ProblemDto>> GetProblemBySlug(string slug)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            var problem = await _problemService.GetProblemBySlugAsync(slug, userId);\n            \n            if (problem == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(problem);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting problem by slug {Slug}\", slug);\n            return StatusCode(500, new { message = \"An error occurred while getting problem\" });\n        }\n    }\n\n    [HttpGet(\"random\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetRandomProblems([FromQuery] int count = 5, [FromQuery] string? difficulty = null)\n    {\n        try\n        {\n            var problems = await _problemService.GetRandomProblemsAsync(count, difficulty);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting random problems\");\n            return StatusCode(500, new { message = \"An error occurred while getting random problems\" });\n        }\n    }\n\n    [Authorize]\n    [HttpGet(\"recommendations\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetRecommendations([FromQuery] int count = 10)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var problems = await _problemService.GetRecommendedProblemsAsync(userId, count);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting recommended problems\");\n            return StatusCode(500, new { message = \"An error occurred while getting recommendations\" });\n        }\n    }\n\n    [HttpGet(\"{id}/similar\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetSimilarProblems(string id, [FromQuery] int count = 5)\n    {\n        try\n        {\n            var problems = await _problemService.GetSimilarProblemsAsync(id, count);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting similar problems for {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while getting similar problems\" });\n        }\n    }\n\n    [Authorize]\n    [HttpPost]\n    public async Task<ActionResult<ProblemDto>> CreateProblem([FromBody] CreateProblemRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var problem = await _problemService.CreateProblemAsync(request, userId);\n            return CreatedAtAction(nameof(GetProblem), new { id = problem.Id }, problem);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating problem\");\n            return StatusCode(500, new { message = \"An error occurred while creating problem\" });\n        }\n    }\n\n    [Authorize]\n    [HttpPut(\"{id}\")]\n    public async Task<ActionResult<ProblemDto>> UpdateProblem(string id, [FromBody] UpdateProblemRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var problem = await _problemService.UpdateProblemAsync(id, request, userId);\n            if (problem == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(problem);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating problem {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while updating problem\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPost(\"{id}/approve\")]\n    public async Task<IActionResult> ApproveProblem(string id)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _problemService.ApproveProblemAsync(id, userId);\n            if (!success)\n            {\n                return NotFound();\n            }\n            \n            return Ok(new { message = \"Problem approved successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error approving problem {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while approving problem\" });\n        }\n    }\n\n    [Authorize]\n    [HttpPost(\"{id}/like\")]\n    public async Task<IActionResult> LikeProblem(string id, [FromBody] bool isLike = true)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _problemService.LikeProblemAsync(id, userId, isLike);\n            if (!success)\n            {\n                return NotFound();\n            }\n            \n            return Ok(new { message = isLike ? \"Problem liked\" : \"Problem disliked\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error liking problem {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while updating problem rating\" });\n        }\n    }\n\n    [Authorize]\n    [HttpPost(\"bulk-import\")]\n    public async Task<ActionResult<List<ProblemDto>>> BulkImportProblems([FromBody] BulkImportRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var problems = await _problemService.BulkImportProblemsAsync(request, userId);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error bulk importing problems\");\n            return StatusCode(500, new { message = \"An error occurred while importing problems\" });\n        }\n    }\n\n    [Authorize]\n    [HttpDelete(\"{id}\")]\n    public async Task<IActionResult> DeleteProblem(string id)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var success = await _problemService.DeleteProblemAsync(id, userId);\n            if (!success)\n            {\n                return NotFound();\n            }\n            \n            return Ok(new { message = \"Problem deleted successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting problem {ProblemId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while deleting problem\" });\n        }\n    }\n\n    private string? GetCurrentUserId()\n    {\n        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n}","size_bytes":9000},"backend/src/Services/DSAGrind.Problems.API/Repositories/CategoryRepository.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing MongoDB.Driver;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Problems.API.Repositories;\n\npublic class CategoryRepository : MongoRepository<Category>, ICategoryRepository\n{\n    public CategoryRepository(IMongoDatabase database) : base(database, \"categories\")\n    {\n    }\n\n    public async Task<Category?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(c => c.Slug == slug).FirstOrDefaultAsync(cancellationToken);\n    }\n\n    public async Task<List<Category>> GetActiveAsync(CancellationToken cancellationToken = default)\n    {\n        return await _collection\n            .Find(c => c.IsActive)\n            .Sort(Builders<Category>.Sort.Ascending(c => c.OrderIndex))\n            .ToListAsync(cancellationToken);\n    }\n\n    public async Task<bool> UpdateProblemCountAsync(string categoryId, int count, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Category>.Filter.Eq(c => c.Id, categoryId);\n        var update = Builders<Category>.Update.Set(c => c.TotalProblems, count);\n        \n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdateMetadataAsync(string categoryId, CategoryMetadata metadata, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Category>.Filter.Eq(c => c.Id, categoryId);\n        var update = Builders<Category>.Update.Set(c => c.Metadata, metadata);\n        \n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n}","size_bytes":1833},"backend/src/Services/DSAGrind.Problems.API/Repositories/ICategoryRepository.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Problems.API.Repositories;\n\npublic interface ICategoryRepository : IMongoRepository<Category>\n{\n    Task<Category?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default);\n    Task<List<Category>> GetActiveAsync(CancellationToken cancellationToken = default);\n    Task<bool> UpdateProblemCountAsync(string categoryId, int count, CancellationToken cancellationToken = default);\n    Task<bool> UpdateMetadataAsync(string categoryId, CategoryMetadata metadata, CancellationToken cancellationToken = default);\n}","size_bytes":615},"backend/src/Services/DSAGrind.Problems.API/Repositories/IProblemRepository.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Problems.API.Repositories;\n\npublic interface IProblemRepository : IMongoRepository<Problem>\n{\n    Task<Problem?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default);\n    Task<PaginatedResult<Problem>> GetByCategoryAsync(string categoryId, int page, int pageSize, CancellationToken cancellationToken = default);\n    Task<PaginatedResult<Problem>> SearchProblemsAsync(ProblemSearchRequestDto request, CancellationToken cancellationToken = default);\n    Task<List<Problem>> GetRandomProblemsAsync(int count, string? difficulty = null, CancellationToken cancellationToken = default);\n    Task<List<Problem>> GetRecommendedProblemsAsync(string userId, int count, CancellationToken cancellationToken = default);\n    Task<bool> UpdateStatisticsAsync(string problemId, ProblemStatistics statistics, CancellationToken cancellationToken = default);\n    Task<bool> IncrementViewAsync(string problemId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateDifficultyRatingAsync(string problemId, string difficulty, CancellationToken cancellationToken = default);\n    Task<List<Problem>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default);\n}","size_bytes":1332},"backend/src/Services/DSAGrind.Problems.API/Repositories/ProblemRepository.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\nusing MongoDB.Driver;\nusing MongoDB.Bson;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Problems.API.Repositories;\n\npublic class ProblemRepository : MongoRepository<Problem>, IProblemRepository\n{\n    public ProblemRepository(IMongoDatabase database) : base(database, \"problems\")\n    {\n    }\n\n    public async Task<Problem?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(p => p.Slug == slug).FirstOrDefaultAsync(cancellationToken);\n    }\n\n    public async Task<PaginatedResult<Problem>> GetByCategoryAsync(string categoryId, int page, int pageSize, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Problem>.Filter.Eq(p => p.CategoryId, categoryId);\n        var totalCount = await _collection.CountDocumentsAsync(filter, cancellationToken: cancellationToken);\n        \n        var problems = await _collection\n            .Find(filter)\n            .Sort(Builders<Problem>.Sort.Ascending(p => p.OrderIndex))\n            .Skip((page - 1) * pageSize)\n            .Limit(pageSize)\n            .ToListAsync(cancellationToken);\n\n        return new PaginatedResult<Problem>\n        {\n            Items = problems,\n            TotalCount = totalCount,\n            Page = page,\n            PageSize = pageSize\n        };\n    }\n\n    public async Task<PaginatedResult<Problem>> SearchProblemsAsync(ProblemSearchRequestDto request, CancellationToken cancellationToken = default)\n    {\n        var filterBuilder = Builders<Problem>.Filter;\n        var filters = new List<FilterDefinition<Problem>>();\n\n        // Text search\n        if (!string.IsNullOrEmpty(request.Search))\n        {\n            filters.Add(filterBuilder.Or(\n                filterBuilder.Regex(p => p.Title, new BsonRegularExpression(request.Search, \"i\")),\n                filterBuilder.Regex(p => p.Description, new BsonRegularExpression(request.Search, \"i\"))\n            ));\n        }\n\n        // Difficulty filter\n        if (!string.IsNullOrEmpty(request.Difficulty))\n        {\n            filters.Add(filterBuilder.Eq(p => p.Difficulty, request.Difficulty));\n        }\n\n        // Category filter\n        if (!string.IsNullOrEmpty(request.CategoryId))\n        {\n            filters.Add(filterBuilder.Eq(p => p.CategoryId, request.CategoryId));\n        }\n\n        // Tags filter\n        if (request.Tags?.Any() == true)\n        {\n            filters.Add(filterBuilder.AnyIn(p => p.Tags, request.Tags));\n        }\n\n        // Premium filter\n        if (request.IsPaid.HasValue)\n        {\n            filters.Add(filterBuilder.Eq(p => p.IsPaid, request.IsPaid.Value));\n        }\n\n        // Status filter (only approved problems for non-admins)\n        filters.Add(filterBuilder.Eq(p => p.Status, \"approved\"));\n\n        var combinedFilter = filters.Count > 0 ? filterBuilder.And(filters) : FilterDefinition<Problem>.Empty;\n        \n        var totalCount = await _collection.CountDocumentsAsync(combinedFilter, cancellationToken: cancellationToken);\n\n        // Build sort\n        var sortBuilder = Builders<Problem>.Sort;\n        SortDefinition<Problem> sort = request.SortBy?.ToLower() switch\n        {\n            \"difficulty\" => request.SortOrder == \"desc\" ? sortBuilder.Descending(p => p.Difficulty) : sortBuilder.Ascending(p => p.Difficulty),\n            \"title\" => request.SortOrder == \"desc\" ? sortBuilder.Descending(p => p.Title) : sortBuilder.Ascending(p => p.Title),\n            \"createdat\" => request.SortOrder == \"desc\" ? sortBuilder.Descending(p => p.CreatedAt) : sortBuilder.Ascending(p => p.CreatedAt),\n            \"popularity\" => sortBuilder.Descending(p => p.Statistics.TotalSubmissions),\n            _ => sortBuilder.Ascending(p => p.OrderIndex)\n        };\n\n        var problems = await _collection\n            .Find(combinedFilter)\n            .Sort(sort)\n            .Skip((request.Page - 1) * request.PageSize)\n            .Limit(request.PageSize)\n            .ToListAsync(cancellationToken);\n\n        return new PaginatedResult<Problem>\n        {\n            Items = problems,\n            TotalCount = totalCount,\n            Page = request.Page,\n            PageSize = request.PageSize,\n        };\n    }\n\n    public async Task<List<Problem>> GetRandomProblemsAsync(int count, string? difficulty = null, CancellationToken cancellationToken = default)\n    {\n        var filterBuilder = Builders<Problem>.Filter;\n        var filters = new List<FilterDefinition<Problem>>\n        {\n            filterBuilder.Eq(p => p.Status, \"approved\")\n        };\n\n        if (!string.IsNullOrEmpty(difficulty))\n        {\n            filters.Add(filterBuilder.Eq(p => p.Difficulty, difficulty));\n        }\n\n        var combinedFilter = filterBuilder.And(filters);\n\n        return await _collection\n            .Aggregate()\n            .Match(combinedFilter)\n            .Sample(count)\n            .ToListAsync(cancellationToken);\n    }\n\n    public async Task<List<Problem>> GetRecommendedProblemsAsync(string userId, int count, CancellationToken cancellationToken = default)\n    {\n        // For now, return random problems. In a real implementation, this would use ML models\n        return await GetRandomProblemsAsync(count, cancellationToken: cancellationToken);\n    }\n\n    public async Task<bool> UpdateStatisticsAsync(string problemId, ProblemStatistics statistics, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Problem>.Filter.Eq(p => p.Id, problemId);\n        var update = Builders<Problem>.Update.Set(p => p.Statistics, statistics);\n        \n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> IncrementViewAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Problem>.Filter.Eq(p => p.Id, problemId);\n        var update = Builders<Problem>.Update.Inc(\"Statistics.Views\", 1);\n        \n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<bool> UpdateDifficultyRatingAsync(string problemId, string difficulty, CancellationToken cancellationToken = default)\n    {\n        var filter = Builders<Problem>.Filter.Eq(p => p.Id, problemId);\n        var update = Builders<Problem>.Update.Set(p => p.Difficulty, difficulty);\n        \n        var result = await _collection.UpdateOneAsync(filter, update, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public async Task<List<Problem>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default)\n    {\n        var problem = await GetByIdAsync(problemId, cancellationToken);\n        if (problem == null) return new List<Problem>();\n\n        var filter = Builders<Problem>.Filter.And(\n            Builders<Problem>.Filter.Ne(p => p.Id, problemId),\n            Builders<Problem>.Filter.Eq(p => p.Status, \"approved\"),\n            Builders<Problem>.Filter.AnyIn(p => p.Tags, problem.Tags)\n        );\n\n        return await _collection\n            .Find(filter)\n            .Limit(count)\n            .ToListAsync(cancellationToken);\n    }\n}","size_bytes":7426},"backend/src/Services/DSAGrind.Problems.API/Services/CategoryService.cs":{"content":"using DSAGrind.Problems.API.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Common.Services;\nusing AutoMapper;\n\nnamespace DSAGrind.Problems.API.Services;\n\npublic class CategoryService : ICategoryService\n{\n    private readonly ICategoryRepository _categoryRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IMapper _mapper;\n    private readonly ILogger<CategoryService> _logger;\n\n    public CategoryService(\n        ICategoryRepository categoryRepository,\n        IEventPublisher eventPublisher,\n        IMapper mapper,\n        ILogger<CategoryService> logger)\n    {\n        _categoryRepository = categoryRepository;\n        _eventPublisher = eventPublisher;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<List<CategoryDto>> GetCategoriesAsync(CancellationToken cancellationToken = default)\n    {\n        var categories = await _categoryRepository.GetActiveAsync(cancellationToken);\n        return _mapper.Map<List<CategoryDto>>(categories);\n    }\n\n    public async Task<CategoryDto?> GetCategoryAsync(string id, CancellationToken cancellationToken = default)\n    {\n        var category = await _categoryRepository.GetByIdAsync(id, cancellationToken);\n        return category == null ? null : _mapper.Map<CategoryDto>(category);\n    }\n\n    public async Task<CategoryDto?> GetCategoryBySlugAsync(string slug, CancellationToken cancellationToken = default)\n    {\n        var category = await _categoryRepository.GetBySlugAsync(slug, cancellationToken);\n        return category == null ? null : _mapper.Map<CategoryDto>(category);\n    }\n\n    public async Task<CategoryDto> CreateCategoryAsync(CreateCategoryRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var category = new Category\n        {\n            Id = Guid.NewGuid().ToString(),\n            Name = request.Name,\n            Slug = GenerateSlug(request.Name),\n            Description = request.Description,\n            Icon = request.Icon,\n            IsPaid = request.IsPaid,\n            FreeProblemLimit = request.FreeProblemLimit,\n            TotalProblems = 0,\n            IsActive = true,\n            OrderIndex = 999,\n            Metadata = new CategoryMetadata\n            {\n                Tags = request.Tags,\n                Difficulty = new DifficultyDistribution()\n            },\n            CreatedAt = DateTime.UtcNow,\n            UpdatedAt = DateTime.UtcNow\n        };\n\n        await _categoryRepository.CreateAsync(category, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"category.created\", new { CategoryId = category.Id, UserId = userId }, cancellationToken);\n\n        return _mapper.Map<CategoryDto>(category);\n    }\n\n    public async Task<CategoryDto?> UpdateCategoryAsync(string id, UpdateCategoryRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var category = await _categoryRepository.GetByIdAsync(id, cancellationToken);\n        if (category == null) return null;\n\n        // Update fields if provided\n        if (!string.IsNullOrEmpty(request.Name))\n        {\n            category.Name = request.Name;\n            category.Slug = GenerateSlug(request.Name);\n        }\n\n        if (request.Description != null)\n            category.Description = request.Description;\n\n        if (request.Icon != null)\n            category.Icon = request.Icon;\n\n        if (request.IsPaid.HasValue)\n            category.IsPaid = request.IsPaid.Value;\n\n        if (request.FreeProblemLimit.HasValue)\n            category.FreeProblemLimit = request.FreeProblemLimit.Value;\n\n        if (request.IsActive.HasValue)\n            category.IsActive = request.IsActive.Value;\n\n        if (request.Tags != null)\n            category.Metadata.Tags = request.Tags;\n\n        category.UpdatedAt = DateTime.UtcNow;\n\n        await _categoryRepository.UpdateAsync(category.Id, category, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"category.updated\", new { CategoryId = category.Id, UserId = userId }, cancellationToken);\n\n        return _mapper.Map<CategoryDto>(category);\n    }\n\n    public async Task<bool> DeleteCategoryAsync(string id, string userId, CancellationToken cancellationToken = default)\n    {\n        var success = await _categoryRepository.DeleteAsync(id, cancellationToken);\n\n        if (success)\n        {\n            await _eventPublisher.PublishAsync(\"category.deleted\", new { CategoryId = id, UserId = userId }, cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> UpdateCategoryOrderAsync(List<CategoryOrderDto> orders, string userId, CancellationToken cancellationToken = default)\n    {\n        foreach (var order in orders)\n        {\n            var category = await _categoryRepository.GetByIdAsync(order.Id, cancellationToken);\n            if (category != null)\n            {\n                category.OrderIndex = order.OrderIndex;\n                category.UpdatedAt = DateTime.UtcNow;\n                await _categoryRepository.UpdateAsync(category.Id, category, cancellationToken);\n            }\n        }\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"categories.reordered\", new { UserId = userId }, cancellationToken);\n\n        return true;\n    }\n\n    private static string GenerateSlug(string name)\n    {\n        return name.ToLowerInvariant()\n            .Replace(\" \", \"-\")\n            .Replace(\"_\", \"-\")\n            .Replace(\".\", \"\")\n            .Replace(\",\", \"\")\n            .Replace(\"!\", \"\")\n            .Replace(\"?\", \"\")\n            .Replace(\"(\", \"\")\n            .Replace(\")\", \"\");\n    }\n}","size_bytes":5693},"backend/src/Services/DSAGrind.Problems.API/Services/ICategoryService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Problems.API.Services;\n\npublic interface ICategoryService\n{\n    Task<List<CategoryDto>> GetCategoriesAsync(CancellationToken cancellationToken = default);\n    Task<CategoryDto?> GetCategoryAsync(string id, CancellationToken cancellationToken = default);\n    Task<CategoryDto?> GetCategoryBySlugAsync(string slug, CancellationToken cancellationToken = default);\n    Task<CategoryDto> CreateCategoryAsync(CreateCategoryRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<CategoryDto?> UpdateCategoryAsync(string id, UpdateCategoryRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<bool> DeleteCategoryAsync(string id, string userId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateCategoryOrderAsync(List<CategoryOrderDto> orders, string userId, CancellationToken cancellationToken = default);\n}\n\npublic class CategoryDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n    public string Slug { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool IsPaid { get; set; }\n    public int FreeProblemLimit { get; set; }\n    public int TotalProblems { get; set; }\n    public bool IsActive { get; set; }\n    public int OrderIndex { get; set; }\n    public CategoryMetadataDto Metadata { get; set; } = new();\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n\npublic class CategoryMetadataDto\n{\n    public DifficultyDistributionDto Difficulty { get; set; } = new();\n    public List<string> Tags { get; set; } = new();\n    public int EstimatedTimeHours { get; set; }\n}\n\npublic class DifficultyDistributionDto\n{\n    public int Easy { get; set; }\n    public int Medium { get; set; }\n    public int Hard { get; set; }\n}\n\npublic class CreateCategoryRequestDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool IsPaid { get; set; }\n    public int FreeProblemLimit { get; set; } = 5;\n    public List<string> Tags { get; set; } = new();\n}\n\npublic class UpdateCategoryRequestDto\n{\n    public string? Name { get; set; }\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool? IsPaid { get; set; }\n    public int? FreeProblemLimit { get; set; }\n    public bool? IsActive { get; set; }\n    public List<string>? Tags { get; set; }\n}\n\npublic class CategoryOrderDto\n{\n    public string Id { get; set; } = string.Empty;\n    public int OrderIndex { get; set; }\n}","size_bytes":2704},"backend/src/Services/DSAGrind.Problems.API/Services/IProblemService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Problems.API.Services;\n\npublic interface IProblemService\n{\n    Task<ProblemDto?> GetProblemAsync(string id, string? userId = null, CancellationToken cancellationToken = default);\n    Task<ProblemDto?> GetProblemBySlugAsync(string slug, string? userId = null, CancellationToken cancellationToken = default);\n    Task<ProblemSearchResponseDto> SearchProblemsAsync(ProblemSearchRequestDto request, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetRecommendedProblemsAsync(string userId, int count, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetRandomProblemsAsync(int count, string? difficulty = null, CancellationToken cancellationToken = default);\n    Task<ProblemDto> CreateProblemAsync(CreateProblemRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<ProblemDto?> UpdateProblemAsync(string id, UpdateProblemRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<bool> DeleteProblemAsync(string id, string userId, CancellationToken cancellationToken = default);\n    Task<bool> ApproveProblemAsync(string id, string adminUserId, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> BulkImportProblemsAsync(BulkImportRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<bool> LikeProblemAsync(string problemId, string userId, bool isLike, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default);\n}","size_bytes":1661},"backend/src/Services/DSAGrind.Problems.API/Services/ProblemService.cs":{"content":"using DSAGrind.Problems.API.Repositories;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Common.Services;\nusing AutoMapper;\n\nnamespace DSAGrind.Problems.API.Services;\n\npublic class ProblemService : IProblemService\n{\n    private readonly IProblemRepository _problemRepository;\n    private readonly ICategoryRepository _categoryRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IMapper _mapper;\n    private readonly ILogger<ProblemService> _logger;\n\n    public ProblemService(\n        IProblemRepository problemRepository,\n        ICategoryRepository categoryRepository,\n        IEventPublisher eventPublisher,\n        IMapper mapper,\n        ILogger<ProblemService> logger)\n    {\n        _problemRepository = problemRepository;\n        _categoryRepository = categoryRepository;\n        _eventPublisher = eventPublisher;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<ProblemDto?> GetProblemAsync(string id, string? userId = null, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(id, cancellationToken);\n        if (problem == null) return null;\n\n        // Increment view count\n        await _problemRepository.IncrementViewAsync(id, cancellationToken);\n\n        return _mapper.Map<ProblemDto>(problem);\n    }\n\n    public async Task<ProblemDto?> GetProblemBySlugAsync(string slug, string? userId = null, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetBySlugAsync(slug, cancellationToken);\n        if (problem == null) return null;\n\n        // Increment view count\n        await _problemRepository.IncrementViewAsync(problem.Id, cancellationToken);\n\n        return _mapper.Map<ProblemDto>(problem);\n    }\n\n    public async Task<ProblemSearchResponseDto> SearchProblemsAsync(ProblemSearchRequestDto request, CancellationToken cancellationToken = default)\n    {\n        var result = await _problemRepository.SearchProblemsAsync(request, cancellationToken);\n        \n        return new ProblemSearchResponseDto\n        {\n            Problems = _mapper.Map<List<ProblemDto>>(result.Items),\n            TotalCount = (int)result.TotalCount,\n            Page = result.Page,\n            PageSize = result.PageSize,\n            TotalPages = result.TotalPages,\n            HasNextPage = result.Page < result.TotalPages,\n            HasPreviousPage = result.Page > 1\n        };\n    }\n\n    public async Task<List<ProblemDto>> GetRecommendedProblemsAsync(string userId, int count, CancellationToken cancellationToken = default)\n    {\n        var problems = await _problemRepository.GetRecommendedProblemsAsync(userId, count, cancellationToken);\n        return _mapper.Map<List<ProblemDto>>(problems);\n    }\n\n    public async Task<List<ProblemDto>> GetRandomProblemsAsync(int count, string? difficulty = null, CancellationToken cancellationToken = default)\n    {\n        var problems = await _problemRepository.GetRandomProblemsAsync(count, difficulty, cancellationToken);\n        return _mapper.Map<List<ProblemDto>>(problems);\n    }\n\n    public async Task<ProblemDto> CreateProblemAsync(CreateProblemRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var problem = new Problem\n        {\n            Id = Guid.NewGuid().ToString(),\n            Title = request.Title,\n            Slug = GenerateSlug(request.Title),\n            Description = request.Description,\n            Difficulty = request.Difficulty,\n            CategoryId = request.CategoryId,\n            Tags = request.Tags ?? new List<string>(),\n            TestCases = _mapper.Map<List<TestCase>>(request.TestCases) ?? new List<TestCase>(),\n            Constraints = request.Constraints ?? new List<string>(),\n            Examples = _mapper.Map<List<ProblemExample>>(request.Examples) ?? new List<ProblemExample>(),\n            Hints = request.Hints ?? new List<string>(),\n            SolutionTemplate = request.SolutionTemplate,\n            IsPaid = request.IsPaid,\n            Status = \"pending\", // Needs approval\n            CreatedBy = userId,\n            CreatedAt = DateTime.UtcNow,\n            UpdatedAt = DateTime.UtcNow,\n            Statistics = new ProblemStatistics()\n        };\n\n        await _problemRepository.CreateAsync(problem, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"problem.created\", new { ProblemId = problem.Id, UserId = userId }, cancellationToken);\n\n        return _mapper.Map<ProblemDto>(problem);\n    }\n\n    public async Task<ProblemDto?> UpdateProblemAsync(string id, UpdateProblemRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(id, cancellationToken);\n        if (problem == null) return null;\n\n        // Update fields if provided\n        if (!string.IsNullOrEmpty(request.Title))\n        {\n            problem.Title = request.Title;\n            problem.Slug = GenerateSlug(request.Title);\n        }\n        \n        if (!string.IsNullOrEmpty(request.Description))\n            problem.Description = request.Description;\n\n        if (!string.IsNullOrEmpty(request.Difficulty))\n            problem.Difficulty = request.Difficulty;\n\n        if (request.Tags != null)\n            problem.Tags = request.Tags;\n\n        if (request.TestCases != null)\n            problem.TestCases = _mapper.Map<List<TestCase>>(request.TestCases);\n\n        if (request.Constraints != null)\n            problem.Constraints = request.Constraints;\n\n        if (request.Examples != null)\n            problem.Examples = _mapper.Map<List<ProblemExample>>(request.Examples);\n\n        if (request.Hints != null)\n            problem.Hints = request.Hints;\n\n        if (request.IsPaid.HasValue)\n            problem.IsPaid = request.IsPaid.Value;\n\n        problem.UpdatedAt = DateTime.UtcNow;\n        problem.UpdatedBy = userId;\n\n        await _problemRepository.UpdateAsync(problem.Id, problem, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"problem.updated\", new { ProblemId = problem.Id, UserId = userId }, cancellationToken);\n\n        return _mapper.Map<ProblemDto>(problem);\n    }\n\n    public async Task<bool> DeleteProblemAsync(string id, string userId, CancellationToken cancellationToken = default)\n    {\n        var success = await _problemRepository.DeleteAsync(id, cancellationToken);\n        \n        if (success)\n        {\n            await _eventPublisher.PublishAsync(\"problem.deleted\", new { ProblemId = id, UserId = userId }, cancellationToken);\n        }\n\n        return success;\n    }\n\n    public async Task<bool> ApproveProblemAsync(string id, string adminUserId, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(id, cancellationToken);\n        if (problem == null) return false;\n\n        problem.Status = \"approved\";\n        problem.UpdatedAt = DateTime.UtcNow;\n        problem.UpdatedBy = adminUserId;\n\n        await _problemRepository.UpdateAsync(problem.Id, problem, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"problem.approved\", new { ProblemId = id, AdminUserId = adminUserId }, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<List<ProblemDto>> BulkImportProblemsAsync(BulkImportRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var problems = new List<Problem>();\n\n        foreach (var item in request.Problems)\n        {\n            var problem = new Problem\n            {\n                Id = Guid.NewGuid().ToString(),\n                Title = item.Title,\n                Slug = GenerateSlug(item.Title),\n                Description = item.Description,\n                Difficulty = item.Difficulty,\n                CategoryId = request.CategoryId,\n                Tags = ParseStringToList(item.Tags) ?? new List<string>(),\n                IsPaid = item.IsPaid,\n                Status = \"pending\",\n                CreatedBy = userId,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Statistics = new ProblemStatistics()\n            };\n\n            problems.Add(problem);\n        }\n\n        await _problemRepository.CreateManyAsync(problems, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"problems.bulk_imported\", new { Count = problems.Count, UserId = userId }, cancellationToken);\n\n        return _mapper.Map<List<ProblemDto>>(problems);\n    }\n\n    public async Task<bool> LikeProblemAsync(string problemId, string userId, bool isLike, CancellationToken cancellationToken = default)\n    {\n        var problem = await _problemRepository.GetByIdAsync(problemId, cancellationToken);\n        if (problem == null) return false;\n\n        // In a real implementation, we'd track individual user likes/dislikes\n        // For now, just increment/decrement the counters\n        if (isLike)\n        {\n            problem.Statistics.Likes++;\n        }\n        else\n        {\n            problem.Statistics.Dislikes++;\n        }\n\n        await _problemRepository.UpdateStatisticsAsync(problemId, problem.Statistics, cancellationToken);\n\n        return true;\n    }\n\n    public async Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default)\n    {\n        var problems = await _problemRepository.GetSimilarProblemsAsync(problemId, count, cancellationToken);\n        return _mapper.Map<List<ProblemDto>>(problems);\n    }\n\n    private static string GenerateSlug(string title)\n    {\n        return title.ToLowerInvariant()\n            .Replace(\" \", \"-\")\n            .Replace(\"_\", \"-\")\n            .Replace(\".\", \"\")\n            .Replace(\",\", \"\")\n            .Replace(\"!\", \"\")\n            .Replace(\"?\", \"\")\n            .Replace(\"(\", \"\")\n            .Replace(\")\", \"\");\n    }\n\n    private static List<string>? ParseStringToList(string? value)\n    {\n        if (string.IsNullOrEmpty(value))\n            return null;\n        \n        return value.Split(',', StringSplitOptions.RemoveEmptyEntries)\n                   .Select(x => x.Trim())\n                   .ToList();\n    }\n}","size_bytes":10325},"backend/src/Services/DSAGrind.Search.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Search.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Search.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":398},"backend/src/Services/DSAGrind.Search.API/Controllers/SearchController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Search.API.Services;\nusing DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Search.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SearchController : ControllerBase\n{\n    private readonly ISearchService _searchService;\n    private readonly ILogger<SearchController> _logger;\n\n    public SearchController(ISearchService searchService, ILogger<SearchController> logger)\n    {\n        _searchService = searchService;\n        _logger = logger;\n    }\n\n    [HttpPost]\n    public async Task<ActionResult<SearchResultDto>> Search([FromBody] SearchRequestDto request)\n    {\n        try\n        {\n            var result = await _searchService.SearchAsync(request);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error performing search\");\n            return StatusCode(500, new { message = \"An error occurred while searching\" });\n        }\n    }\n\n    [HttpGet(\"suggestions\")]\n    public async Task<ActionResult<List<string>>> GetSuggestions([FromQuery] string query, [FromQuery] int count = 5)\n    {\n        try\n        {\n            var suggestions = await _searchService.GetSearchSuggestionsAsync(query, count);\n            return Ok(suggestions);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting search suggestions\");\n            return StatusCode(500, new { message = \"An error occurred while getting suggestions\" });\n        }\n    }\n\n    [HttpGet(\"similar/{problemId}\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetSimilarProblems(string problemId, [FromQuery] int count = 5)\n    {\n        try\n        {\n            var problems = await _searchService.GetSimilarProblemsAsync(problemId, count);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting similar problems\");\n            return StatusCode(500, new { message = \"An error occurred while getting similar problems\" });\n        }\n    }\n\n    [Authorize]\n    [HttpGet(\"recommendations\")]\n    public async Task<ActionResult<List<ProblemDto>>> GetRecommendations([FromQuery] int count = 10)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var recommendations = await _searchService.GetRecommendationsAsync(userId, count);\n            return Ok(recommendations);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting recommendations\");\n            return StatusCode(500, new { message = \"An error occurred while getting recommendations\" });\n        }\n    }\n\n    [HttpPost(\"by-tags\")]\n    public async Task<ActionResult<List<ProblemDto>>> SearchByTags([FromBody] List<string> tags, [FromQuery] int count = 20)\n    {\n        try\n        {\n            var problems = await _searchService.SearchByTagsAsync(tags, count);\n            return Ok(problems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching by tags\");\n            return StatusCode(500, new { message = \"An error occurred while searching by tags\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPost(\"index/{problemId}\")]\n    public async Task<IActionResult> IndexProblem(string problemId)\n    {\n        try\n        {\n            var success = await _searchService.IndexProblemAsync(problemId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to index problem\" });\n            }\n            \n            return Ok(new { message = \"Problem indexed successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error indexing problem {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while indexing problem\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpPut(\"index/{problemId}\")]\n    public async Task<IActionResult> UpdateProblemIndex(string problemId)\n    {\n        try\n        {\n            var success = await _searchService.UpdateProblemIndexAsync(problemId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to update problem index\" });\n            }\n            \n            return Ok(new { message = \"Problem index updated successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating problem index {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while updating problem index\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpDelete(\"index/{problemId}\")]\n    public async Task<IActionResult> DeleteProblemIndex(string problemId)\n    {\n        try\n        {\n            var success = await _searchService.DeleteProblemIndexAsync(problemId);\n            if (!success)\n            {\n                return BadRequest(new { message = \"Failed to delete problem index\" });\n            }\n            \n            return Ok(new { message = \"Problem index deleted successfully\" });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting problem index {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while deleting problem index\" });\n        }\n    }\n\n    [Authorize(Roles = \"admin\")]\n    [HttpGet(\"analytics\")]\n    public async Task<ActionResult<SearchAnalyticsDto>> GetAnalytics()\n    {\n        try\n        {\n            var analytics = await _searchService.GetSearchAnalyticsAsync();\n            return Ok(analytics);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting search analytics\");\n            return StatusCode(500, new { message = \"An error occurred while getting analytics\" });\n        }\n    }\n\n    private string? GetCurrentUserId()\n    {\n        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n}","size_bytes":6179},"backend/src/Services/DSAGrind.Search.API/Services/ISearchService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Search.API.Services;\n\npublic interface ISearchService\n{\n    Task<SearchResultDto> SearchAsync(SearchRequestDto request, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetRecommendationsAsync(string userId, int count, CancellationToken cancellationToken = default);\n    Task<bool> IndexProblemAsync(string problemId, CancellationToken cancellationToken = default);\n    Task<bool> UpdateProblemIndexAsync(string problemId, CancellationToken cancellationToken = default);\n    Task<bool> DeleteProblemIndexAsync(string problemId, CancellationToken cancellationToken = default);\n    Task<List<string>> GetSearchSuggestionsAsync(string query, int count, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> SearchByTagsAsync(List<string> tags, int count, CancellationToken cancellationToken = default);\n    Task<SearchAnalyticsDto> GetSearchAnalyticsAsync(CancellationToken cancellationToken = default);\n}\n\npublic class SearchRequestDto\n{\n    public string Query { get; set; } = string.Empty;\n    public List<string>? Tags { get; set; }\n    public string? Difficulty { get; set; }\n    public string? Category { get; set; }\n    public bool? IsPaid { get; set; }\n    public string? SortBy { get; set; } = \"relevance\";\n    public string? SortOrder { get; set; } = \"desc\";\n    public int Page { get; set; } = 1;\n    public int PageSize { get; set; } = 20;\n}\n\npublic class SearchResultDto\n{\n    public List<ProblemDto> Problems { get; set; } = new();\n    public int TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n    public bool HasNextPage { get; set; }\n    public bool HasPreviousPage { get; set; }\n    public List<string> Suggestions { get; set; } = new();\n    public Dictionary<string, int> Facets { get; set; } = new();\n    public double SearchTime { get; set; }\n}\n\npublic class SearchAnalyticsDto\n{\n    public List<PopularSearchDto> PopularSearches { get; set; } = new();\n    public List<string> TrendingTags { get; set; } = new();\n    public Dictionary<string, int> SearchFrequency { get; set; } = new();\n    public double AverageSearchTime { get; set; }\n}\n\npublic class PopularSearchDto\n{\n    public string Query { get; set; } = string.Empty;\n    public int Count { get; set; }\n    public DateTime LastSearched { get; set; }\n}","size_bytes":2539},"backend/src/Services/DSAGrind.Search.API/Services/SearchService.cs":{"content":"using DSAGrind.Common.Services;\nusing DSAGrind.Models.DTOs;\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nnamespace DSAGrind.Search.API.Services;\n\npublic class SearchService : ISearchService\n{\n    private readonly QdrantClient _qdrantClient;\n    private readonly IVectorSearchService _vectorSearchService;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ILogger<SearchService> _logger;\n\n    public SearchService(\n        QdrantClient qdrantClient,\n        IVectorSearchService vectorSearchService,\n        IEventPublisher eventPublisher,\n        ILogger<SearchService> logger)\n    {\n        _qdrantClient = qdrantClient;\n        _vectorSearchService = vectorSearchService;\n        _eventPublisher = eventPublisher;\n        _logger = logger;\n    }\n\n    public async Task<SearchResultDto> SearchAsync(SearchRequestDto request, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var startTime = DateTime.UtcNow;\n\n            // Perform vector search for semantic similarity\n            var vectorResults = await _vectorSearchService.SearchProblemsAsync(request.Query, request.PageSize, cancellationToken);\n\n            // Apply additional filters\n            var filteredResults = ApplyFilters(vectorResults, request);\n\n            var totalCount = filteredResults.Count;\n            var pagedResults = filteredResults\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .ToList();\n\n            var searchTime = (DateTime.UtcNow - startTime).TotalMilliseconds;\n\n            // Track search analytics\n            await TrackSearchAsync(request.Query, totalCount, searchTime, cancellationToken);\n\n            return new SearchResultDto\n            {\n                Problems = pagedResults,\n                TotalCount = totalCount,\n                Page = request.Page,\n                PageSize = request.PageSize,\n                TotalPages = (int)Math.Ceiling((double)totalCount / request.PageSize),\n                HasNextPage = request.Page * request.PageSize < totalCount,\n                HasPreviousPage = request.Page > 1,\n                Suggestions = await GetSearchSuggestionsAsync(request.Query, 3, cancellationToken),\n                Facets = BuildFacets(filteredResults),\n                SearchTime = searchTime\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error performing search for query: {Query}\", request.Query);\n            return new SearchResultDto\n            {\n                Problems = new List<ProblemDto>(),\n                TotalCount = 0,\n                Page = request.Page,\n                PageSize = request.PageSize,\n                SearchTime = 0\n            };\n        }\n    }\n\n    public async Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await _vectorSearchService.GetSimilarProblemsAsync(problemId, count, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting similar problems for {ProblemId}\", problemId);\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<List<ProblemDto>> GetRecommendationsAsync(string userId, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would use user's solving history, preferences, etc.\n            return await _vectorSearchService.GetPersonalizedRecommendationsAsync(userId, count, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting recommendations for user {UserId}\", userId);\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<bool> IndexProblemAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            await _vectorSearchService.IndexProblemAsync(problemId, cancellationToken);\n            await _eventPublisher.PublishAsync(\"problem.indexed\", new { ProblemId = problemId }, cancellationToken);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error indexing problem {ProblemId}\", problemId);\n            return false;\n        }\n    }\n\n    public async Task<bool> UpdateProblemIndexAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            await _vectorSearchService.UpdateProblemIndexAsync(problemId, cancellationToken);\n            await _eventPublisher.PublishAsync(\"problem.index_updated\", new { ProblemId = problemId }, cancellationToken);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating problem index {ProblemId}\", problemId);\n            return false;\n        }\n    }\n\n    public async Task<bool> DeleteProblemIndexAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            await _vectorSearchService.DeleteProblemIndexAsync(problemId, cancellationToken);\n            await _eventPublisher.PublishAsync(\"problem.index_deleted\", new { ProblemId = problemId }, cancellationToken);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting problem index {ProblemId}\", problemId);\n            return false;\n        }\n    }\n\n    public async Task<List<string>> GetSearchSuggestionsAsync(string query, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Generate suggestions based on popular searches and query similarity\n            var suggestions = new List<string>();\n\n            // Add common programming terms that match the query\n            var commonTerms = new[]\n            {\n                \"array\", \"linked list\", \"binary tree\", \"graph\", \"dynamic programming\",\n                \"sorting\", \"searching\", \"hash table\", \"queue\", \"stack\", \"heap\",\n                \"two pointers\", \"sliding window\", \"backtracking\", \"greedy\",\n                \"binary search\", \"depth-first search\", \"breadth-first search\"\n            };\n\n            suggestions.AddRange(commonTerms\n                .Where(term => term.Contains(query.ToLower(), StringComparison.OrdinalIgnoreCase))\n                .Take(count));\n\n            return suggestions;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating search suggestions\");\n            return new List<string>();\n        }\n    }\n\n    public async Task<List<ProblemDto>> SearchByTagsAsync(List<string> tags, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await _vectorSearchService.SearchByTagsAsync(tags, count, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching by tags\");\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<SearchAnalyticsDto> GetSearchAnalyticsAsync(CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would query analytics database\n            return new SearchAnalyticsDto\n            {\n                PopularSearches = new List<PopularSearchDto>\n                {\n                    new() { Query = \"binary tree\", Count = 1523, LastSearched = DateTime.UtcNow.AddHours(-1) },\n                    new() { Query = \"dynamic programming\", Count = 1245, LastSearched = DateTime.UtcNow.AddHours(-2) },\n                    new() { Query = \"graph algorithms\", Count = 987, LastSearched = DateTime.UtcNow.AddHours(-3) }\n                },\n                TrendingTags = new List<string> { \"array\", \"tree\", \"dp\", \"graph\", \"sorting\" },\n                SearchFrequency = new Dictionary<string, int>\n                {\n                    [\"today\"] = 5420,\n                    [\"yesterday\"] = 4890,\n                    [\"this_week\"] = 32100\n                },\n                AverageSearchTime = 145.2\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting search analytics\");\n            return new SearchAnalyticsDto();\n        }\n    }\n\n    private List<ProblemDto> ApplyFilters(List<ProblemDto> problems, SearchRequestDto request)\n    {\n        var query = problems.AsQueryable();\n\n        if (!string.IsNullOrEmpty(request.Difficulty))\n        {\n            query = query.Where(p => p.Difficulty.Equals(request.Difficulty, StringComparison.OrdinalIgnoreCase));\n        }\n\n        if (!string.IsNullOrEmpty(request.Category))\n        {\n            query = query.Where(p => p.CategoryId == request.Category);\n        }\n\n        if (request.IsPaid.HasValue)\n        {\n            query = query.Where(p => p.IsPaid == request.IsPaid.Value);\n        }\n\n        if (request.Tags?.Any() == true)\n        {\n            query = query.Where(p => p.Tags.Any(tag => request.Tags.Contains(tag)));\n        }\n\n        // Apply sorting\n        query = request.SortBy?.ToLower() switch\n        {\n            \"difficulty\" => request.SortOrder == \"desc\" \n                ? query.OrderByDescending(p => p.Difficulty) \n                : query.OrderBy(p => p.Difficulty),\n            \"title\" => request.SortOrder == \"desc\" \n                ? query.OrderByDescending(p => p.Title) \n                : query.OrderBy(p => p.Title),\n            \"createdat\" => request.SortOrder == \"desc\" \n                ? query.OrderByDescending(p => p.CreatedAt) \n                : query.OrderBy(p => p.CreatedAt),\n            _ => query.OrderBy(p => p.OrderIndex)\n        };\n\n        return query.ToList();\n    }\n\n    private Dictionary<string, int> BuildFacets(List<ProblemDto> problems)\n    {\n        return new Dictionary<string, int>\n        {\n            [\"Easy\"] = problems.Count(p => p.Difficulty == \"Easy\"),\n            [\"Medium\"] = problems.Count(p => p.Difficulty == \"Medium\"),\n            [\"Hard\"] = problems.Count(p => p.Difficulty == \"Hard\"),\n            [\"Free\"] = problems.Count(p => !p.IsPaid),\n            [\"Premium\"] = problems.Count(p => p.IsPaid)\n        };\n    }\n\n    private async Task TrackSearchAsync(string query, int resultCount, double searchTime, CancellationToken cancellationToken)\n    {\n        try\n        {\n            await _eventPublisher.PublishAsync(\"search.performed\", new \n            { \n                Query = query, \n                ResultCount = resultCount, \n                SearchTime = searchTime,\n                Timestamp = DateTime.UtcNow \n            }, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error tracking search analytics\");\n        }\n    }\n}\n\n","size_bytes":10852},"backend/src/Services/DSAGrind.Search.API/Services/VectorSearchService.cs":{"content":"using DSAGrind.Models.DTOs;\nusing Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nnamespace DSAGrind.Search.API.Services;\n\npublic class VectorSearchService : IVectorSearchService\n{\n    private readonly QdrantClient _qdrantClient;\n    private readonly ILogger<VectorSearchService> _logger;\n    private const string COLLECTION_NAME = \"problems\";\n\n    public VectorSearchService(QdrantClient qdrantClient, ILogger<VectorSearchService> logger)\n    {\n        _qdrantClient = qdrantClient;\n        _logger = logger;\n    }\n\n    public async Task<List<ProblemDto>> SearchProblemsAsync(string query, int limit, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would:\n            // 1. Generate embeddings for the query using an embedding model\n            // 2. Perform vector search in Qdrant\n            // 3. Return the most similar problems\n\n            // For now, return sample problems\n            return await Task.FromResult(GetSampleProblems().Take(limit).ToList());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error performing vector search for query: {Query}\", query);\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would:\n            // 1. Get the vector for the given problem\n            // 2. Search for similar vectors\n            // 3. Return similar problems\n\n            return await Task.FromResult(GetSampleProblems().Take(count).ToList());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting similar problems for {ProblemId}\", problemId);\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<List<ProblemDto>> GetPersonalizedRecommendationsAsync(string userId, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would:\n            // 1. Analyze user's solving history\n            // 2. Find patterns in their preferences\n            // 3. Recommend similar problems they haven't solved\n\n            return await Task.FromResult(GetSampleProblems().Take(count).ToList());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting personalized recommendations for user {UserId}\", userId);\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task<List<ProblemDto>> SearchByTagsAsync(List<string> tags, int count, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Filter sample problems by tags\n            var filteredProblems = GetSampleProblems()\n                .Where(p => p.Tags.Any(tag => tags.Contains(tag, StringComparer.OrdinalIgnoreCase)))\n                .Take(count)\n                .ToList();\n\n            return await Task.FromResult(filteredProblems);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error searching by tags\");\n            return new List<ProblemDto>();\n        }\n    }\n\n    public async Task IndexProblemAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would:\n            // 1. Fetch problem details from Problems API\n            // 2. Generate embeddings for title, description, and tags\n            // 3. Store the vector in Qdrant with metadata\n\n            _logger.LogInformation(\"Indexing problem {ProblemId}\", problemId);\n            await Task.Delay(100, cancellationToken); // Simulate indexing work\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error indexing problem {ProblemId}\", problemId);\n            throw;\n        }\n    }\n\n    public async Task UpdateProblemIndexAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would:\n            // 1. Delete the existing vector\n            // 2. Re-index with updated problem data\n\n            _logger.LogInformation(\"Updating problem index {ProblemId}\", problemId);\n            await Task.Delay(100, cancellationToken); // Simulate update work\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating problem index {ProblemId}\", problemId);\n            throw;\n        }\n    }\n\n    public async Task DeleteProblemIndexAsync(string problemId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, this would delete the vector from Qdrant\n            _logger.LogInformation(\"Deleting problem index {ProblemId}\", problemId);\n            await Task.Delay(50, cancellationToken); // Simulate deletion work\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting problem index {ProblemId}\", problemId);\n            throw;\n        }\n    }\n\n    private List<ProblemDto> GetSampleProblems()\n    {\n        return new List<ProblemDto>\n        {\n            new()\n            {\n                Id = \"1\",\n                Title = \"Two Sum\",\n                Slug = \"two-sum\",\n                Description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n                Difficulty = \"Easy\",\n                CategoryId = \"arrays\",\n                Tags = new List<string> { \"array\", \"hash-table\" },\n                IsPaid = false,\n                Status = \"approved\",\n                CreatedAt = DateTime.UtcNow.AddDays(-30),\n                UpdatedAt = DateTime.UtcNow.AddDays(-30),\n                OrderIndex = 1,\n                Statistics = new ProblemStatisticsDto\n                {\n                    TotalSubmissions = 1245,\n                    AcceptedSubmissions = 867,\n                    AcceptanceRate = 69.6,\n                    Views = 5420,\n                    Likes = 342,\n                    Dislikes = 23\n                }\n            },\n            new()\n            {\n                Id = \"2\", \n                Title = \"Add Two Numbers\",\n                Slug = \"add-two-numbers\",\n                Description = \"You are given two non-empty linked lists representing two non-negative integers.\",\n                Difficulty = \"Medium\",\n                CategoryId = \"linked-lists\",\n                Tags = new List<string> { \"linked-list\", \"math\", \"recursion\" },\n                IsPaid = false,\n                Status = \"approved\",\n                CreatedAt = DateTime.UtcNow.AddDays(-25),\n                UpdatedAt = DateTime.UtcNow.AddDays(-25),\n                OrderIndex = 2,\n                Statistics = new ProblemStatisticsDto\n                {\n                    TotalSubmissions = 987,\n                    AcceptedSubmissions = 543,\n                    AcceptanceRate = 55.0,\n                    Views = 3210,\n                    Likes = 287,\n                    Dislikes = 45\n                }\n            },\n            new()\n            {\n                Id = \"3\",\n                Title = \"Longest Substring Without Repeating Characters\",\n                Slug = \"longest-substring-without-repeating-characters\",\n                Description = \"Given a string s, find the length of the longest substring without repeating characters.\",\n                Difficulty = \"Medium\",\n                CategoryId = \"strings\",\n                Tags = new List<string> { \"hash-table\", \"string\", \"sliding-window\" },\n                IsPaid = false,\n                Status = \"approved\",\n                CreatedAt = DateTime.UtcNow.AddDays(-20),\n                UpdatedAt = DateTime.UtcNow.AddDays(-20),\n                OrderIndex = 3,\n                Statistics = new ProblemStatisticsDto\n                {\n                    TotalSubmissions = 2345,\n                    AcceptedSubmissions = 1123,\n                    AcceptanceRate = 47.9,\n                    Views = 8765,\n                    Likes = 543,\n                    Dislikes = 87\n                }\n            },\n            new()\n            {\n                Id = \"4\",\n                Title = \"Median of Two Sorted Arrays\",\n                Slug = \"median-of-two-sorted-arrays\",\n                Description = \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\",\n                Difficulty = \"Hard\",\n                CategoryId = \"arrays\",\n                Tags = new List<string> { \"array\", \"binary-search\", \"divide-and-conquer\" },\n                IsPaid = true,\n                Status = \"approved\",\n                CreatedAt = DateTime.UtcNow.AddDays(-15),\n                UpdatedAt = DateTime.UtcNow.AddDays(-15),\n                OrderIndex = 4,\n                Statistics = new ProblemStatisticsDto\n                {\n                    TotalSubmissions = 567,\n                    AcceptedSubmissions = 145,\n                    AcceptanceRate = 25.6,\n                    Views = 2134,\n                    Likes = 189,\n                    Dislikes = 67\n                }\n            },\n            new()\n            {\n                Id = \"5\",\n                Title = \"Longest Palindromic Substring\",\n                Slug = \"longest-palindromic-substring\",\n                Description = \"Given a string s, return the longest palindromic substring in s.\",\n                Difficulty = \"Medium\",\n                CategoryId = \"strings\",\n                Tags = new List<string> { \"string\", \"dynamic-programming\" },\n                IsPaid = false,\n                Status = \"approved\",\n                CreatedAt = DateTime.UtcNow.AddDays(-10),\n                UpdatedAt = DateTime.UtcNow.AddDays(-10),\n                OrderIndex = 5,\n                Statistics = new ProblemStatisticsDto\n                {\n                    TotalSubmissions = 1876,\n                    AcceptedSubmissions = 934,\n                    AcceptanceRate = 49.8,\n                    Views = 6543,\n                    Likes = 432,\n                    Dislikes = 56\n                }\n            }\n        };\n    }\n}","size_bytes":10279},"backend/src/Services/DSAGrind.Submissions.API/Controllers/HealthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Submissions.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult GetHealth()\n    {\n        return Ok(new \n        { \n            status = \"healthy\", \n            service = \"DSAGrind.Submissions.API\",\n            timestamp = DateTime.UtcNow \n        });\n    }\n}","size_bytes":408},"backend/src/Services/DSAGrind.Submissions.API/Controllers/SubmissionsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing System.Security.Claims;\nusing DSAGrind.Submissions.API.Services;\n\nnamespace DSAGrind.Submissions.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\n[Authorize]\npublic class SubmissionsController : ControllerBase\n{\n    private readonly ISubmissionService _submissionService;\n    private readonly ILogger<SubmissionsController> _logger;\n\n    public SubmissionsController(ISubmissionService submissionService, ILogger<SubmissionsController> logger)\n    {\n        _submissionService = submissionService;\n        _logger = logger;\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<SubmissionDto>> GetSubmission(string id)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var submission = await _submissionService.GetSubmissionAsync(id, userId);\n            if (submission == null)\n            {\n                return NotFound();\n            }\n            \n            return Ok(submission);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting submission {SubmissionId}\", id);\n            return StatusCode(500, new { message = \"An error occurred while getting submission\" });\n        }\n    }\n\n    [HttpGet]\n    public async Task<ActionResult<List<SubmissionDto>>> GetSubmissions([FromQuery] string? problemId = null, [FromQuery] int page = 1, [FromQuery] int pageSize = 20)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var submissions = await _submissionService.GetUserSubmissionsAsync(userId, problemId, page, pageSize);\n            return Ok(submissions);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting user submissions\");\n            return StatusCode(500, new { message = \"An error occurred while getting submissions\" });\n        }\n    }\n\n    [HttpPost]\n    public async Task<ActionResult<SubmissionDto>> CreateSubmission([FromBody] CreateSubmissionRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var submission = await _submissionService.CreateSubmissionAsync(request, userId);\n            return CreatedAtAction(nameof(GetSubmission), new { id = submission.Id }, submission);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating submission\");\n            return StatusCode(500, new { message = \"An error occurred while creating submission\" });\n        }\n    }\n\n    [HttpPost(\"execute\")]\n    public async Task<ActionResult<CodeExecutionResultDto>> ExecuteCode([FromBody] CodeExecutionRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var result = await _submissionService.ExecuteCodeAsync(request, userId);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing code\");\n            return StatusCode(500, new { message = \"An error occurred while executing code\" });\n        }\n    }\n\n    [HttpPost(\"test\")]\n    public async Task<ActionResult<CodeExecutionResultDto>> TestCode([FromBody] CodeTestRequestDto request)\n    {\n        try\n        {\n            var userId = GetCurrentUserId();\n            if (string.IsNullOrEmpty(userId))\n            {\n                return Unauthorized();\n            }\n\n            var result = await _submissionService.TestCodeAsync(request, userId);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error testing code\");\n            return StatusCode(500, new { message = \"An error occurred while testing code\" });\n        }\n    }\n\n    [HttpGet(\"languages\")]\n    [AllowAnonymous]\n    public async Task<ActionResult<List<string>>> GetSupportedLanguages()\n    {\n        try\n        {\n            var languages = await _submissionService.GetSupportedLanguagesAsync();\n            return Ok(languages);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting supported languages\");\n            return StatusCode(500, new { message = \"An error occurred while getting supported languages\" });\n        }\n    }\n\n    [HttpGet(\"leaderboard/{problemId}\")]\n    [AllowAnonymous]\n    public async Task<ActionResult<List<SubmissionDto>>> GetLeaderboard(string problemId, [FromQuery] int limit = 10)\n    {\n        try\n        {\n            var leaderboard = await _submissionService.GetLeaderboardAsync(problemId, limit);\n            return Ok(leaderboard);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting leaderboard for problem {ProblemId}\", problemId);\n            return StatusCode(500, new { message = \"An error occurred while getting leaderboard\" });\n        }\n    }\n\n    private string? GetCurrentUserId()\n    {\n        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n}","size_bytes":5428},"backend/src/Services/DSAGrind.Submissions.API/Services/CodeExecutionService.cs":{"content":"using Docker.DotNet;\nusing Docker.DotNet.Models;\nusing System.Text;\nusing System.Text.Json;\n\nnamespace DSAGrind.Submissions.API.Services;\n\npublic class CodeExecutionService : ICodeExecutionService\n{\n    private readonly DockerClient _dockerClient;\n    private readonly ILogger<CodeExecutionService> _logger;\n    private readonly Dictionary<string, ExecutorConfig> _executorConfigs;\n\n    public CodeExecutionService(ILogger<CodeExecutionService> logger)\n    {\n        _dockerClient = new DockerClientConfiguration().CreateClient();\n        _logger = logger;\n        _executorConfigs = InitializeExecutorConfigs();\n    }\n\n    public async Task<CodeExecutionResultDto> ExecuteCodeAsync(string problemId, string code, string language, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // In a real implementation, fetch problem test cases from Problems API\n            var testCases = await GetProblemTestCasesAsync(problemId, cancellationToken);\n            \n            var results = new List<TestResultDto>();\n            var totalRuntime = 0;\n            var totalMemory = 0;\n\n            foreach (var (testCase, index) in testCases.Select((tc, i) => (tc, i)))\n            {\n                var result = await ExecuteCodeForTestCaseAsync(code, language, testCase.Input, testCase.ExpectedOutput, cancellationToken);\n                \n                results.Add(new TestResultDto\n                {\n                    TestCaseIndex = index,\n                    Passed = result.Status == \"success\" && result.Output?.Trim() == testCase.ExpectedOutput.Trim(),\n                    Input = testCase.Input,\n                    ExpectedOutput = testCase.ExpectedOutput,\n                    ActualOutput = result.Output ?? \"\",\n                    Runtime = result.Runtime,\n                    Memory = result.Memory,\n                    ErrorMessage = result.ErrorMessage\n                });\n\n                totalRuntime += result.Runtime;\n                totalMemory = Math.Max(totalMemory, result.Memory);\n            }\n\n            var allPassed = results.All(r => r.Passed);\n            var status = allPassed ? \"accepted\" : \"wrong_answer\";\n\n            return new CodeExecutionResultDto\n            {\n                Status = status,\n                Runtime = totalRuntime / testCases.Count, // Average runtime\n                Memory = totalMemory,\n                TestResults = results,\n                ExecutionDetails = new ExecutionDetailsDto\n                {\n                    TotalRuntime = totalRuntime,\n                    PeakMemoryUsage = totalMemory,\n                    ExecutorVersion = \"docker-v1.0\",\n                    SandboxInfo = new SandboxInfoDto\n                    {\n                        ExecutionStartTime = DateTime.UtcNow,\n                        ExecutionEndTime = DateTime.UtcNow.AddMilliseconds(totalRuntime),\n                        ResourceLimits = new ResourceLimitsDto\n                        {\n                            TimeLimit = 1000,\n                            MemoryLimit = 256,\n                            CpuLimit = 1.0\n                        }\n                    }\n                }\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing code for problem {ProblemId}\", problemId);\n            return new CodeExecutionResultDto\n            {\n                Status = \"error\",\n                ErrorMessage = \"Execution failed: \" + ex.Message,\n                ExecutionDetails = new ExecutionDetailsDto()\n            };\n        }\n    }\n\n    public async Task<CodeExecutionResultDto> TestCodeAsync(string code, string language, string input, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var result = await ExecuteCodeForTestCaseAsync(code, language, input, \"\", cancellationToken);\n            \n            return new CodeExecutionResultDto\n            {\n                Status = result.Status,\n                Output = result.Output,\n                ErrorMessage = result.ErrorMessage,\n                Runtime = result.Runtime,\n                Memory = result.Memory,\n                ExecutionDetails = new ExecutionDetailsDto\n                {\n                    TotalRuntime = result.Runtime,\n                    PeakMemoryUsage = result.Memory,\n                    ExecutorVersion = \"docker-v1.0\"\n                }\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error testing code\");\n            return new CodeExecutionResultDto\n            {\n                Status = \"error\",\n                ErrorMessage = \"Test execution failed: \" + ex.Message,\n                ExecutionDetails = new ExecutionDetailsDto()\n            };\n        }\n    }\n\n    public async Task<List<string>> GetSupportedLanguagesAsync(CancellationToken cancellationToken = default)\n    {\n        return await Task.FromResult(_executorConfigs.Keys.ToList());\n    }\n\n    private async Task<ExecutionResult> ExecuteCodeForTestCaseAsync(string code, string language, string input, string expectedOutput, CancellationToken cancellationToken)\n    {\n        if (!_executorConfigs.TryGetValue(language.ToLower(), out var config))\n        {\n            return new ExecutionResult\n            {\n                Status = \"error\",\n                ErrorMessage = $\"Unsupported language: {language}\"\n            };\n        }\n\n        var startTime = DateTime.UtcNow;\n        \n        try\n        {\n            // Create container\n            var createResponse = await _dockerClient.Containers.CreateContainerAsync(new CreateContainerParameters\n            {\n                Image = config.Image,\n                Cmd = config.GetExecutionCommand(code),\n                NetworkDisabled = true,\n                HostConfig = new HostConfig\n                {\n                    Memory = 256 * 1024 * 1024, // 256 MB\n                    CPUQuota = 100000, // 1 CPU\n                    AutoRemove = true\n                },\n                WorkingDir = \"/app\"\n            }, cancellationToken);\n\n            // Start container\n            await _dockerClient.Containers.StartContainerAsync(createResponse.ID, new ContainerStartParameters(), cancellationToken);\n\n            // Send input if provided (simplified for now)\n            if (!string.IsNullOrEmpty(input))\n            {\n                _logger.LogInformation(\"Input provided: {Input}\", input);\n                // TODO: Implement proper input handling with correct Docker API\n            }\n\n            // Wait for container to finish\n            var waitResponse = await _dockerClient.Containers.WaitContainerAsync(createResponse.ID, cancellationToken);\n\n            // Get logs\n            var logsStream = await _dockerClient.Containers.GetContainerLogsAsync(createResponse.ID,\n                new ContainerLogsParameters\n                {\n                    ShowStdout = true,\n                    ShowStderr = true\n                }, cancellationToken);\n\n            using var reader = new StreamReader(logsStream);\n            var output = await reader.ReadToEndAsync();\n\n            var runtime = (int)(DateTime.UtcNow - startTime).TotalMilliseconds;\n\n            return new ExecutionResult\n            {\n                Status = waitResponse.StatusCode == 0 ? \"success\" : \"error\",\n                Output = output.Trim(),\n                ErrorMessage = waitResponse.StatusCode != 0 ? \"Runtime error\" : null,\n                Runtime = runtime,\n                Memory = 64 // Simplified memory tracking\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Docker execution failed\");\n            return new ExecutionResult\n            {\n                Status = \"error\",\n                ErrorMessage = ex.Message,\n                Runtime = (int)(DateTime.UtcNow - startTime).TotalMilliseconds\n            };\n        }\n    }\n\n    private async Task<List<(string Input, string ExpectedOutput)>> GetProblemTestCasesAsync(string problemId, CancellationToken cancellationToken)\n    {\n        // In a real implementation, this would call the Problems API\n        // For now, return sample test cases\n        return await Task.FromResult(new List<(string, string)>\n        {\n            (\"5\", \"5\"),\n            (\"10\", \"10\"),\n            (\"0\", \"0\")\n        });\n    }\n\n    private Dictionary<string, ExecutorConfig> InitializeExecutorConfigs()\n    {\n        return new Dictionary<string, ExecutorConfig>\n        {\n            [\"python\"] = new ExecutorConfig\n            {\n                Image = \"python:3.9-slim\",\n                FileExtension = \".py\",\n                CompileCommand = null,\n                ExecuteCommand = \"python /app/solution.py\"\n            },\n            [\"javascript\"] = new ExecutorConfig\n            {\n                Image = \"node:18-slim\",\n                FileExtension = \".js\", \n                CompileCommand = null,\n                ExecuteCommand = \"node /app/solution.js\"\n            },\n            [\"java\"] = new ExecutorConfig\n            {\n                Image = \"openjdk:11-slim\",\n                FileExtension = \".java\",\n                CompileCommand = \"javac /app/Solution.java\",\n                ExecuteCommand = \"java -cp /app Solution\"\n            },\n            [\"cpp\"] = new ExecutorConfig\n            {\n                Image = \"gcc:latest\",\n                FileExtension = \".cpp\",\n                CompileCommand = \"g++ -o /app/solution /app/solution.cpp\",\n                ExecuteCommand = \"/app/solution\"\n            },\n            [\"csharp\"] = new ExecutorConfig\n            {\n                Image = \"mcr.microsoft.com/dotnet/sdk:8.0\",\n                FileExtension = \".cs\",\n                CompileCommand = \"dotnet build /app\",\n                ExecuteCommand = \"dotnet run --project /app\"\n            }\n        };\n    }\n\n    private class ExecutorConfig\n    {\n        public string Image { get; set; } = \"\";\n        public string FileExtension { get; set; } = \"\";\n        public string? CompileCommand { get; set; }\n        public string ExecuteCommand { get; set; } = \"\";\n\n        public List<string> GetExecutionCommand(string code)\n        {\n            var commands = new List<string> { \"/bin/sh\", \"-c\" };\n            \n            var script = $\"echo '{code.Replace(\"'\", \"'\\\\''\")}' > /app/solution{FileExtension}\";\n            \n            if (!string.IsNullOrEmpty(CompileCommand))\n            {\n                script += $\" && {CompileCommand}\";\n            }\n            \n            script += $\" && {ExecuteCommand}\";\n            \n            commands.Add(script);\n            return commands;\n        }\n    }\n\n    private class ExecutionResult\n    {\n        public string Status { get; set; } = \"\";\n        public string? Output { get; set; }\n        public string? ErrorMessage { get; set; }\n        public int Runtime { get; set; }\n        public int Memory { get; set; }\n    }\n}","size_bytes":10927},"backend/src/Services/DSAGrind.Submissions.API/Services/ICodeExecutionService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Submissions.API.Services;\n\npublic interface ICodeExecutionService\n{\n    Task<CodeExecutionResultDto> ExecuteCodeAsync(string problemId, string code, string language, CancellationToken cancellationToken = default);\n    Task<CodeExecutionResultDto> TestCodeAsync(string code, string language, string input, CancellationToken cancellationToken = default);\n    Task<List<string>> GetSupportedLanguagesAsync(CancellationToken cancellationToken = default);\n}","size_bytes":500},"backend/src/Services/DSAGrind.Submissions.API/Services/ISubmissionService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Submissions.API.Services;\n\npublic interface ISubmissionService\n{\n    Task<SubmissionDto?> GetSubmissionAsync(string id, string userId, CancellationToken cancellationToken = default);\n    Task<List<SubmissionDto>> GetUserSubmissionsAsync(string userId, string? problemId = null, int page = 1, int pageSize = 20, CancellationToken cancellationToken = default);\n    Task<SubmissionDto> CreateSubmissionAsync(CreateSubmissionRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<CodeExecutionResultDto> ExecuteCodeAsync(CodeExecutionRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<CodeExecutionResultDto> TestCodeAsync(CodeTestRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<List<string>> GetSupportedLanguagesAsync(CancellationToken cancellationToken = default);\n    Task<List<SubmissionDto>> GetLeaderboardAsync(string problemId, int limit = 10, CancellationToken cancellationToken = default);\n}\n\npublic class SubmissionDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public int? Runtime { get; set; }\n    public int? Memory { get; set; }\n    public List<TestResultDto> TestResults { get; set; } = new();\n    public string? ErrorMessage { get; set; }\n    public ExecutionDetailsDto ExecutionDetails { get; set; } = new();\n    public bool IsPublic { get; set; }\n    public string? Notes { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class TestResultDto\n{\n    public int TestCaseIndex { get; set; }\n    public bool Passed { get; set; }\n    public string Input { get; set; } = string.Empty;\n    public string ExpectedOutput { get; set; } = string.Empty;\n    public string ActualOutput { get; set; } = string.Empty;\n    public int Runtime { get; set; }\n    public int Memory { get; set; }\n    public string? ErrorMessage { get; set; }\n}\n\npublic class ExecutionDetailsDto\n{\n    public int CompilationTime { get; set; }\n    public int TotalRuntime { get; set; }\n    public int PeakMemoryUsage { get; set; }\n    public string ExecutorVersion { get; set; } = string.Empty;\n    public SandboxInfoDto SandboxInfo { get; set; } = new();\n}\n\npublic class SandboxInfoDto\n{\n    public string ContainerId { get; set; } = string.Empty;\n    public DateTime ExecutionStartTime { get; set; }\n    public DateTime ExecutionEndTime { get; set; }\n    public ResourceLimitsDto ResourceLimits { get; set; } = new();\n}\n\npublic class ResourceLimitsDto\n{\n    public int TimeLimit { get; set; } = 1000;\n    public int MemoryLimit { get; set; } = 256;\n    public double CpuLimit { get; set; } = 1.0;\n}\n\npublic class CreateSubmissionRequestDto\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string? Notes { get; set; }\n    public bool IsPublic { get; set; } = false;\n}\n\npublic class CodeExecutionRequestDto\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\npublic class CodeTestRequestDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string Input { get; set; } = string.Empty;\n}\n\npublic class CodeExecutionResultDto\n{\n    public string Status { get; set; } = string.Empty;\n    public string? Output { get; set; }\n    public string? ErrorMessage { get; set; }\n    public int Runtime { get; set; }\n    public int Memory { get; set; }\n    public List<TestResultDto> TestResults { get; set; } = new();\n    public ExecutionDetailsDto ExecutionDetails { get; set; } = new();\n}","size_bytes":4058},"backend/src/Services/DSAGrind.Submissions.API/Services/SubmissionService.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Common.Services;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\nusing AutoMapper;\nusing MongoDB.Bson;\n\nnamespace DSAGrind.Submissions.API.Services;\n\npublic class SubmissionService : ISubmissionService\n{\n    private readonly IMongoRepository<Submission> _submissionRepository;\n    private readonly ICodeExecutionService _codeExecutionService;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IMapper _mapper;\n    private readonly ILogger<SubmissionService> _logger;\n\n    public SubmissionService(\n        IMongoRepository<Submission> submissionRepository,\n        ICodeExecutionService codeExecutionService,\n        IEventPublisher eventPublisher,\n        IMapper mapper,\n        ILogger<SubmissionService> logger)\n    {\n        _submissionRepository = submissionRepository;\n        _codeExecutionService = codeExecutionService;\n        _eventPublisher = eventPublisher;\n        _mapper = mapper;\n        _logger = logger;\n    }\n\n    public async Task<SubmissionDto?> GetSubmissionAsync(string id, string userId, CancellationToken cancellationToken = default)\n    {\n        var submission = await _submissionRepository.GetByIdAsync(id, cancellationToken);\n        if (submission == null || submission.UserId != userId) return null;\n\n        return _mapper.Map<SubmissionDto>(submission);\n    }\n\n    public async Task<List<SubmissionDto>> GetUserSubmissionsAsync(string userId, string? problemId = null, int page = 1, int pageSize = 20, CancellationToken cancellationToken = default)\n    {\n        var submissions = await _submissionRepository.GetManyAsync(\n            s => s.UserId == userId && (problemId == null || s.ProblemId == problemId),\n            cancellationToken);\n\n        return _mapper.Map<List<SubmissionDto>>(submissions);\n    }\n\n    public async Task<SubmissionDto> CreateSubmissionAsync(CreateSubmissionRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        var submission = new Submission\n        {\n            Id = Guid.NewGuid().ToString(),\n            UserId = userId,\n            ProblemId = request.ProblemId,\n            Code = request.Code,\n            Language = request.Language,\n            Status = \"pending\",\n            IsPublic = request.IsPublic,\n            Notes = request.Notes,\n            CreatedAt = DateTime.UtcNow,\n            ExecutionDetails = new ExecutionDetails()\n        };\n\n        await _submissionRepository.CreateAsync(submission, cancellationToken);\n\n        // Execute the code\n        var executionResult = await _codeExecutionService.ExecuteCodeAsync(request.ProblemId, request.Code, request.Language, cancellationToken);\n        \n        // Update submission with results\n        submission.Status = executionResult.Status;\n        submission.Runtime = executionResult.Runtime;\n        submission.Memory = executionResult.Memory;\n        submission.TestResults = _mapper.Map<List<TestResult>>(executionResult.TestResults);\n        submission.ErrorMessage = executionResult.ErrorMessage;\n        submission.ExecutionDetails = _mapper.Map<ExecutionDetails>(executionResult.ExecutionDetails);\n\n        await _submissionRepository.UpdateAsync(submission.Id, submission, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(\"submission.created\", new { SubmissionId = submission.Id, UserId = userId, Status = submission.Status }, cancellationToken);\n\n        return _mapper.Map<SubmissionDto>(submission);\n    }\n\n    public async Task<CodeExecutionResultDto> ExecuteCodeAsync(CodeExecutionRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        return await _codeExecutionService.ExecuteCodeAsync(request.ProblemId, request.Code, request.Language, cancellationToken);\n    }\n\n    public async Task<CodeExecutionResultDto> TestCodeAsync(CodeTestRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        return await _codeExecutionService.TestCodeAsync(request.Code, request.Language, request.Input, cancellationToken);\n    }\n\n    public async Task<List<string>> GetSupportedLanguagesAsync(CancellationToken cancellationToken = default)\n    {\n        return await _codeExecutionService.GetSupportedLanguagesAsync(cancellationToken);\n    }\n\n    public async Task<List<SubmissionDto>> GetLeaderboardAsync(string problemId, int limit = 10, CancellationToken cancellationToken = default)\n    {\n        var submissions = await _submissionRepository.GetManyAsync(\n            s => s.ProblemId == problemId && s.Status == \"accepted\",\n            cancellationToken);\n\n        // Sort by runtime ascending\n        var sortedSubmissions = submissions.OrderBy(s => s.Runtime).Take(limit).ToList();\n\n        return _mapper.Map<List<SubmissionDto>>(sortedSubmissions);\n    }\n}\n\n","size_bytes":4858},"backend/src/Services/DSAGrind.Unified.API/Controllers/AIController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Unified.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AIController : ControllerBase\n{\n    private readonly ILogger<AIController> _logger;\n\n    public AIController(ILogger<AIController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Generate hints for a coding problem\n    /// </summary>\n    [HttpPost(\"hint\")]\n    public async Task<IActionResult> GenerateHint([FromBody] HintRequest request)\n    {\n        _logger.LogInformation(\"Generating hint for problem: {ProblemId}, level: {Level}\", request.ProblemId, request.HintLevel);\n        \n        await Task.Delay(500); // Simulate AI processing time\n        \n        var hints = new Dictionary<int, string>\n        {\n            [1] = \"Think about what data structure would help you look up values efficiently. Consider the relationship between the target and each number in the array.\",\n            [2] = \"A hash table (dictionary) can store numbers you've seen before. As you iterate through the array, check if the complement (target - current number) exists in your hash table.\",\n            [3] = \"Here's the approach: Create a hash map, iterate through the array once, and for each number, check if (target - number) exists in the map. If yes, return the indices. If no, add the current number and its index to the map.\"\n        };\n        \n        var hint = hints.GetValueOrDefault(request.HintLevel, \"Try breaking down the problem into smaller steps and think about the most efficient approach.\");\n        \n        return Ok(new { hint, hintLevel = request.HintLevel, nextHintAvailable = request.HintLevel < 3 });\n    }\n\n    /// <summary>\n    /// Explain a solution with detailed analysis\n    /// </summary>\n    [HttpPost(\"explain\")]\n    public async Task<IActionResult> ExplainSolution([FromBody] ExplainRequest request)\n    {\n        _logger.LogInformation(\"Explaining solution for problem: {ProblemId}\", request.ProblemId);\n        \n        await Task.Delay(800); // Simulate AI processing time\n        \n        return Ok(new\n        {\n            explanation = \"This solution uses the Two Pointer technique combined with a Hash Map approach:\\n\\n\" +\n                         \"1. **Algorithm**: We iterate through the array once, and for each element, we check if its complement (target - current element) exists in our hash map.\\n\\n\" +\n                         \"2. **Time Complexity**: O(n) - We traverse the array exactly once\\n\\n\" +\n                         \"3. **Space Complexity**: O(n) - In the worst case, we store all n elements in the hash map\\n\\n\" +\n                         \"4. **Key Insight**: Instead of checking all pairs (which would be O(n²)), we use the hash map to achieve O(1) lookups\\n\\n\" +\n                         \"5. **Implementation Details**: \\n\" +\n                         \"   - For each number at index i, we calculate complement = target - nums[i]\\n\" +\n                         \"   - If complement exists in our map, we found our pair\\n\" +\n                         \"   - Otherwise, we add nums[i] and its index to the map\",\n            timeComplexity = \"O(n)\",\n            spaceComplexity = \"O(n)\",\n            approach = \"Hash Map / Two Pass\",\n            keyInsights = new[]\n            {\n                \"Use complement lookup instead of nested loops\",\n                \"Hash map provides O(1) lookup time\", \n                \"Store indices as values for easy retrieval\"\n            }\n        });\n    }\n\n    /// <summary>\n    /// Analyze code for complexity and potential improvements\n    /// </summary>\n    [HttpPost(\"analyze\")]\n    public async Task<IActionResult> AnalyzeCode([FromBody] AnalyzeRequest request)\n    {\n        _logger.LogInformation(\"Analyzing code for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        await Task.Delay(600);\n        \n        return Ok(new\n        {\n            analysis = new\n            {\n                timeComplexity = \"O(n)\",\n                spaceComplexity = \"O(n)\",\n                codeQuality = \"Good\",\n                readability = 8.5m,\n                efficiency = 9.2m,\n                correctness = \"Likely Correct\"\n            },\n            suggestions = new[]\n            {\n                \"Consider edge cases: empty array, single element, no solution\",\n                \"Add input validation for null arrays\",\n                \"Variable names are clear and descriptive - good practice\",\n                \"Consider using more descriptive variable names than 'i' and 'j'\"\n            },\n            strengths = new[]\n            {\n                \"Efficient hash map approach\",\n                \"Clean and readable code structure\", \n                \"Good use of early return pattern\"\n            },\n            potentialIssues = new[]\n            {\n                \"No null checking for input array\",\n                \"Assumes exactly one solution exists (as per problem constraint)\"\n            }\n        });\n    }\n\n    /// <summary>\n    /// Get code optimization suggestions\n    /// </summary>\n    [HttpPost(\"optimize\")]\n    public async Task<IActionResult> OptimizeCode([FromBody] OptimizeRequest request)\n    {\n        _logger.LogInformation(\"Optimizing code for language: {Language}\", request.Language);\n        \n        await Task.Delay(700);\n        \n        var optimizedCode = request.Language.ToLower() switch\n        {\n            \"csharp\" => @\"public int[] TwoSum(int[] nums, int target) {\n    if (nums == null || nums.Length < 2) \n        return new int[0]; // Handle edge cases\n        \n    var numToIndex = new Dictionary<int, int>(nums.Length);\n    \n    for (int i = 0; i < nums.Length; i++) {\n        int complement = target - nums[i];\n        \n        if (numToIndex.TryGetValue(complement, out int complementIndex)) {\n            return new int[] { complementIndex, i };\n        }\n        \n        numToIndex[nums[i]] = i; // Only add if not found\n    }\n    \n    return new int[0]; // No solution found\n}\",\n            \"python\" => @\"def twoSum(self, nums: List[int], target: int) -> List[int]:\n    if not nums or len(nums) < 2:\n        return []\n    \n    num_to_index = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in num_to_index:\n            return [num_to_index[complement], i]\n        \n        num_to_index[num] = i\n    \n    return []  # No solution found\",\n            _ => \"// Optimized code would be provided based on the specific language\"\n        };\n        \n        return Ok(new\n        {\n            optimizedCode,\n            improvements = new[]\n            {\n                \"Added null/empty array validation\",\n                \"Pre-sized dictionary for better performance\",\n                \"Used TryGetValue for safer dictionary access\",\n                \"Added explicit return for no solution case\",\n                \"More descriptive variable names\"\n            },\n            performanceGains = new\n            {\n                timeComplexity = \"No change - still O(n)\",\n                spaceComplexity = \"Slightly better due to pre-sizing\",\n                memoryAllocations = \"Reduced by pre-sizing dictionary\",\n                safetyImprovements = \"Added null checks and error handling\"\n            }\n        });\n    }\n\n    /// <summary>\n    /// Generate test cases for a problem\n    /// </summary>\n    [HttpPost(\"test-cases\")]\n    public async Task<IActionResult> GenerateTestCases([FromBody] TestCaseRequest request)\n    {\n        _logger.LogInformation(\"Generating test cases for problem: {ProblemId}\", request.ProblemId);\n        \n        await Task.Delay(400);\n        \n        return Ok(new\n        {\n            testCases = new[]\n            {\n                new { \n                    name = \"Basic Case\", \n                    input = new { nums = new[] { 2, 7, 11, 15 }, target = 9 }, \n                    expectedOutput = new[] { 0, 1 },\n                    explanation = \"nums[0] + nums[1] = 2 + 7 = 9\"\n                },\n                new { \n                    name = \"Multiple Valid Pairs\", \n                    input = new { nums = new[] { 3, 2, 4 }, target = 6 }, \n                    expectedOutput = new[] { 1, 2 },\n                    explanation = \"nums[1] + nums[2] = 2 + 4 = 6\"\n                },\n                new { \n                    name = \"Same Element Twice\", \n                    input = new { nums = new[] { 3, 3 }, target = 6 }, \n                    expectedOutput = new[] { 0, 1 },\n                    explanation = \"nums[0] + nums[1] = 3 + 3 = 6\"\n                },\n                new { \n                    name = \"Negative Numbers\", \n                    input = new { nums = new[] { -1, -2, -3, -4, -5 }, target = -8 }, \n                    expectedOutput = new[] { 2, 4 },\n                    explanation = \"nums[2] + nums[4] = -3 + (-5) = -8\"\n                },\n                new { \n                    name = \"Large Numbers\", \n                    input = new { nums = new[] { 1000000, 2000000, 3000000 }, target = 5000000 }, \n                    expectedOutput = new[] { 1, 2 },\n                    explanation = \"nums[1] + nums[2] = 2000000 + 3000000 = 5000000\"\n                }\n            },\n            edgeCases = new[]\n            {\n                \"Minimum array size (2 elements)\",\n                \"All negative numbers\", \n                \"Mix of positive and negative numbers\",\n                \"Large integer values near int.MaxValue\",\n                \"Zero as target or array element\"\n            },\n            coverage = new\n            {\n                basicFunctionality = true,\n                edgeCases = true,\n                boundaryConditions = true,\n                errorConditions = false\n            }\n        });\n    }\n}\n\npublic class HintRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string UserCode { get; set; } = string.Empty;\n    public int HintLevel { get; set; } = 1;\n}\n\npublic class ExplainRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n}\n\npublic class AnalyzeRequest\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n}\n\npublic class OptimizeRequest\n{\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\npublic class TestCaseRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string ProblemDescription { get; set; } = string.Empty;\n    public string Constraints { get; set; } = string.Empty;\n}","size_bytes":10686},"backend/src/Services/DSAGrind.Unified.API/Controllers/AuthController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Unified.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AuthController : ControllerBase\n{\n    private readonly ILogger<AuthController> _logger;\n\n    public AuthController(ILogger<AuthController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Authenticate user with email and password\n    /// </summary>\n    [HttpPost(\"login\")]\n    public async Task<IActionResult> Login([FromBody] LoginRequest request)\n    {\n        _logger.LogInformation(\"Login attempt for email: {Email}\", request.Email);\n        \n        await Task.Delay(100); // Simulate processing\n        \n        return Ok(new\n        {\n            userId = \"demo-user-123\",\n            username = request.Email?.Split('@')[0] ?? \"demouser\",\n            email = request.Email,\n            token = \"demo-jwt-token-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            refreshToken = \"demo-refresh-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            expiresAt = DateTime.UtcNow.AddHours(24),\n            message = \"Login successful (demo mode)\"\n        });\n    }\n\n    /// <summary>\n    /// Register a new user account\n    /// </summary>\n    [HttpPost(\"register\")]\n    public async Task<IActionResult> Register([FromBody] RegisterRequest request)\n    {\n        _logger.LogInformation(\"Registration attempt for email: {Email}\", request.Email);\n        \n        await Task.Delay(150); // Simulate processing\n        \n        return Ok(new\n        {\n            userId = \"demo-new-user-\" + Guid.NewGuid().ToString(\"N\")[..8],\n            username = request.Username,\n            email = request.Email,\n            token = \"demo-jwt-token-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            refreshToken = \"demo-refresh-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            expiresAt = DateTime.UtcNow.AddHours(24),\n            message = \"Registration successful (demo mode)\"\n        });\n    }\n\n    /// <summary>\n    /// Refresh authentication token\n    /// </summary>\n    [HttpPost(\"refresh\")]\n    public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n    {\n        _logger.LogInformation(\"Token refresh attempt\");\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            token = \"demo-new-jwt-token-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            refreshToken = \"demo-new-refresh-\" + Guid.NewGuid().ToString(\"N\")[..16],\n            expiresAt = DateTime.UtcNow.AddHours(24)\n        });\n    }\n\n    /// <summary>\n    /// Get user profile\n    /// </summary>\n    [HttpGet(\"profile\")]\n    public async Task<IActionResult> GetProfile()\n    {\n        _logger.LogInformation(\"Get profile request\");\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            userId = \"demo-user-123\",\n            username = \"demouser\",\n            email = \"demo@dsagrind.com\",\n            firstName = \"Demo\",\n            lastName = \"User\",\n            bio = \"This is a demo user profile for testing purposes\",\n            location = \"Demo City\",\n            website = \"https://dsagrind.com\",\n            joinedDate = DateTime.UtcNow.AddDays(-30),\n            problemsSolved = 42,\n            submissionsCount = 156,\n            acceptanceRate = 78.5m\n        });\n    }\n\n    /// <summary>\n    /// Logout user\n    /// </summary>\n    [HttpPost(\"logout\")]\n    public async Task<IActionResult> Logout()\n    {\n        _logger.LogInformation(\"Logout request\");\n        \n        await Task.Delay(25);\n        \n        return Ok(new { message = \"Logout successful\" });\n    }\n}\n\npublic class LoginRequest\n{\n    public string Email { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n}\n\npublic class RegisterRequest\n{\n    public string Username { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n}\n\npublic class RefreshTokenRequest\n{\n    public string RefreshToken { get; set; } = string.Empty;\n}","size_bytes":4157},"backend/src/Services/DSAGrind.Unified.API/Controllers/ProblemsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Unified.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProblemsController : ControllerBase\n{\n    private readonly ILogger<ProblemsController> _logger;\n\n    public ProblemsController(ILogger<ProblemsController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Get all problems with optional filtering and pagination\n    /// </summary>\n    [HttpGet]\n    public async Task<IActionResult> GetProblems(\n        [FromQuery] string? search = null,\n        [FromQuery] string? difficulty = null,\n        [FromQuery] string? tag = null,\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 20)\n    {\n        _logger.LogInformation(\"Get problems: search={Search}, difficulty={Difficulty}, page={Page}\", search, difficulty, page);\n        \n        await Task.Delay(100);\n\n        var problems = new[]\n        {\n            new {\n                id = \"prob-1\",\n                title = \"Two Sum\",\n                slug = \"two-sum\",\n                difficulty = \"Easy\",\n                tags = new[] { \"Array\", \"Hash Table\" },\n                acceptanceRate = 85.2m,\n                totalSubmissions = 1250000,\n                acceptedSubmissions = 1065000,\n                description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n                sampleInput = \"[2,7,11,15], target = 9\",\n                sampleOutput = \"[0,1]\"\n            },\n            new {\n                id = \"prob-2\", \n                title = \"Reverse Linked List\",\n                slug = \"reverse-linked-list\",\n                difficulty = \"Easy\",\n                tags = new[] { \"Linked List\", \"Recursion\" },\n                acceptanceRate = 78.5m,\n                totalSubmissions = 890000,\n                acceptedSubmissions = 698650,\n                description = \"Given the head of a singly linked list, reverse the list, and return the reversed list.\",\n                sampleInput = \"head = [1,2,3,4,5]\",\n                sampleOutput = \"[5,4,3,2,1]\"\n            },\n            new {\n                id = \"prob-3\",\n                title = \"Valid Parentheses\",\n                slug = \"valid-parentheses\", \n                difficulty = \"Easy\",\n                tags = new[] { \"String\", \"Stack\" },\n                acceptanceRate = 92.1m,\n                totalSubmissions = 756000,\n                acceptedSubmissions = 696216,\n                description = \"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\",\n                sampleInput = \"s = \\\"()\\\"\",\n                sampleOutput = \"true\"\n            },\n            new {\n                id = \"prob-4\",\n                title = \"Binary Search\",\n                slug = \"binary-search\",\n                difficulty = \"Easy\", \n                tags = new[] { \"Array\", \"Binary Search\" },\n                acceptanceRate = 89.7m,\n                totalSubmissions = 532000,\n                acceptedSubmissions = 477204,\n                description = \"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.\",\n                sampleInput = \"nums = [-1,0,3,5,9,12], target = 9\",\n                sampleOutput = \"4\"\n            },\n            new {\n                id = \"prob-5\",\n                title = \"Merge Two Sorted Lists\", \n                slug = \"merge-two-sorted-lists\",\n                difficulty = \"Easy\",\n                tags = new[] { \"Linked List\", \"Recursion\" },\n                acceptanceRate = 64.3m,\n                totalSubmissions = 1180000,\n                acceptedSubmissions = 758740,\n                description = \"You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list.\",\n                sampleInput = \"list1 = [1,2,4], list2 = [1,3,4]\",\n                sampleOutput = \"[1,1,2,3,4,4]\"\n            }\n        };\n\n        var filteredProblems = problems.AsEnumerable();\n        \n        if (!string.IsNullOrEmpty(difficulty))\n            filteredProblems = filteredProblems.Where(p => p.difficulty.Equals(difficulty, StringComparison.OrdinalIgnoreCase));\n            \n        if (!string.IsNullOrEmpty(search))\n            filteredProblems = filteredProblems.Where(p => p.title.Contains(search, StringComparison.OrdinalIgnoreCase));\n            \n        if (!string.IsNullOrEmpty(tag))\n            filteredProblems = filteredProblems.Where(p => p.tags.Any(t => t.Equals(tag, StringComparison.OrdinalIgnoreCase)));\n\n        var result = filteredProblems.ToList();\n        \n        return Ok(new\n        {\n            problems = result,\n            totalCount = result.Count,\n            pageNumber = page,\n            pageSize = pageSize,\n            totalPages = (int)Math.Ceiling((double)result.Count / pageSize)\n        });\n    }\n\n    /// <summary>\n    /// Get a specific problem by ID\n    /// </summary>\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetProblem(string id)\n    {\n        _logger.LogInformation(\"Get problem: {ProblemId}\", id);\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            id = id,\n            title = \"Two Sum\",\n            slug = \"two-sum\",\n            difficulty = \"Easy\",\n            tags = new[] { \"Array\", \"Hash Table\" },\n            description = \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\n\\nYou can return the answer in any order.\\n\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\",\n            sampleInput = \"[2,7,11,15], target = 9\",\n            sampleOutput = \"[0,1]\",\n            explanation = \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\n            constraints = new[]\n            {\n                \"2 <= nums.length <= 10^4\",\n                \"-10^9 <= nums[i] <= 10^9\",\n                \"-10^9 <= target <= 10^9\",\n                \"Only one valid answer exists.\"\n            },\n            codeTemplate = \"class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // Your code here\\n    }\\n}\",\n            testCases = new[]\n            {\n                new { input = \"[2,7,11,15], target = 9\", output = \"[0,1]\" },\n                new { input = \"[3,2,4], target = 6\", output = \"[1,2]\" },\n                new { input = \"[3,3], target = 6\", output = \"[0,1]\" }\n            },\n            acceptanceRate = 85.2m,\n            totalSubmissions = 1250000,\n            acceptedSubmissions = 1065000\n        });\n    }\n\n    /// <summary>\n    /// Get problem by slug\n    /// </summary>\n    [HttpGet(\"slug/{slug}\")]\n    public async Task<IActionResult> GetProblemBySlug(string slug)\n    {\n        _logger.LogInformation(\"Get problem by slug: {Slug}\", slug);\n        \n        await Task.Delay(50);\n        \n        return Ok(new\n        {\n            id = \"prob-1\",\n            title = slug.Replace(\"-\", \" \").ToTitleCase(),\n            slug = slug,\n            difficulty = \"Easy\",\n            tags = new[] { \"Array\", \"Hash Table\" },\n            description = $\"This is the problem description for {slug.Replace(\"-\", \" \")}.\",\n            sampleInput = \"Example input\",\n            sampleOutput = \"Example output\"\n        });\n    }\n\n    /// <summary>\n    /// Get popular tags\n    /// </summary>\n    [HttpGet(\"tags\")]\n    public async Task<IActionResult> GetTags([FromQuery] int limit = 20)\n    {\n        _logger.LogInformation(\"Get popular tags with limit: {Limit}\", limit);\n        \n        await Task.Delay(25);\n        \n        var tags = new[]\n        {\n            \"Array\", \"String\", \"Hash Table\", \"Dynamic Programming\", \"Math\",\n            \"Tree\", \"Depth-First Search\", \"Binary Search\", \"Two Pointers\", \"Greedy\",\n            \"Breadth-First Search\", \"Stack\", \"Design\", \"Heap (Priority Queue)\", \"Graph\",\n            \"Simulation\", \"Backtracking\", \"Counting\", \"Sliding Window\", \"Union Find\"\n        };\n        \n        return Ok(tags.Take(limit).ToArray());\n    }\n\n    /// <summary>\n    /// Get random problems by difficulty\n    /// </summary>\n    [HttpGet(\"random\")]\n    public async Task<IActionResult> GetRandomProblems([FromQuery] string difficulty = \"Easy\", [FromQuery] int count = 1)\n    {\n        _logger.LogInformation(\"Get random problems: difficulty={Difficulty}, count={Count}\", difficulty, count);\n        \n        await Task.Delay(75);\n        \n        var randomProblems = Enumerable.Range(1, count).Select(i => new\n        {\n            id = $\"random-{i}\",\n            title = $\"Random {difficulty} Problem {i}\",\n            slug = $\"random-{difficulty.ToLower()}-problem-{i}\",\n            difficulty = difficulty,\n            tags = new[] { \"Array\", \"Algorithm\" },\n            acceptanceRate = Random.Shared.Next(60, 95) + Random.Shared.NextSingle()\n        }).ToArray();\n        \n        return Ok(randomProblems);\n    }\n}\n\npublic static class StringExtensions\n{\n    public static string ToTitleCase(this string input)\n    {\n        if (string.IsNullOrEmpty(input)) return input;\n        \n        return string.Join(\" \", input.Split(' ').Select(word => \n            char.ToUpper(word[0]) + word[1..].ToLower()));\n    }\n}","size_bytes":9309},"backend/src/Services/DSAGrind.Unified.API/Controllers/SubmissionsController.cs":{"content":"using Microsoft.AspNetCore.Mvc;\n\nnamespace DSAGrind.Unified.API.Controllers;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SubmissionsController : ControllerBase\n{\n    private readonly ILogger<SubmissionsController> _logger;\n\n    public SubmissionsController(ILogger<SubmissionsController> logger)\n    {\n        _logger = logger;\n    }\n\n    /// <summary>\n    /// Submit code for execution and testing\n    /// </summary>\n    [HttpPost]\n    public async Task<IActionResult> SubmitCode([FromBody] SubmissionRequest request)\n    {\n        _logger.LogInformation(\"Code submission for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        // Simulate code execution time\n        await Task.Delay(Random.Shared.Next(800, 2000));\n        \n        var isAccepted = Random.Shared.Next(1, 101) <= 78; // 78% pass rate\n        \n        var result = new\n        {\n            submissionId = Guid.NewGuid().ToString(),\n            status = isAccepted ? \"Accepted\" : Random.Shared.Next(1, 5) switch\n            {\n                1 => \"Wrong Answer\",\n                2 => \"Time Limit Exceeded\", \n                3 => \"Runtime Error\",\n                4 => \"Compilation Error\",\n                _ => \"Memory Limit Exceeded\"\n            },\n            runtime = Random.Shared.Next(8, 150) + \"ms\",\n            memory = Random.Shared.Next(10, 45) + \".2MB\",\n            passedTestCases = isAccepted ? \"15/15\" : $\"{Random.Shared.Next(5, 14)}/15\",\n            submittedAt = DateTime.UtcNow,\n            code = request.Code,\n            language = request.Language,\n            problemId = request.ProblemId\n        };\n        \n        if (isAccepted)\n        {\n            return Ok(new\n            {\n                result,\n                message = \"Congratulations! Your solution has been accepted.\",\n                performance = new\n                {\n                    runtimePercentile = Random.Shared.Next(45, 98) + Random.Shared.NextSingle(),\n                    memoryPercentile = Random.Shared.Next(35, 95) + Random.Shared.NextSingle(),\n                    timeComplexity = \"O(n)\",\n                    spaceComplexity = \"O(n)\"\n                }\n            });\n        }\n        else\n        {\n            return Ok(new\n            {\n                result,\n                error = new\n                {\n                    testCase = \"Test Case \" + Random.Shared.Next(3, 12),\n                    input = \"[3,2,4], target = 6\",\n                    expected = \"[1,2]\", \n                    actual = result.status == \"Wrong Answer\" ? \"[0,2]\" : null,\n                    errorMessage = result.status switch\n                    {\n                        \"Time Limit Exceeded\" => \"Your solution exceeded the time limit of 1000ms\",\n                        \"Runtime Error\" => \"IndexOutOfRangeException: Index was outside the bounds of the array\",\n                        \"Compilation Error\" => \"CS1002: Syntax error, ';' expected\",\n                        \"Memory Limit Exceeded\" => \"Your solution used more than 256MB of memory\",\n                        _ => \"Your output doesn't match the expected result for the given input\"\n                    }\n                }\n            });\n        }\n    }\n\n    /// <summary>\n    /// Run code against sample test cases\n    /// </summary>\n    [HttpPost(\"run\")]\n    public async Task<IActionResult> RunCode([FromBody] RunCodeRequest request)\n    {\n        _logger.LogInformation(\"Running code for problem: {ProblemId}, language: {Language}\", request.ProblemId, request.Language);\n        \n        await Task.Delay(Random.Shared.Next(300, 800));\n        \n        var testResults = new[]\n        {\n            new {\n                testCase = 1,\n                input = \"[2,7,11,15], target = 9\",\n                expected = \"[0,1]\",\n                actual = \"[0,1]\",\n                passed = true,\n                runtime = \"12ms\",\n                memory = \"8.2MB\"\n            },\n            new {\n                testCase = 2, \n                input = \"[3,2,4], target = 6\",\n                expected = \"[1,2]\",\n                actual = \"[1,2]\",\n                passed = true,\n                runtime = \"8ms\",\n                memory = \"8.1MB\"\n            },\n            new {\n                testCase = 3,\n                input = \"[3,3], target = 6\", \n                expected = \"[0,1]\",\n                actual = \"[0,1]\",\n                passed = true,\n                runtime = \"6ms\",\n                memory = \"8.0MB\"\n            }\n        };\n        \n        var allPassed = testResults.All(t => t.passed);\n        \n        return Ok(new\n        {\n            success = allPassed,\n            testResults,\n            summary = new\n            {\n                totalTests = testResults.Length,\n                passedTests = testResults.Count(t => t.passed),\n                failedTests = testResults.Count(t => !t.passed),\n                avgRuntime = testResults.Average(t => int.Parse(t.runtime.Replace(\"ms\", \"\"))) + \"ms\",\n                avgMemory = \"8.1MB\"\n            },\n            message = allPassed ? \"All test cases passed! Ready to submit.\" : \"Some test cases failed. Please review your code.\"\n        });\n    }\n\n    /// <summary>\n    /// Get user's submission history\n    /// </summary>\n    [HttpGet(\"history\")]\n    public async Task<IActionResult> GetSubmissionHistory(\n        [FromQuery] string? problemId = null,\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 20)\n    {\n        _logger.LogInformation(\"Getting submission history: problemId={ProblemId}, page={Page}\", problemId, page);\n        \n        await Task.Delay(150);\n        \n        var submissions = Enumerable.Range(1, 15).Select(i => new\n        {\n            id = $\"sub-{i}\",\n            problemId = problemId ?? $\"prob-{Random.Shared.Next(1, 6)}\",\n            problemTitle = $\"Problem {Random.Shared.Next(1, 100)}\",\n            status = Random.Shared.Next(1, 4) switch\n            {\n                1 => \"Accepted\",\n                2 => \"Wrong Answer\", \n                3 => \"Time Limit Exceeded\",\n                _ => \"Runtime Error\"\n            },\n            language = Random.Shared.Next(1, 4) switch\n            {\n                1 => \"C#\",\n                2 => \"Python\",\n                3 => \"JavaScript\", \n                _ => \"Java\"\n            },\n            runtime = Random.Shared.Next(8, 200) + \"ms\",\n            memory = Random.Shared.Next(8, 50) + \".2MB\",\n            submittedAt = DateTime.UtcNow.AddDays(-Random.Shared.Next(0, 30)).AddHours(-Random.Shared.Next(0, 24))\n        }).ToArray();\n        \n        return Ok(new\n        {\n            submissions,\n            totalCount = submissions.Length,\n            pageNumber = page,\n            pageSize = pageSize,\n            totalPages = (int)Math.Ceiling((double)submissions.Length / pageSize),\n            statistics = new\n            {\n                totalSubmissions = submissions.Length,\n                acceptedSubmissions = submissions.Count(s => s.status == \"Accepted\"),\n                acceptanceRate = Math.Round((double)submissions.Count(s => s.status == \"Accepted\") / submissions.Length * 100, 1)\n            }\n        });\n    }\n\n    /// <summary>\n    /// Get detailed submission by ID\n    /// </summary>\n    [HttpGet(\"{submissionId}\")]\n    public async Task<IActionResult> GetSubmission(string submissionId)\n    {\n        _logger.LogInformation(\"Getting submission details: {SubmissionId}\", submissionId);\n        \n        await Task.Delay(100);\n        \n        return Ok(new\n        {\n            id = submissionId,\n            problemId = \"prob-1\",\n            problemTitle = \"Two Sum\",\n            status = \"Accepted\",\n            language = \"C#\",\n            code = @\"public int[] TwoSum(int[] nums, int target) {\n    var numMap = new Dictionary<int, int>();\n    \n    for (int i = 0; i < nums.Length; i++) {\n        int complement = target - nums[i];\n        \n        if (numMap.ContainsKey(complement)) {\n            return new int[] { numMap[complement], i };\n        }\n        \n        numMap[nums[i]] = i;\n    }\n    \n    return new int[] {};\n}\",\n            runtime = \"84ms\",\n            memory = \"45.2MB\",\n            submittedAt = DateTime.UtcNow.AddHours(-2),\n            testResults = new\n            {\n                passed = 15,\n                total = 15,\n                details = new[]\n                {\n                    new { testCase = 1, status = \"Passed\", runtime = \"8ms\" },\n                    new { testCase = 2, status = \"Passed\", runtime = \"12ms\" },\n                    new { testCase = 3, status = \"Passed\", runtime = \"6ms\" }\n                }\n            },\n            performance = new\n            {\n                runtimePercentile = 78.5,\n                memoryPercentile = 65.2,\n                timeComplexity = \"O(n)\",\n                spaceComplexity = \"O(n)\"\n            }\n        });\n    }\n}\n\npublic class SubmissionRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\npublic class RunCodeRequest\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}","size_bytes":9302},"backend/src/Shared/DSAGrind.Common/Configuration/AISettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class AISettings\n{\n    public const string SectionName = \"AISettings\";\n\n    public AIProvider DefaultProvider { get; set; } = AIProvider.Perplexity;\n    \n    // OpenAI Settings\n    public string OpenAIApiKey { get; set; } = string.Empty;\n    public string OpenAIModel { get; set; } = \"gpt-3.5-turbo\";\n    public string OpenAIBaseUrl { get; set; } = \"https://api.openai.com/v1\";\n    \n    // Perplexity Settings\n    public string PerplexityApiKey { get; set; } = string.Empty;\n    public string PerplexityModel { get; set; } = \"llama-3.1-sonar-small-128k-online\";\n    public string PerplexityBaseUrl { get; set; } = \"https://api.perplexity.ai\";\n    \n    // Anthropic Settings\n    public string AnthropicApiKey { get; set; } = string.Empty;\n    public string AnthropicModel { get; set; } = \"claude-3-haiku-20240307\";\n    public string AnthropicBaseUrl { get; set; } = \"https://api.anthropic.com\";\n    \n    // Google Settings\n    public string GoogleApiKey { get; set; } = string.Empty;\n    public string GoogleModel { get; set; } = \"gemini-pro\";\n    public string GoogleBaseUrl { get; set; } = \"https://generativelanguage.googleapis.com\";\n    \n    // Local AI Settings\n    public string LocalBaseUrl { get; set; } = \"http://localhost:11434\";\n    public string LocalModel { get; set; } = \"llama2\";\n    \n    // Common Settings\n    public int MaxTokens { get; set; } = 2000;\n    public double Temperature { get; set; } = 0.2;\n    public double TopP { get; set; } = 0.9;\n    public int TimeoutSeconds { get; set; } = 30;\n    public int RetryAttempts { get; set; } = 3;\n    public int RetryDelayMs { get; set; } = 1000;\n    \n    // Rate limiting\n    public int RequestsPerMinute { get; set; } = 60;\n    public int RequestsPerDay { get; set; } = 1000;\n    \n    // Features\n    public bool EnableCodeAnalysis { get; set; } = true;\n    public bool EnableHintGeneration { get; set; } = true;\n    public bool EnableTestCaseGeneration { get; set; } = true;\n    public bool EnableDifficultyEstimation { get; set; } = true;\n    public bool EnableDebugAssistance { get; set; } = true;\n}\n\npublic enum AIProvider\n{\n    OpenAI,\n    Perplexity,\n    Anthropic,\n    Google,\n    Local\n}","size_bytes":2211},"backend/src/Shared/DSAGrind.Common/Configuration/EmailSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class EmailSettings\n{\n    public const string SectionName = \"EmailSettings\";\n\n    public string SmtpServer { get; set; } = string.Empty;\n    public int SmtpPort { get; set; } = 587;\n    public string SmtpUsername { get; set; } = string.Empty;\n    public string SmtpPassword { get; set; } = string.Empty;\n    public string FromAddress { get; set; } = string.Empty;\n    public string FromName { get; set; } = string.Empty;\n    public bool EnableSsl { get; set; } = true;\n    public int TimeoutSeconds { get; set; } = 30;\n}","size_bytes":569},"backend/src/Shared/DSAGrind.Common/Configuration/JwtSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class JwtSettings\n{\n    public const string SectionName = \"JwtSettings\";\n\n    public string Secret { get; set; } = string.Empty;\n    public string Issuer { get; set; } = string.Empty;\n    public string Audience { get; set; } = string.Empty;\n    public int AccessTokenExpirationMinutes { get; set; } = 15;\n    public int RefreshTokenExpirationDays { get; set; } = 7;\n    public bool ValidateIssuer { get; set; } = true;\n    public bool ValidateAudience { get; set; } = true;\n    public bool ValidateLifetime { get; set; } = true;\n    public bool ValidateIssuerSigningKey { get; set; } = true;\n    public int ClockSkewMinutes { get; set; } = 5;\n}","size_bytes":693},"backend/src/Shared/DSAGrind.Common/Configuration/KafkaSettings.cs":{"content":"// KAFKA MIGRATION TO RABBITMQ - COMMENTED OUT KAFKA CONFIGURATION  \n// Original Kafka configuration preserved below for reference\n/*\nnamespace DSAGrind.Common.Configuration;\n\npublic class KafkaSettings\n{\n    public const string SectionName = \"KafkaSettings\";\n\n    public string BootstrapServers { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public string SecurityProtocol { get; set; } = \"SASL_SSL\";\n    public string SaslMechanism { get; set; } = \"PLAIN\";\n    public string GroupId { get; set; } = \"dsagrind-consumer-group\";\n    public bool EnableAutoCommit { get; set; } = false;\n    public int SessionTimeoutMs { get; set; } = 30000;\n    public int HeartbeatIntervalMs { get; set; } = 3000;\n    public int MaxPollRecords { get; set; } = 500;\n    public string AutoOffsetReset { get; set; } = \"earliest\";\n    public int RequestTimeoutMs { get; set; } = 30000;\n    public int RetryBackoffMs { get; set; } = 100;\n    public int MessageMaxBytes { get; set; } = 1000000;\n    public int CompressionType { get; set; } = 0; // 0 = none, 1 = gzip, 2 = snappy, 3 = lz4\n    public bool EnableIdempotence { get; set; } = true;\n    public int Acks { get; set; } = -1; // all in-sync replicas\n    public int Retries { get; set; } = int.MaxValue;\n    public int MaxInFlightRequestsPerConnection { get; set; } = 5;\n}\n\npublic class KafkaTopics\n{\n    public const string UserEvents = \"user-events\";\n    public const string ProblemEvents = \"problem-events\";\n    public const string SubmissionEvents = \"submission-events\";\n    public const string PaymentEvents = \"payment-events\";\n    public const string NotificationEvents = \"notification-events\";\n    public const string AuditEvents = \"audit-events\";\n}\n*/\n\n// NEW RABBITMQ CONFIGURATION\nnamespace DSAGrind.Common.Configuration;\n\npublic class RabbitMQSettings\n{\n    public const string SectionName = \"RabbitMQSettings\";\n\n    public string ConnectionString { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public string VirtualHost { get; set; } = \"/\";\n    public int Port { get; set; } = 5672;\n    public string HostName { get; set; } = \"localhost\";\n    public bool UseSSL { get; set; } = true;\n    public int RequestedHeartbeat { get; set; } = 60;\n    public int NetworkRecoveryInterval { get; set; } = 10;\n    public bool AutomaticRecoveryEnabled { get; set; } = true;\n    public int RequestedConnectionTimeout { get; set; } = 30000;\n    public int RequestedChannelMax { get; set; } = 2047;\n    public int RequestedFrameMax { get; set; } = 0;\n    public bool PersistentMessages { get; set; } = true;\n    public bool DurableQueues { get; set; } = true;\n    public bool ExclusiveQueues { get; set; } = false;\n    public bool AutoDeleteQueues { get; set; } = false;\n}\n\npublic class RabbitMQTopics\n{\n    public const string UserEvents = \"user-events\";\n    public const string ProblemEvents = \"problem-events\";\n    public const string SubmissionEvents = \"submission-events\";\n    public const string PaymentEvents = \"payment-events\";\n    public const string NotificationEvents = \"notification-events\";\n    public const string AuditEvents = \"audit-events\";\n}","size_bytes":3289},"backend/src/Shared/DSAGrind.Common/Configuration/MongoDbSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class MongoDbSettings\n{\n    public const string SectionName = \"MongoDbSettings\";\n\n    public string ConnectionString { get; set; } = string.Empty;\n    public string DatabaseName { get; set; } = string.Empty;\n    public int MaxConnectionPoolSize { get; set; } = 100;\n    public int MinConnectionPoolSize { get; set; } = 10;\n    public int MaxConnectionIdleTimeMinutes { get; set; } = 30;\n    public int MaxConnectionLifeTimeMinutes { get; set; } = 30;\n    public int ConnectTimeoutSeconds { get; set; } = 30;\n    public int SocketTimeoutSeconds { get; set; } = 0;\n    public int ServerSelectionTimeoutSeconds { get; set; } = 30;\n    public bool RetryWrites { get; set; } = true;\n    public int RetryReads { get; set; } = 1;\n}","size_bytes":773},"backend/src/Shared/DSAGrind.Common/Configuration/OAuthSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class OAuthSettings\n{\n    public const string SectionName = \"OAuthSettings\";\n\n    public GoogleOAuthSettings Google { get; set; } = new();\n    public GitHubOAuthSettings GitHub { get; set; } = new();\n}\n\npublic class GoogleOAuthSettings\n{\n    public string ClientId { get; set; } = string.Empty;\n    public string ClientSecret { get; set; } = string.Empty;\n    public string RedirectUri { get; set; } = \"http://localhost:8080/api/oauth/google/callback\";\n    public string Scope { get; set; } = \"openid profile email\";\n}\n\npublic class GitHubOAuthSettings\n{\n    public string ClientId { get; set; } = string.Empty;\n    public string ClientSecret { get; set; } = string.Empty;\n    public string RedirectUri { get; set; } = \"http://localhost:8080/api/oauth/github/callback\";\n    public string Scope { get; set; } = \"user:email\";\n}","size_bytes":874},"backend/src/Shared/DSAGrind.Common/Configuration/QdrantSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class QdrantSettings\n{\n    public const string SectionName = \"QdrantSettings\";\n\n    public string Url { get; set; } = \"http://localhost:6333\";\n    public string ApiKey { get; set; } = string.Empty;\n    public string CollectionName { get; set; } = \"dsagrind_problems\";\n    public int VectorSize { get; set; } = 1536; // OpenAI ada-002 embedding size\n    public string Distance { get; set; } = \"Cosine\"; // Cosine, Euclid, Dot\n    public int TimeoutSeconds { get; set; } = 30;\n    public int MaxRetries { get; set; } = 3;\n    public bool UseGrpcInterface { get; set; } = false;\n    public int GrpcPort { get; set; } = 6334;\n    \n    // Search settings\n    public int DefaultSearchLimit { get; set; } = 10;\n    public double MinSimilarityScore { get; set; } = 0.7;\n    public bool EnableFiltering { get; set; } = true;\n    \n    // Indexing settings\n    public int BatchSize { get; set; } = 100;\n    public int IndexingConcurrency { get; set; } = 4;\n    public bool AutoCreateCollection { get; set; } = true;\n    \n    // Performance settings\n    public int MemMapThreshold { get; set; } = 20000;\n    public int OnDiskPayload { get; set; } = 10000;\n    public bool EnableQuantization { get; set; } = false;\n}","size_bytes":1252},"backend/src/Shared/DSAGrind.Common/Configuration/RedisSettings.cs":{"content":"namespace DSAGrind.Common.Configuration;\n\npublic class RedisSettings\n{\n    public const string SectionName = \"RedisSettings\";\n\n    public string ConnectionString { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public int Database { get; set; } = 0;\n    public int ConnectTimeoutSeconds { get; set; } = 30;\n    public int SyncTimeoutSeconds { get; set; } = 30;\n    public int CommandTimeoutSeconds { get; set; } = 30;\n    public bool AbortOnConnectFail { get; set; } = false;\n    public bool AllowAdmin { get; set; } = false;\n    public int ConnectRetryCount { get; set; } = 3;\n    public int KeepAliveSeconds { get; set; } = 60;\n    public string DefaultKeyPrefix { get; set; } = \"dsagrind:\";\n    \n    // Cache expiration times\n    public int UserCacheExpirationMinutes { get; set; } = 30;\n    public int ProblemCacheExpirationMinutes { get; set; } = 60;\n    public int CategoryCacheExpirationMinutes { get; set; } = 120;\n    public int SubmissionCacheExpirationMinutes { get; set; } = 15;\n    \n    // Rate limiting\n    public int RateLimitWindowMinutes { get; set; } = 1;\n    public int LoginAttemptsLimit { get; set; } = 5;\n    public int SubmissionAttemptsLimit { get; set; } = 10;\n    public int ApiRequestsLimit { get; set; } = 100;\n}","size_bytes":1282},"backend/src/Shared/DSAGrind.Common/Extensions/ServiceCollectionExtensions.cs":{"content":"using DSAGrind.Common.Configuration;\nusing DSAGrind.Common.Repositories;\nusing DSAGrind.Common.Services;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\nusing MongoDB.Driver;\nusing Qdrant.Client;\n\nnamespace DSAGrind.Common.Extensions;\n\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddCommonServices(this IServiceCollection services, IConfiguration configuration)\n    {\n        // Configure settings\n        services.Configure<MongoDbSettings>(configuration.GetSection(MongoDbSettings.SectionName));\n        services.Configure<JwtSettings>(configuration.GetSection(JwtSettings.SectionName));\n        // KAFKA MIGRATION TO RABBITMQ - Commented out Kafka settings\n        // services.Configure<KafkaSettings>(configuration.GetSection(KafkaSettings.SectionName));\n        services.Configure<RabbitMQSettings>(configuration.GetSection(RabbitMQSettings.SectionName));\n        services.Configure<RedisSettings>(configuration.GetSection(RedisSettings.SectionName));\n        services.Configure<EmailSettings>(configuration.GetSection(EmailSettings.SectionName));\n        services.Configure<AISettings>(configuration.GetSection(AISettings.SectionName));\n        services.Configure<QdrantSettings>(configuration.GetSection(QdrantSettings.SectionName));\n\n        // Add MongoDB\n        services.AddSingleton<IMongoClient>(sp =>\n        {\n            var settings = configuration.GetSection(MongoDbSettings.SectionName).Get<MongoDbSettings>();\n            return new MongoClient(settings!.ConnectionString);\n        });\n\n        services.AddSingleton<IMongoDatabase>(sp =>\n        {\n            var client = sp.GetRequiredService<IMongoClient>();\n            var settings = configuration.GetSection(MongoDbSettings.SectionName).Get<MongoDbSettings>();\n            return client.GetDatabase(settings!.DatabaseName);\n        });\n\n        // Add common repositories\n        //services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.User>, MongoRepository<DSAGrind.Models.Entities.User>>();\n        //services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Problem>, MongoRepository<DSAGrind.Models.Entities.Problem>>();\n        //services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Submission>, MongoRepository<DSAGrind.Models.Entities.Submission>>();\n        //services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Category>, MongoRepository<DSAGrind.Models.Entities.Category>>();\n        //services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Subscription>, MongoRepository<DSAGrind.Models.Entities.Subscription>>();\n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.User>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.User>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"users\"));\n\n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Problem>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.Problem>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"problems\"));\n\n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Submission>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.Submission>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"submissions\"));\n\n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Category>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.Category>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"categories\"));\n\n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Payment>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.Payment>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"payments\"));\n        \n        services.AddScoped<IMongoRepository<DSAGrind.Models.Entities.Subscription>>(sp =>\n            new MongoRepository<DSAGrind.Models.Entities.Subscription>(\n                sp.GetRequiredService<IMongoDatabase>(),\n                \"subscriptions\"));\n        // Add common services\n        services.AddSingleton<IJwtService, JwtService>();\n        // KAFKA MIGRATION TO RABBITMQ - Commented out Kafka service registration\n        // services.AddSingleton<IKafkaService, KafkaService>();\n        services.AddSingleton<RabbitMQService>();\n        services.AddSingleton<IKafkaService>(sp => sp.GetRequiredService<RabbitMQService>());\n        services.AddSingleton<IEventPublisher, EventPublisher>();\n        services.AddSingleton<IRedisService, RedisService>();\n        services.AddScoped<IEmailService, EmailService>();\n        services.AddScoped<IAIProviderService, PerplexityAIService>();\n        services.AddSingleton<QdrantClient>(sp =>\n        {\n            var config = sp.GetRequiredService<IOptions<QdrantSettings>>().Value;\n            return new QdrantClient(config.Url, config.GrpcPort, false, config.ApiKey);\n        });\n\n        // Add HttpClient\n        services.AddHttpClient();\n\n        // Add health checks\n        services.AddHealthChecks();\n\n        return services;\n    }\n}","size_bytes":5163},"backend/src/Shared/DSAGrind.Common/Repositories/IMongoRepository.cs":{"content":"using System.Linq.Expressions;\nusing MongoDB.Bson;\n\nnamespace DSAGrind.Common.Repositories;\n\npublic interface IMongoRepository<T> where T : class\n{\n    // Basic CRUD operations\n    Task<T?> GetByIdAsync(string id, CancellationToken cancellationToken = default);\n    Task<T?> GetByIdAsync(ObjectId id, CancellationToken cancellationToken = default);\n    Task<T?> GetAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default);\n    Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default);\n    Task<IEnumerable<T>> GetManyAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default);\n    Task<T> CreateAsync(T entity, CancellationToken cancellationToken = default);\n    Task<IEnumerable<T>> CreateManyAsync(IEnumerable<T> entities, CancellationToken cancellationToken = default);\n    Task<T?> UpdateAsync(string id, T entity, CancellationToken cancellationToken = default);\n    Task<T?> UpdateAsync(ObjectId id, T entity, CancellationToken cancellationToken = default);\n    Task<bool> DeleteAsync(string id, CancellationToken cancellationToken = default);\n    Task<bool> DeleteAsync(ObjectId id, CancellationToken cancellationToken = default);\n    Task<long> DeleteManyAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default);\n\n    // Existence checks\n    Task<bool> ExistsAsync(string id, CancellationToken cancellationToken = default);\n    Task<bool> ExistsAsync(ObjectId id, CancellationToken cancellationToken = default);\n    Task<bool> ExistsAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default);\n\n    // Counting\n    Task<long> CountAsync(CancellationToken cancellationToken = default);\n    Task<long> CountAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default);\n\n    // Pagination\n    Task<PaginatedResult<T>> GetPagedAsync(\n        int page, \n        int pageSize, \n        Expression<Func<T, bool>>? filter = null,\n        Expression<Func<T, object>>? sortBy = null,\n        bool sortDescending = false,\n        CancellationToken cancellationToken = default);\n\n    // Search\n    Task<IEnumerable<T>> SearchAsync(\n        string searchTerm,\n        Expression<Func<T, bool>>? filter = null,\n        int? limit = null,\n        CancellationToken cancellationToken = default);\n\n    // Aggregation\n    Task<IEnumerable<TResult>> AggregateAsync<TResult>(\n        IEnumerable<BsonDocument> pipeline,\n        CancellationToken cancellationToken = default);\n\n    // Update operations\n    Task<bool> UpdateOneAsync(\n        Expression<Func<T, bool>> filter,\n        Dictionary<string, object> updates,\n        CancellationToken cancellationToken = default);\n\n    Task<long> UpdateManyAsync(\n        Expression<Func<T, bool>> filter,\n        Dictionary<string, object> updates,\n        CancellationToken cancellationToken = default);\n\n    // Bulk operations\n    Task<bool> BulkWriteAsync(\n        IEnumerable<(T entity, BulkOperationType operation)> operations,\n        CancellationToken cancellationToken = default);\n}\n\npublic class PaginatedResult<T>\n{\n    public IEnumerable<T> Items { get; set; } = new List<T>();\n    public long TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);\n    public bool HasNextPage => Page < TotalPages;\n    public bool HasPreviousPage => Page > 1;\n}\n\npublic enum BulkOperationType\n{\n    Insert,\n    Update,\n    Delete,\n    Upsert\n}","size_bytes":3555},"backend/src/Shared/DSAGrind.Common/Repositories/MongoRepository.cs":{"content":"using System.Linq.Expressions;\nusing Microsoft.Extensions.Options;\nusing MongoDB.Bson;\nusing MongoDB.Driver;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Repositories;\n\npublic class MongoRepository<T> : IMongoRepository<T> where T : class\n{\n    protected readonly IMongoCollection<T> _collection;\n    protected readonly IMongoDatabase _database;\n\n    public MongoRepository(IMongoDatabase database, string collectionName)\n    {\n        _database = database;\n        _collection = _database.GetCollection<T>(collectionName);\n    }\n\n    public virtual async Task<T?> GetByIdAsync(string id, CancellationToken cancellationToken = default)\n    {\n        if (!ObjectId.TryParse(id, out var objectId))\n            return null;\n        \n        return await GetByIdAsync(objectId, cancellationToken);\n    }\n\n    public virtual async Task<T?> GetByIdAsync(ObjectId id, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(Builders<T>.Filter.Eq(\"_id\", id))\n            .FirstOrDefaultAsync(cancellationToken);\n    }\n\n    public virtual async Task<T?> GetAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(filter).FirstOrDefaultAsync(cancellationToken);\n    }\n\n    public virtual async Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(_ => true).ToListAsync(cancellationToken);\n    }\n\n    public virtual async Task<IEnumerable<T>> GetManyAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(filter).ToListAsync(cancellationToken);\n    }\n\n    public virtual async Task<T> CreateAsync(T entity, CancellationToken cancellationToken = default)\n    {\n        await _collection.InsertOneAsync(entity, cancellationToken: cancellationToken);\n        return entity;\n    }\n\n    public virtual async Task<IEnumerable<T>> CreateManyAsync(IEnumerable<T> entities, CancellationToken cancellationToken = default)\n    {\n        await _collection.InsertManyAsync(entities, cancellationToken: cancellationToken);\n        return entities;\n    }\n\n    public virtual async Task<T?> UpdateAsync(string id, T entity, CancellationToken cancellationToken = default)\n    {\n        if (!ObjectId.TryParse(id, out var objectId))\n            return null;\n            \n        return await UpdateAsync(objectId, entity, cancellationToken);\n    }\n\n    public virtual async Task<T?> UpdateAsync(ObjectId id, T entity, CancellationToken cancellationToken = default)\n    {\n        return await _collection.FindOneAndReplaceAsync(\n            Builders<T>.Filter.Eq(\"_id\", id),\n            entity,\n            new FindOneAndReplaceOptions<T> { ReturnDocument = ReturnDocument.After },\n            cancellationToken);\n    }\n\n    public virtual async Task<bool> DeleteAsync(string id, CancellationToken cancellationToken = default)\n    {\n        if (!ObjectId.TryParse(id, out var objectId))\n            return false;\n            \n        return await DeleteAsync(objectId, cancellationToken);\n    }\n\n    public virtual async Task<bool> DeleteAsync(ObjectId id, CancellationToken cancellationToken = default)\n    {\n        var result = await _collection.DeleteOneAsync(\n            Builders<T>.Filter.Eq(\"_id\", id),\n            cancellationToken);\n        return result.DeletedCount > 0;\n    }\n\n    public virtual async Task<long> DeleteManyAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default)\n    {\n        var result = await _collection.DeleteManyAsync(filter, cancellationToken);\n        return result.DeletedCount;\n    }\n\n    public virtual async Task<bool> ExistsAsync(string id, CancellationToken cancellationToken = default)\n    {\n        if (!ObjectId.TryParse(id, out var objectId))\n            return false;\n            \n        return await ExistsAsync(objectId, cancellationToken);\n    }\n\n    public virtual async Task<bool> ExistsAsync(ObjectId id, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(Builders<T>.Filter.Eq(\"_id\", id))\n            .AnyAsync(cancellationToken);\n    }\n\n    public virtual async Task<bool> ExistsAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default)\n    {\n        return await _collection.Find(filter).AnyAsync(cancellationToken);\n    }\n\n    public virtual async Task<long> CountAsync(CancellationToken cancellationToken = default)\n    {\n        return await _collection.CountDocumentsAsync(_ => true, cancellationToken: cancellationToken);\n    }\n\n    public virtual async Task<long> CountAsync(Expression<Func<T, bool>> filter, CancellationToken cancellationToken = default)\n    {\n        return await _collection.CountDocumentsAsync(filter, cancellationToken: cancellationToken);\n    }\n\n    public virtual async Task<PaginatedResult<T>> GetPagedAsync(\n        int page, \n        int pageSize, \n        Expression<Func<T, bool>>? filter = null,\n        Expression<Func<T, object>>? sortBy = null,\n        bool sortDescending = false,\n        CancellationToken cancellationToken = default)\n    {\n        var filterDefinition = filter != null ? Builders<T>.Filter.Where(filter) : Builders<T>.Filter.Empty;\n        \n        var totalCount = await _collection.CountDocumentsAsync(filterDefinition, cancellationToken: cancellationToken);\n        \n        var query = _collection.Find(filterDefinition);\n        \n        if (sortBy != null)\n        {\n            query = sortDescending\n                ? query.SortByDescending(sortBy)\n                : query.SortBy(sortBy);\n        }\n        \n        var items = await query\n            .Skip((page - 1) * pageSize)\n            .Limit(pageSize)\n            .ToListAsync(cancellationToken);\n\n        return new PaginatedResult<T>\n        {\n            Items = items,\n            TotalCount = totalCount,\n            Page = page,\n            PageSize = pageSize\n        };\n    }\n\n    public virtual async Task<IEnumerable<T>> SearchAsync(\n        string searchTerm,\n        Expression<Func<T, bool>>? filter = null,\n        int? limit = null,\n        CancellationToken cancellationToken = default)\n    {\n        var searchFilter = Builders<T>.Filter.Text(searchTerm);\n        var combinedFilter = filter != null\n            ? Builders<T>.Filter.And(searchFilter, Builders<T>.Filter.Where(filter))\n            : searchFilter;\n\n        var query = _collection.Find(combinedFilter);\n        \n        if (limit.HasValue)\n            query = query.Limit(limit.Value);\n\n        return await query.ToListAsync(cancellationToken);\n    }\n\n    public virtual async Task<IEnumerable<TResult>> AggregateAsync<TResult>(\n        IEnumerable<BsonDocument> pipeline,\n        CancellationToken cancellationToken = default)\n    {\n        var pipelineDefinition = PipelineDefinition<T, TResult>.Create(pipeline);\n        return await _collection.Aggregate(pipelineDefinition).ToListAsync(cancellationToken);\n    }\n\n    public virtual async Task<bool> UpdateOneAsync(\n        Expression<Func<T, bool>> filter,\n        Dictionary<string, object> updates,\n        CancellationToken cancellationToken = default)\n    {\n        var updateDefinition = Builders<T>.Update.Combine(\n            updates.Select(kvp => Builders<T>.Update.Set(kvp.Key, kvp.Value))\n        );\n\n        var result = await _collection.UpdateOneAsync(filter, updateDefinition, cancellationToken: cancellationToken);\n        return result.ModifiedCount > 0;\n    }\n\n    public virtual async Task<long> UpdateManyAsync(\n        Expression<Func<T, bool>> filter,\n        Dictionary<string, object> updates,\n        CancellationToken cancellationToken = default)\n    {\n        var updateDefinition = Builders<T>.Update.Combine(\n            updates.Select(kvp => Builders<T>.Update.Set(kvp.Key, kvp.Value))\n        );\n\n        var result = await _collection.UpdateManyAsync(filter, updateDefinition, cancellationToken: cancellationToken);\n        return result.ModifiedCount;\n    }\n\n    public virtual async Task<bool> BulkWriteAsync(\n        IEnumerable<(T entity, BulkOperationType operation)> operations,\n        CancellationToken cancellationToken = default)\n    {\n        var writeModels = operations.Select<(T entity, BulkOperationType operation), WriteModel<T>>(op => op.operation switch\n        {\n            BulkOperationType.Insert => new InsertOneModel<T>(op.entity),\n            BulkOperationType.Update => new ReplaceOneModel<T>(\n                Builders<T>.Filter.Eq(\"_id\", GetEntityId(op.entity)),\n                op.entity\n            ),\n            BulkOperationType.Delete => new DeleteOneModel<T>(\n                Builders<T>.Filter.Eq(\"_id\", GetEntityId(op.entity))\n            ),\n            BulkOperationType.Upsert => new ReplaceOneModel<T>(\n                Builders<T>.Filter.Eq(\"_id\", GetEntityId(op.entity)),\n                op.entity\n            ) { IsUpsert = true },\n            _ => throw new ArgumentException($\"Unsupported operation: {op.operation}\")\n        }).ToList();\n\n        if (!writeModels.Any())\n            return false;\n\n        var result = await _collection.BulkWriteAsync(writeModels, cancellationToken: cancellationToken);\n        return result.IsAcknowledged;\n    }\n\n    private static object GetEntityId(T entity)\n    {\n        var idProperty = typeof(T).GetProperty(\"Id\");\n        return idProperty?.GetValue(entity) ?? throw new InvalidOperationException(\"Entity must have an Id property\");\n    }\n}","size_bytes":9525},"backend/src/Shared/DSAGrind.Common/Services/EmailService.cs":{"content":"using System.Net;\nusing System.Net.Mail;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Services;\n\npublic class EmailService : IEmailService\n{\n    private readonly EmailSettings _emailSettings;\n    private readonly ILogger<EmailService> _logger;\n\n    public EmailService(IOptions<EmailSettings> emailSettings, ILogger<EmailService> logger)\n    {\n        _emailSettings = emailSettings.Value;\n        _logger = logger;\n    }\n\n    public async Task SendEmailVerificationAsync(string email, string username, string verificationToken, CancellationToken cancellationToken = default)\n    {\n        var subject = \"Verify your email address - DSAGrind\";\n        var verificationLink = $\"http://localhost:3000/verify-email?token={verificationToken}\";\n        \n        var htmlBody = $@\"\n            <html>\n                <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>\n                    <div style='background-color: #f8f9fa; padding: 20px; text-align: center;'>\n                        <h1 style='color: #343a40;'>Welcome to DSAGrind!</h1>\n                        <p>Hi {username},</p>\n                        <p>Thank you for signing up! Please verify your email address by clicking the button below:</p>\n                        <a href='{verificationLink}' style='display: inline-block; padding: 12px 24px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0;'>Verify Email</a>\n                        <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                        <p style='word-break: break-all; color: #6c757d;'>{verificationLink}</p>\n                        <p style='margin-top: 30px; font-size: 12px; color: #6c757d;'>\n                            This link will expire in 24 hours for security reasons.\n                        </p>\n                    </div>\n                </body>\n            </html>\";\n\n        var textBody = $@\"\n            Welcome to DSAGrind!\n            \n            Hi {username},\n            \n            Thank you for signing up! Please verify your email address by visiting:\n            {verificationLink}\n            \n            This link will expire in 24 hours for security reasons.\";\n\n        await SendEmailAsync(email, subject, htmlBody, textBody, cancellationToken);\n    }\n\n    public async Task SendWelcomeEmailAsync(string email, string username, CancellationToken cancellationToken = default)\n    {\n        var subject = \"Welcome to DSAGrind - Start Your Coding Journey!\";\n        \n        var htmlBody = $@\"\n            <html>\n                <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>\n                    <div style='background-color: #f8f9fa; padding: 20px; text-align: center;'>\n                        <h1 style='color: #28a745;'>🎉 Welcome to DSAGrind, {username}!</h1>\n                        <p>Your email has been verified successfully!</p>\n                        <p>You're now ready to start grinding data structures and algorithms:</p>\n                        <ul style='text-align: left; max-width: 400px; margin: 20px auto;'>\n                            <li>✅ Solve over 1000+ coding problems</li>\n                            <li>✅ Track your progress with detailed analytics</li>\n                            <li>✅ Get AI-powered hints when stuck</li>\n                            <li>✅ Compete in weekly contests</li>\n                            <li>✅ Join our community of developers</li>\n                        </ul>\n                        <a href='http://localhost:3000/problems' style='display: inline-block; padding: 12px 24px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0;'>Start Coding Now!</a>\n                        <p style='margin-top: 30px; font-size: 12px; color: #6c757d;'>\n                            Happy coding! 🚀<br>\n                            The DSAGrind Team\n                        </p>\n                    </div>\n                </body>\n            </html>\";\n\n        var textBody = $@\"\n            Welcome to DSAGrind, {username}!\n            \n            Your email has been verified successfully!\n            \n            You're now ready to start grinding data structures and algorithms:\n            - Solve over 1000+ coding problems\n            - Track your progress with detailed analytics\n            - Get AI-powered hints when stuck\n            - Compete in weekly contests\n            - Join our community of developers\n            \n            Start coding: http://localhost:3000/problems\n            \n            Happy coding!\n            The DSAGrind Team\";\n\n        await SendEmailAsync(email, subject, htmlBody, textBody, cancellationToken);\n    }\n\n    public async Task SendPasswordResetAsync(string email, string username, string resetToken, CancellationToken cancellationToken = default)\n    {\n        var subject = \"Reset your password - DSAGrind\";\n        var resetLink = $\"http://localhost:3000/reset-password?token={resetToken}\";\n        \n        var htmlBody = $@\"\n            <html>\n                <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>\n                    <div style='background-color: #f8f9fa; padding: 20px; text-align: center;'>\n                        <h1 style='color: #dc3545;'>🔒 Password Reset Request</h1>\n                        <p>Hi {username},</p>\n                        <p>We received a request to reset your password. Click the button below to create a new password:</p>\n                        <a href='{resetLink}' style='display: inline-block; padding: 12px 24px; background-color: #dc3545; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0;'>Reset Password</a>\n                        <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                        <p style='word-break: break-all; color: #6c757d;'>{resetLink}</p>\n                        <p style='margin-top: 30px; font-size: 12px; color: #6c757d;'>\n                            This link will expire in 1 hour for security reasons.<br>\n                            If you didn't request this reset, please ignore this email.\n                        </p>\n                    </div>\n                </body>\n            </html>\";\n\n        var textBody = $@\"\n            Password Reset Request\n            \n            Hi {username},\n            \n            We received a request to reset your password. Visit this link to create a new password:\n            {resetLink}\n            \n            This link will expire in 1 hour for security reasons.\n            If you didn't request this reset, please ignore this email.\";\n\n        await SendEmailAsync(email, subject, htmlBody, textBody, cancellationToken);\n    }\n\n    public async Task SendEmailAsync(string toEmail, string subject, string htmlBody, string? textBody = null, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            using var client = new SmtpClient(_emailSettings.SmtpServer, _emailSettings.SmtpPort)\n            {\n                EnableSsl = _emailSettings.EnableSsl,\n                Credentials = new NetworkCredential(_emailSettings.SmtpUsername, _emailSettings.SmtpPassword),\n                Timeout = _emailSettings.TimeoutSeconds * 1000\n            };\n\n            var mailMessage = new MailMessage\n            {\n                From = new MailAddress(_emailSettings.FromAddress, _emailSettings.FromName),\n                Subject = subject,\n                Body = htmlBody,\n                IsBodyHtml = true\n            };\n\n            mailMessage.To.Add(toEmail);\n\n            if (!string.IsNullOrEmpty(textBody))\n            {\n                var textView = AlternateView.CreateAlternateViewFromString(textBody, null, \"text/plain\");\n                mailMessage.AlternateViews.Add(textView);\n            }\n\n            await client.SendMailAsync(mailMessage, cancellationToken);\n            \n            _logger.LogInformation(\"Email sent successfully to {Email} with subject: {Subject}\", toEmail, subject);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to send email to {Email} with subject: {Subject}\", toEmail, subject);\n            throw;\n        }\n    }\n\n    public async Task SendBulkEmailAsync(List<string> toEmails, string subject, string htmlBody, string? textBody = null, CancellationToken cancellationToken = default)\n    {\n        var tasks = toEmails.Select(email => SendEmailAsync(email, subject, htmlBody, textBody, cancellationToken));\n        await Task.WhenAll(tasks);\n    }\n}","size_bytes":8744},"backend/src/Shared/DSAGrind.Common/Services/EventPublisher.cs":{"content":"// KAFKA MIGRATION TO RABBITMQ - COMMENTED OUT KAFKA EVENT PUBLISHER\n// Original implementation preserved below for reference\n/*\nusing Microsoft.Extensions.Logging;\n\nnamespace DSAGrind.Common.Services;\n\npublic class EventPublisher : IEventPublisher\n{\n    private readonly IKafkaService _kafkaService;\n    private readonly ILogger<EventPublisher> _logger;\n\n    public EventPublisher(IKafkaService kafkaService, ILogger<EventPublisher> logger)\n    {\n        _kafkaService = kafkaService;\n        _logger = logger;\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, CancellationToken cancellationToken = default) where T : class\n    {\n        await PublishAsync(topic, @event, null, null, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, string? key = null, CancellationToken cancellationToken = default) where T : class\n    {\n        await PublishAsync(topic, @event, null, key, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default) where T : class\n    {\n        try\n        {\n            _logger.LogDebug(\"Publishing event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n            await _kafkaService.PublishAsync(topic, @event, headers, key, cancellationToken);\n            _logger.LogDebug(\"Successfully published event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to publish event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n            throw;\n        }\n    }\n}\n*/\n\n// NEW RABBITMQ EVENT PUBLISHER IMPLEMENTATION\nusing Microsoft.Extensions.Logging;\n\nnamespace DSAGrind.Common.Services;\n\npublic class EventPublisher : IEventPublisher\n{\n    private readonly RabbitMQService _rabbitMQService;\n    private readonly ILogger<EventPublisher> _logger;\n\n    public EventPublisher(RabbitMQService rabbitMQService, ILogger<EventPublisher> logger)\n    {\n        _rabbitMQService = rabbitMQService;\n        _logger = logger;\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, CancellationToken cancellationToken = default) where T : class\n    {\n        await PublishAsync(topic, @event, null, null, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, string? key = null, CancellationToken cancellationToken = default) where T : class\n    {\n        await PublishAsync(topic, @event, null, key, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T @event, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default) where T : class\n    {\n        try\n        {\n            _logger.LogDebug(\"Publishing event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n            await _rabbitMQService.PublishAsync(topic, @event, headers, key, cancellationToken);\n            _logger.LogDebug(\"Successfully published event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to publish event {EventType} to topic {Topic}\", typeof(T).Name, topic);\n            throw;\n        }\n    }\n}","size_bytes":3302},"backend/src/Shared/DSAGrind.Common/Services/IAIProviderService.cs":{"content":"namespace DSAGrind.Common.Services;\n\npublic interface IAIProviderService\n{\n    Task<string> GenerateHintAsync(string problemDescription, string userCode, int hintLevel, CancellationToken cancellationToken = default);\n    Task<string> ExplainSolutionAsync(string problemDescription, string solutionCode, CancellationToken cancellationToken = default);\n    Task<string> AnalyzeCodeAsync(string code, string language, string? problemDescription = null, CancellationToken cancellationToken = default);\n    Task<string> GenerateTestCasesAsync(string problemDescription, int count, CancellationToken cancellationToken = default);\n    Task<string> EstimateDifficultyAsync(string problemDescription, CancellationToken cancellationToken = default);\n    Task<string> OptimizeCodeAsync(string code, string language, CancellationToken cancellationToken = default);\n    Task<string> DebugCodeAsync(string code, string language, string errorMessage, CancellationToken cancellationToken = default);\n    Task<string> GenerateAlternativeSolutionAsync(string problemDescription, string existingCode, string language, CancellationToken cancellationToken = default);\n}\n\npublic enum AIProvider\n{\n    OpenAI,\n    Perplexity,\n    Anthropic,\n    Google,\n    Local\n}","size_bytes":1241},"backend/src/Shared/DSAGrind.Common/Services/IEmailService.cs":{"content":"namespace DSAGrind.Common.Services;\n\npublic interface IEmailService\n{\n    Task SendEmailVerificationAsync(string email, string username, string verificationToken, CancellationToken cancellationToken = default);\n    Task SendWelcomeEmailAsync(string email, string username, CancellationToken cancellationToken = default);\n    Task SendPasswordResetAsync(string email, string username, string resetToken, CancellationToken cancellationToken = default);\n    Task SendEmailAsync(string toEmail, string subject, string htmlBody, string? textBody = null, CancellationToken cancellationToken = default);\n    Task SendBulkEmailAsync(List<string> toEmails, string subject, string htmlBody, string? textBody = null, CancellationToken cancellationToken = default);\n}","size_bytes":755},"backend/src/Shared/DSAGrind.Common/Services/IEventPublisher.cs":{"content":"namespace DSAGrind.Common.Services;\n\npublic interface IEventPublisher\n{\n    Task PublishAsync<T>(string topic, T @event, CancellationToken cancellationToken = default) where T : class;\n    Task PublishAsync<T>(string topic, T @event, string? key = null, CancellationToken cancellationToken = default) where T : class;\n    Task PublishAsync<T>(string topic, T @event, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default) where T : class;\n}","size_bytes":489},"backend/src/Shared/DSAGrind.Common/Services/IJwtService.cs":{"content":"using System.Security.Claims;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Common.Services;\n\npublic interface IJwtService\n{\n    string GenerateAccessToken(User user);\n    string GenerateRefreshToken();\n    ClaimsPrincipal? GetPrincipalFromToken(string token);\n    ClaimsPrincipal? GetPrincipalFromExpiredToken(string token);\n    bool ValidateToken(string token);\n    string? GetUserIdFromToken(string token);\n    string? GetUsernameFromToken(string token);\n    string? GetRoleFromToken(string token);\n    DateTime GetTokenExpiration(string token);\n    bool IsTokenExpired(string token);\n}","size_bytes":595},"backend/src/Shared/DSAGrind.Common/Services/IKafkaService.cs":{"content":"namespace DSAGrind.Common.Services;\n\npublic interface IKafkaService\n{\n    Task PublishAsync<T>(string topic, T message, string? key = null, CancellationToken cancellationToken = default);\n    Task PublishAsync<T>(string topic, T message, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default);\n    Task StartConsumerAsync<T>(string topic, string consumerGroup, Func<T, Dictionary<string, string>?, Task> messageHandler, CancellationToken cancellationToken = default);\n    Task StopConsumerAsync(CancellationToken cancellationToken = default);\n}\n\npublic interface IKafkaProducer\n{\n    Task PublishAsync<T>(string topic, T message, string? key = null, CancellationToken cancellationToken = default);\n    Task PublishAsync<T>(string topic, T message, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default);\n}\n\npublic interface IKafkaConsumer\n{\n    Task StartAsync<T>(string topic, string consumerGroup, Func<T, Dictionary<string, string>?, Task> messageHandler, CancellationToken cancellationToken = default);\n    Task StopAsync(CancellationToken cancellationToken = default);\n}","size_bytes":1173},"backend/src/Shared/DSAGrind.Common/Services/IRedisService.cs":{"content":"namespace DSAGrind.Common.Services;\n\npublic interface IRedisService\n{\n    Task<T?> GetAsync<T>(string key, CancellationToken cancellationToken = default);\n    Task<bool> SetAsync<T>(string key, T value, TimeSpan? expiration = null, CancellationToken cancellationToken = default);\n    Task<bool> DeleteAsync(string key, CancellationToken cancellationToken = default);\n    Task<bool> ExistsAsync(string key, CancellationToken cancellationToken = default);\n    Task<long> IncrementAsync(string key, long value = 1, CancellationToken cancellationToken = default);\n    Task<long> DecrementAsync(string key, long value = 1, CancellationToken cancellationToken = default);\n    Task<bool> ExpireAsync(string key, TimeSpan expiration, CancellationToken cancellationToken = default);\n    Task<TimeSpan?> GetTtlAsync(string key, CancellationToken cancellationToken = default);\n    \n    // Set operations\n    Task<bool> SetAddAsync<T>(string key, T value, CancellationToken cancellationToken = default);\n    Task<bool> SetRemoveAsync<T>(string key, T value, CancellationToken cancellationToken = default);\n    Task<bool> SetContainsAsync<T>(string key, T value, CancellationToken cancellationToken = default);\n    Task<T[]> SetMembersAsync<T>(string key, CancellationToken cancellationToken = default);\n    \n    // Hash operations\n    Task<bool> HashSetAsync<T>(string key, string field, T value, CancellationToken cancellationToken = default);\n    Task<T?> HashGetAsync<T>(string key, string field, CancellationToken cancellationToken = default);\n    Task<bool> HashDeleteAsync(string key, string field, CancellationToken cancellationToken = default);\n    Task<bool> HashExistsAsync(string key, string field, CancellationToken cancellationToken = default);\n    Task<Dictionary<string, T>> HashGetAllAsync<T>(string key, CancellationToken cancellationToken = default);\n    \n    // List operations\n    Task<long> ListPushAsync<T>(string key, T value, bool toLeft = true, CancellationToken cancellationToken = default);\n    Task<T?> ListPopAsync<T>(string key, bool fromLeft = true, CancellationToken cancellationToken = default);\n    Task<long> ListLengthAsync(string key, CancellationToken cancellationToken = default);\n    Task<T[]> ListRangeAsync<T>(string key, long start = 0, long stop = -1, CancellationToken cancellationToken = default);\n    \n    // Rate limiting\n    Task<bool> IsRateLimitedAsync(string key, int limit, TimeSpan window, CancellationToken cancellationToken = default);\n    Task<RateLimitResult> CheckRateLimitAsync(string key, int limit, TimeSpan window, CancellationToken cancellationToken = default);\n}\n\npublic class RateLimitResult\n{\n    public bool IsAllowed { get; set; }\n    public long Count { get; set; }\n    public TimeSpan ResetTime { get; set; }\n    public long Remaining => Math.Max(0, Limit - Count);\n    public long Limit { get; set; }\n}","size_bytes":2862},"backend/src/Shared/DSAGrind.Common/Services/JwtService.cs":{"content":"using System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\nusing DSAGrind.Common.Configuration;\nusing DSAGrind.Models.Entities;\n\nnamespace DSAGrind.Common.Services;\n\npublic class JwtService : IJwtService\n{\n    private readonly JwtSettings _jwtSettings;\n    private readonly JwtSecurityTokenHandler _tokenHandler;\n    private readonly SigningCredentials _signingCredentials;\n\n    public JwtService(IOptions<JwtSettings> jwtSettings)\n    {\n        _jwtSettings = jwtSettings.Value;\n        _tokenHandler = new JwtSecurityTokenHandler();\n        \n        var key = Encoding.UTF8.GetBytes(_jwtSettings.Secret);\n        _signingCredentials = new SigningCredentials(\n            new SymmetricSecurityKey(key),\n            SecurityAlgorithms.HmacSha256\n        );\n    }\n\n    public string GenerateAccessToken(User user)\n    {\n        var claims = new List<Claim>\n        {\n            new(ClaimTypes.NameIdentifier, user.Id),\n            new(ClaimTypes.Name, user.Username),\n            new(ClaimTypes.Email, user.Email),\n            new(ClaimTypes.Role, user.Role),\n            new(\"email_verified\", user.IsEmailVerified.ToString()),\n            new(\"subscription_plan\", user.SubscriptionPlan),\n            new(\"subscription_status\", user.SubscriptionStatus),\n            new(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\n            new(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64)\n        };\n\n        if (!string.IsNullOrEmpty(user.FirstName))\n            claims.Add(new Claim(ClaimTypes.GivenName, user.FirstName));\n\n        if (!string.IsNullOrEmpty(user.LastName))\n            claims.Add(new Claim(ClaimTypes.Surname, user.LastName));\n\n        var tokenDescriptor = new SecurityTokenDescriptor\n        {\n            Subject = new ClaimsIdentity(claims),\n            Expires = DateTime.UtcNow.AddMinutes(_jwtSettings.AccessTokenExpirationMinutes),\n            SigningCredentials = _signingCredentials,\n            Issuer = _jwtSettings.Issuer,\n            Audience = _jwtSettings.Audience\n        };\n\n        var token = _tokenHandler.CreateToken(tokenDescriptor);\n        return _tokenHandler.WriteToken(token);\n    }\n\n    public string GenerateRefreshToken()\n    {\n        var randomNumber = new byte[64];\n        using var rng = RandomNumberGenerator.Create();\n        rng.GetBytes(randomNumber);\n        return Convert.ToBase64String(randomNumber);\n    }\n\n    public ClaimsPrincipal? GetPrincipalFromToken(string token)\n    {\n        try\n        {\n            var tokenValidationParameters = GetTokenValidationParameters();\n            var principal = _tokenHandler.ValidateToken(token, tokenValidationParameters, out var validatedToken);\n            \n            if (!IsJwtWithValidSecurityAlgorithm(validatedToken))\n                return null;\n\n            return principal;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n\n    public ClaimsPrincipal? GetPrincipalFromExpiredToken(string token)\n    {\n        try\n        {\n            var tokenValidationParameters = GetTokenValidationParameters();\n            tokenValidationParameters.ValidateLifetime = false;\n\n            var principal = _tokenHandler.ValidateToken(token, tokenValidationParameters, out var validatedToken);\n            \n            if (!IsJwtWithValidSecurityAlgorithm(validatedToken))\n                return null;\n\n            return principal;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n\n    public bool ValidateToken(string token)\n    {\n        try\n        {\n            var tokenValidationParameters = GetTokenValidationParameters();\n            _tokenHandler.ValidateToken(token, tokenValidationParameters, out _);\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    public string? GetUserIdFromToken(string token)\n    {\n        var principal = GetPrincipalFromToken(token);\n        return principal?.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    }\n\n    public string? GetUsernameFromToken(string token)\n    {\n        var principal = GetPrincipalFromToken(token);\n        return principal?.FindFirst(ClaimTypes.Name)?.Value;\n    }\n\n    public string? GetRoleFromToken(string token)\n    {\n        var principal = GetPrincipalFromToken(token);\n        return principal?.FindFirst(ClaimTypes.Role)?.Value;\n    }\n\n    public DateTime GetTokenExpiration(string token)\n    {\n        try\n        {\n            var jsonToken = _tokenHandler.ReadJwtToken(token);\n            return jsonToken.ValidTo;\n        }\n        catch\n        {\n            return DateTime.MinValue;\n        }\n    }\n\n    public bool IsTokenExpired(string token)\n    {\n        var expiration = GetTokenExpiration(token);\n        return expiration <= DateTime.UtcNow;\n    }\n\n    private TokenValidationParameters GetTokenValidationParameters()\n    {\n        var key = Encoding.UTF8.GetBytes(_jwtSettings.Secret);\n        \n        return new TokenValidationParameters\n        {\n            ValidateIssuer = _jwtSettings.ValidateIssuer,\n            ValidateAudience = _jwtSettings.ValidateAudience,\n            ValidateLifetime = _jwtSettings.ValidateLifetime,\n            ValidateIssuerSigningKey = _jwtSettings.ValidateIssuerSigningKey,\n            ValidIssuer = _jwtSettings.Issuer,\n            ValidAudience = _jwtSettings.Audience,\n            IssuerSigningKey = new SymmetricSecurityKey(key),\n            ClockSkew = TimeSpan.FromMinutes(_jwtSettings.ClockSkewMinutes)\n        };\n    }\n\n    private static bool IsJwtWithValidSecurityAlgorithm(SecurityToken validatedToken)\n    {\n        return validatedToken is JwtSecurityToken jwtSecurityToken &&\n               jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase);\n    }\n}","size_bytes":5962},"backend/src/Shared/DSAGrind.Common/Services/KafkaService.cs":{"content":"// KAFKA MIGRATION TO RABBITMQ - COMMENTED OUT KAFKA IMPLEMENTATION\n// Original Kafka implementation preserved below for reference\n/*\nusing System.Text.Json;\nusing Confluent.Kafka;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Services;\n\npublic class KafkaService : IKafkaService, IDisposable\n{\n    private readonly KafkaSettings _kafkaSettings;\n    private readonly ILogger<KafkaService> _logger;\n    private readonly IProducer<string, string> _producer;\n    private IConsumer<string, string>? _consumer;\n    private CancellationTokenSource? _consumerCancellationTokenSource;\n\n    public KafkaService(IOptions<KafkaSettings> kafkaSettings, ILogger<KafkaService> logger)\n    {\n        _kafkaSettings = kafkaSettings.Value;\n        _logger = logger;\n\n        var producerConfig = new ProducerConfig\n        {\n            BootstrapServers = _kafkaSettings.BootstrapServers,\n            SecurityProtocol = Enum.Parse<SecurityProtocol>(_kafkaSettings.SecurityProtocol),\n            SaslMechanism = Enum.Parse<SaslMechanism>(_kafkaSettings.SaslMechanism),\n            SaslUsername = _kafkaSettings.Username,\n            SaslPassword = _kafkaSettings.Password,\n            EnableIdempotence = _kafkaSettings.EnableIdempotence,\n            Acks = (Acks)_kafkaSettings.Acks,\n            MessageSendMaxRetries = _kafkaSettings.Retries,\n            MaxInFlight = _kafkaSettings.MaxInFlightRequestsPerConnection,\n            MessageMaxBytes = _kafkaSettings.MessageMaxBytes,\n            RequestTimeoutMs = _kafkaSettings.RequestTimeoutMs,\n            RetryBackoffMs = _kafkaSettings.RetryBackoffMs\n        };\n\n        _producer = new ProducerBuilder<string, string>(producerConfig).Build();\n    }\n\n    public async Task PublishAsync<T>(string topic, T message, string? key = null, CancellationToken cancellationToken = default)\n    {\n        await PublishAsync(topic, message, null, key, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T message, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var messageJson = JsonSerializer.Serialize(message, new JsonSerializerOptions\n            {\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            var kafkaMessage = new Message<string, string>\n            {\n                Key = key ?? Guid.NewGuid().ToString(),\n                Value = messageJson,\n                Timestamp = new Timestamp(DateTime.UtcNow)\n            };\n\n            if (headers != null)\n            {\n                kafkaMessage.Headers = new Headers();\n                foreach (var header in headers)\n                {\n                    kafkaMessage.Headers.Add(header.Key, System.Text.Encoding.UTF8.GetBytes(header.Value));\n                }\n            }\n\n            var deliveryResult = await _producer.ProduceAsync(topic, kafkaMessage, cancellationToken);\n            \n            _logger.LogDebug(\"Message published to Kafka topic {Topic} at offset {Offset}\", \n                topic, deliveryResult.Offset);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to publish message to Kafka topic {Topic}\", topic);\n            throw;\n        }\n    }\n\n    public Task StartConsumerAsync<T>(string topic, string consumerGroup, Func<T, Dictionary<string, string>?, Task> messageHandler, CancellationToken cancellationToken = default)\n    {\n        var consumerConfig = new ConsumerConfig\n        {\n            BootstrapServers = _kafkaSettings.BootstrapServers,\n            SecurityProtocol = Enum.Parse<SecurityProtocol>(_kafkaSettings.SecurityProtocol),\n            SaslMechanism = Enum.Parse<SaslMechanism>(_kafkaSettings.SaslMechanism),\n            SaslUsername = _kafkaSettings.Username,\n            SaslPassword = _kafkaSettings.Password,\n            GroupId = consumerGroup,\n            AutoOffsetReset = Enum.Parse<AutoOffsetReset>(_kafkaSettings.AutoOffsetReset),\n            EnableAutoCommit = _kafkaSettings.EnableAutoCommit,\n            SessionTimeoutMs = _kafkaSettings.SessionTimeoutMs,\n            HeartbeatIntervalMs = _kafkaSettings.HeartbeatIntervalMs,\n            MaxPollIntervalMs = _kafkaSettings.MaxPollRecords * 1000\n        };\n\n        _consumer = new ConsumerBuilder<string, string>(consumerConfig).Build();\n        _consumer.Subscribe(topic);\n\n        _consumerCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\n\n        _ = Task.Run(async () =>\n        {\n            try\n            {\n                while (!_consumerCancellationTokenSource.Token.IsCancellationRequested)\n                {\n                    try\n                    {\n                        var consumeResult = _consumer.Consume(_consumerCancellationTokenSource.Token);\n                        \n                        if (consumeResult?.Message?.Value != null)\n                        {\n                            var message = JsonSerializer.Deserialize<T>(consumeResult.Message.Value, new JsonSerializerOptions\n                            {\n                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                            });\n\n                            if (message != null)\n                            {\n                                var headers = new Dictionary<string, string>();\n                                if (consumeResult.Message.Headers != null)\n                                {\n                                    foreach (var header in consumeResult.Message.Headers)\n                                    {\n                                        headers[header.Key] = System.Text.Encoding.UTF8.GetString(header.GetValueBytes());\n                                    }\n                                }\n\n                                await messageHandler(message, headers);\n                                \n                                if (!_kafkaSettings.EnableAutoCommit)\n                                {\n                                    _consumer.Commit(consumeResult);\n                                }\n                            }\n                        }\n                    }\n                    catch (ConsumeException ex)\n                    {\n                        _logger.LogError(ex, \"Error consuming message from Kafka topic {Topic}\", topic);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Error processing message from Kafka topic {Topic}\", topic);\n                    }\n                }\n            }\n            catch (OperationCanceledException)\n            {\n                _logger.LogInformation(\"Kafka consumer for topic {Topic} was cancelled\", topic);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Fatal error in Kafka consumer for topic {Topic}\", topic);\n            }\n        }, _consumerCancellationTokenSource.Token);\n\n        _logger.LogInformation(\"Started Kafka consumer for topic {Topic} with consumer group {ConsumerGroup}\", topic, consumerGroup);\n        return Task.CompletedTask;\n    }\n\n    public Task StopConsumerAsync(CancellationToken cancellationToken = default)\n    {\n        if (_consumerCancellationTokenSource != null)\n        {\n            _consumerCancellationTokenSource.Cancel();\n            _consumerCancellationTokenSource.Dispose();\n            _consumerCancellationTokenSource = null;\n        }\n\n        if (_consumer != null)\n        {\n            _consumer.Close();\n            _consumer.Dispose();\n            _consumer = null;\n        }\n\n        _logger.LogInformation(\"Stopped Kafka consumer\");\n        return Task.CompletedTask;\n    }\n\n    public void Dispose()\n    {\n        _consumerCancellationTokenSource?.Cancel();\n        _consumerCancellationTokenSource?.Dispose();\n        _consumer?.Close();\n        _consumer?.Dispose();\n        _producer?.Dispose();\n    }\n}\n*/\n\n// NEW RABBITMQ IMPLEMENTATION\nusing System.Text.Json;\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\nusing System.Text;\n\nnamespace DSAGrind.Common.Services;\n\npublic class RabbitMQService : IKafkaService, IDisposable\n{\n    private readonly RabbitMQSettings _rabbitMQSettings;\n    private readonly ILogger<RabbitMQService> _logger;\n    private IConnection? _connection;\n    private IModel? _channel;\n    private readonly object _connectionLock = new object();\n\n    public RabbitMQService(IOptions<RabbitMQSettings> rabbitMQSettings, ILogger<RabbitMQService> logger)\n    {\n        _rabbitMQSettings = rabbitMQSettings.Value;\n        _logger = logger;\n        InitializeConnection();\n    }\n\n    private void InitializeConnection()\n    {\n        try\n        {\n            var factory = new ConnectionFactory()\n            {\n                Uri = new Uri(_rabbitMQSettings.ConnectionString),\n                AutomaticRecoveryEnabled = true,\n                NetworkRecoveryInterval = TimeSpan.FromSeconds(10)\n            };\n\n            _connection = factory.CreateConnection();\n            _channel = _connection.CreateModel();\n\n            _logger.LogInformation(\"RabbitMQ connection established successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to establish RabbitMQ connection\");\n            throw;\n        }\n    }\n\n    private void EnsureConnection()\n    {\n        lock (_connectionLock)\n        {\n            if (_connection == null || !_connection.IsOpen || _channel == null || !_channel.IsOpen)\n            {\n                _logger.LogWarning(\"RabbitMQ connection lost, attempting to reconnect...\");\n                InitializeConnection();\n            }\n        }\n    }\n\n    public async Task PublishAsync<T>(string topic, T message, string? key = null, CancellationToken cancellationToken = default)\n    {\n        await PublishAsync(topic, message, null, key, cancellationToken);\n    }\n\n    public async Task PublishAsync<T>(string topic, T message, Dictionary<string, string>? headers, string? key = null, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            EnsureConnection();\n\n            var messageJson = JsonSerializer.Serialize(message, new JsonSerializerOptions\n            {\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            var body = Encoding.UTF8.GetBytes(messageJson);\n            var exchangeName = $\"{topic}-exchange\";\n            var queueName = topic;\n\n            // Declare exchange and queue\n            _channel?.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Direct, durable: true);\n            _channel?.QueueDeclare(queue: queueName, durable: true, exclusive: false, autoDelete: false, arguments: null);\n            _channel?.QueueBind(queue: queueName, exchange: exchangeName, routingKey: queueName);\n\n            var properties = _channel?.CreateBasicProperties();\n            if (properties != null)\n            {\n                properties.Persistent = true;\n                properties.MessageId = key ?? Guid.NewGuid().ToString();\n                properties.Timestamp = new AmqpTimestamp(DateTimeOffset.UtcNow.ToUnixTimeSeconds());\n\n                if (headers != null)\n                {\n                    properties.Headers = new Dictionary<string, object>();\n                    foreach (var header in headers)\n                    {\n                        properties.Headers[header.Key] = header.Value;\n                    }\n                }\n            }\n\n            _channel?.BasicPublish(exchange: exchangeName, routingKey: queueName, basicProperties: properties, body: body);\n\n            _logger.LogDebug(\"Message published to RabbitMQ topic {Topic}\", topic);\n            \n            await Task.CompletedTask; // For async compatibility\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to publish message to RabbitMQ topic {Topic}\", topic);\n            throw;\n        }\n    }\n\n    public Task StartConsumerAsync<T>(string topic, string consumerGroup, Func<T, Dictionary<string, string>?, Task> messageHandler, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            EnsureConnection();\n\n            var queueName = $\"{topic}-{consumerGroup}\";\n            var exchangeName = $\"{topic}-exchange\";\n\n            // Declare exchange and queue\n            _channel?.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Direct, durable: true);\n            _channel?.QueueDeclare(queue: queueName, durable: true, exclusive: false, autoDelete: false, arguments: null);\n            _channel?.QueueBind(queue: queueName, exchange: exchangeName, routingKey: topic);\n\n            if (_channel != null)\n            {\n                var consumer = new EventingBasicConsumer(_channel);\n                consumer.Received += async (model, ea) =>\n                {\n                    try\n                    {\n                        var body = ea.Body.ToArray();\n                        var messageJson = Encoding.UTF8.GetString(body);\n                        \n                        var message = JsonSerializer.Deserialize<T>(messageJson, new JsonSerializerOptions\n                        {\n                            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                        });\n\n                        if (message != null)\n                        {\n                            var headers = new Dictionary<string, string>();\n                            if (ea.BasicProperties.Headers != null)\n                            {\n                                foreach (var header in ea.BasicProperties.Headers)\n                                {\n                                    headers[header.Key] = Encoding.UTF8.GetString((byte[])header.Value);\n                                }\n                            }\n\n                            await messageHandler(message, headers);\n                            _channel?.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, \"Error processing message from RabbitMQ topic {Topic}\", topic);\n                        _channel?.BasicNack(deliveryTag: ea.DeliveryTag, multiple: false, requeue: true);\n                    }\n                };\n\n                _channel.BasicConsume(queue: queueName, autoAck: false, consumer: consumer);\n            }\n\n            _logger.LogInformation(\"Started RabbitMQ consumer for topic {Topic} with consumer group {ConsumerGroup}\", topic, consumerGroup);\n            return Task.CompletedTask;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to start RabbitMQ consumer for topic {Topic}\", topic);\n            throw;\n        }\n    }\n\n    public Task StopConsumerAsync(CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Stopped RabbitMQ consumer\");\n        return Task.CompletedTask;\n    }\n\n    public void Dispose()\n    {\n        _channel?.Close();\n        _channel?.Dispose();\n        _connection?.Close();\n        _connection?.Dispose();\n    }\n}","size_bytes":15424},"backend/src/Shared/DSAGrind.Common/Services/PerplexityAIService.cs":{"content":"using System.Text.Json;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Services;\n\npublic class PerplexityAIService : IAIProviderService\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger<PerplexityAIService> _logger;\n    private readonly AISettings _aiSettings;\n\n    public PerplexityAIService(HttpClient httpClient, ILogger<PerplexityAIService> logger, IOptions<AISettings> aiSettings)\n    {\n        _httpClient = httpClient;\n        _logger = logger;\n        _aiSettings = aiSettings.Value;\n        \n        _httpClient.DefaultRequestHeaders.Add(\"Authorization\", $\"Bearer {_aiSettings.PerplexityApiKey}\");\n    }\n\n    public async Task<string> GenerateHintAsync(string problemDescription, string userCode, int hintLevel, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert programming tutor. Generate a helpful hint for this coding problem.\n            \n            Problem Description: {problemDescription}\n            User's current code: {userCode}\n            Hint Level: {hintLevel} (1=gentle nudge, 2=more specific, 3=detailed guidance)\n            \n            Provide a hint that guides the user without giving away the complete solution.\n            Focus on the algorithmic approach or key insight needed.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> ExplainSolutionAsync(string problemDescription, string solutionCode, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert programming educator. Explain this solution to a coding problem in detail.\n            \n            Problem Description: {problemDescription}\n            Solution Code: {solutionCode}\n            \n            Provide a comprehensive explanation that covers:\n            1. The algorithm/approach used\n            2. Time and space complexity\n            3. Key insights and why this approach works\n            4. Line-by-line walkthrough of important parts\n            \n            Make it educational and easy to understand.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> AnalyzeCodeAsync(string code, string language, string? problemDescription = null, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert code reviewer. Analyze this {language} code and provide detailed feedback.\n            \n            Code: {code}\n            {(problemDescription != null ? $\"Problem Description: {problemDescription}\" : \"\")}\n            \n            Analyze and provide:\n            1. Time complexity (Big O notation)\n            2. Space complexity (Big O notation)\n            3. Code quality score (1-100)\n            4. List of suggestions for improvement\n            5. List of issues or potential bugs\n            6. Best practices recommendations\n            7. Optimization tips\n            \n            Return your analysis in a structured format.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> GenerateTestCasesAsync(string problemDescription, int count, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert test case designer. Generate {count} diverse test cases for this problem.\n            \n            Problem Description: {problemDescription}\n            \n            Generate test cases that cover:\n            - Edge cases (empty input, single element, etc.)\n            - Boundary conditions\n            - Normal cases\n            - Large inputs (if applicable)\n            \n            Format as:\n            Input: [input]\n            Expected Output: [output]\n            ---\n            (repeat for each test case)\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> EstimateDifficultyAsync(string problemDescription, CancellationToken cancellationToken = default)\n    {\n        var prompt = $$$\"\"\"\n            You are an expert programming problem curator. Analyze this problem and estimate its difficulty.\n            \n            Problem Description: {{{problemDescription}}}\n            \n            Provide your analysis in JSON format:\n            {{\n                \"estimatedDifficulty\": \"Easy|Medium|Hard\",\n                \"confidence\": 0.85,\n                \"reasoningFactors\": [\"factor1\", \"factor2\"],\n                \"estimatedTimeMinutes\": 30,\n                \"requiredConcepts\": [\"concept1\", \"concept2\"]\n            }}\n            \n            Consider:\n            - Algorithmic complexity required\n            - Data structures needed\n            - Problem-solving techniques\n            - Implementation difficulty\n            - Typical time to solve for different skill levels\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> OptimizeCodeAsync(string code, string language, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert code optimizer. Optimize this {language} code for better performance and readability.\n            \n            Original Code: {code}\n            \n            Provide an optimized version that:\n            1. Improves time/space complexity if possible\n            2. Follows best practices\n            3. Is more readable and maintainable\n            4. Includes brief comments explaining optimizations\n            \n            Return only the optimized code.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> DebugCodeAsync(string code, string language, string errorMessage, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert debugger. Help fix this {language} code that's producing an error.\n            \n            Code: {code}\n            Error Message: {errorMessage}\n            \n            Provide:\n            1. Explanation of what's causing the error\n            2. The corrected code\n            3. Explanation of the fix\n            4. Tips to avoid similar errors in the future\n            \n            Be clear and educational in your response.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    public async Task<string> GenerateAlternativeSolutionAsync(string problemDescription, string existingCode, string language, CancellationToken cancellationToken = default)\n    {\n        var prompt = $\"\"\"\n            You are an expert programmer. Generate an alternative solution to this problem using a different approach.\n            \n            Problem Description: {problemDescription}\n            Existing Solution: {existingCode}\n            Language: {language}\n            \n            Provide:\n            1. A different algorithmic approach\n            2. Complete alternative solution\n            3. Comparison of time/space complexity\n            4. Explanation of when to use each approach\n            \n            Make sure the alternative uses a genuinely different algorithm or technique.\n            \"\"\";\n\n        return await CallPerplexityAsync(prompt, cancellationToken);\n    }\n\n    private async Task<string> CallPerplexityAsync(string prompt, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var requestData = new\n            {\n                model = _aiSettings.PerplexityModel,\n                messages = new[]\n                {\n                    new { role = \"system\", content = \"Be precise, concise, and educational in your responses.\" },\n                    new { role = \"user\", content = prompt }\n                },\n                temperature = 0.2,\n                top_p = 0.9,\n                max_tokens = _aiSettings.MaxTokens,\n                stream = false\n            };\n\n            var json = JsonSerializer.Serialize(requestData);\n            var content = new StringContent(json, System.Text.Encoding.UTF8, \"application/json\");\n\n            var response = await _httpClient.PostAsync(\"https://api.perplexity.ai/chat/completions\", content, cancellationToken);\n            \n            if (!response.IsSuccessStatusCode)\n            {\n                var errorContent = await response.Content.ReadAsStringAsync(cancellationToken);\n                _logger.LogError(\"Perplexity API error: {StatusCode} - {Content}\", response.StatusCode, errorContent);\n                return \"I'm unable to process your request at the moment. Please try again later.\";\n            }\n\n            var responseJson = await response.Content.ReadAsStringAsync(cancellationToken);\n            var responseObj = JsonSerializer.Deserialize<JsonElement>(responseJson);\n            \n            return responseObj.GetProperty(\"choices\")[0].GetProperty(\"message\").GetProperty(\"content\").GetString() \n                   ?? \"Unable to generate response.\";\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error calling Perplexity API\");\n            return \"I'm experiencing technical difficulties. Please try again later.\";\n        }\n    }\n}","size_bytes":9429},"backend/src/Shared/DSAGrind.Common/Services/RedisService.cs":{"content":"using System.Text.Json;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing StackExchange.Redis;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Services;\n\npublic class RedisService : IRedisService, IDisposable\n{\n    private readonly RedisSettings _redisSettings;\n    private readonly ILogger<RedisService> _logger;\n    private readonly Lazy<ConnectionMultiplexer> _connectionMultiplexer;\n    private readonly JsonSerializerOptions _jsonOptions;\n\n    public RedisService(IOptions<RedisSettings> redisSettings, ILogger<RedisService> logger)\n    {\n        _redisSettings = redisSettings.Value;\n        _logger = logger;\n        \n        _connectionMultiplexer = new Lazy<ConnectionMultiplexer>(() =>\n        {\n            var configuration = ConfigurationOptions.Parse(_redisSettings.ConnectionString);\n            configuration.Password = _redisSettings.Password;\n            configuration.ConnectTimeout = _redisSettings.ConnectTimeoutSeconds * 1000;\n            configuration.SyncTimeout = _redisSettings.SyncTimeoutSeconds * 1000;\n            configuration.CommandMap = CommandMap.Create(new HashSet<string>(), available: false);\n            configuration.CommandMap = CommandMap.Default;\n            configuration.AbortOnConnectFail = _redisSettings.AbortOnConnectFail;\n            configuration.AllowAdmin = _redisSettings.AllowAdmin;\n            configuration.ConnectRetry = _redisSettings.ConnectRetryCount;\n            configuration.KeepAlive = _redisSettings.KeepAliveSeconds;\n\n            return ConnectionMultiplexer.Connect(configuration);\n        });\n\n        _jsonOptions = new JsonSerializerOptions\n        {\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        };\n    }\n\n    private IDatabase Database => _connectionMultiplexer.Value.GetDatabase(_redisSettings.Database);\n    private string GetKey(string key) => $\"{_redisSettings.DefaultKeyPrefix}{key}\";\n\n    public async Task<T?> GetAsync<T>(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var value = await Database.StringGetAsync(GetKey(key));\n            if (!value.HasValue)\n                return default;\n\n            if (typeof(T) == typeof(string))\n                return (T)(object)value.ToString();\n\n            return JsonSerializer.Deserialize<T>(value!, _jsonOptions);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting value from Redis for key {Key}\", key);\n            return default;\n        }\n    }\n\n    public async Task<bool> SetAsync<T>(string key, T value, TimeSpan? expiration = null, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            string serializedValue;\n            if (typeof(T) == typeof(string))\n                serializedValue = value?.ToString() ?? string.Empty;\n            else\n                serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n\n            return await Database.StringSetAsync(GetKey(key), serializedValue, expiration);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting value in Redis for key {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<bool> DeleteAsync(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.KeyDeleteAsync(GetKey(key));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting key from Redis {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<bool> ExistsAsync(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.KeyExistsAsync(GetKey(key));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking if key exists in Redis {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<long> IncrementAsync(string key, long value = 1, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.StringIncrementAsync(GetKey(key), value);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error incrementing value in Redis for key {Key}\", key);\n            return 0;\n        }\n    }\n\n    public async Task<long> DecrementAsync(string key, long value = 1, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.StringDecrementAsync(GetKey(key), value);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error decrementing value in Redis for key {Key}\", key);\n            return 0;\n        }\n    }\n\n    public async Task<bool> ExpireAsync(string key, TimeSpan expiration, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.KeyExpireAsync(GetKey(key), expiration);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting expiration for Redis key {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<TimeSpan?> GetTtlAsync(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.KeyTimeToLiveAsync(GetKey(key));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting TTL for Redis key {Key}\", key);\n            return null;\n        }\n    }\n\n    public async Task<bool> SetAddAsync<T>(string key, T value, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n            return await Database.SetAddAsync(GetKey(key), serializedValue);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error adding to set in Redis for key {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<bool> SetRemoveAsync<T>(string key, T value, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n            return await Database.SetRemoveAsync(GetKey(key), serializedValue);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error removing from set in Redis for key {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<bool> SetContainsAsync<T>(string key, T value, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n            return await Database.SetContainsAsync(GetKey(key), serializedValue);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking set membership in Redis for key {Key}\", key);\n            return false;\n        }\n    }\n\n    public async Task<T[]> SetMembersAsync<T>(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var values = await Database.SetMembersAsync(GetKey(key));\n            return values.Select(v => JsonSerializer.Deserialize<T>(v!, _jsonOptions)!).ToArray();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting set members from Redis for key {Key}\", key);\n            return Array.Empty<T>();\n        }\n    }\n\n    public async Task<bool> HashSetAsync<T>(string key, string field, T value, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n            return await Database.HashSetAsync(GetKey(key), field, serializedValue);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error setting hash field in Redis for key {Key} field {Field}\", key, field);\n            return false;\n        }\n    }\n\n    public async Task<T?> HashGetAsync<T>(string key, string field, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var value = await Database.HashGetAsync(GetKey(key), field);\n            if (!value.HasValue)\n                return default;\n\n            return JsonSerializer.Deserialize<T>(value!, _jsonOptions);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting hash field from Redis for key {Key} field {Field}\", key, field);\n            return default;\n        }\n    }\n\n    public async Task<bool> HashDeleteAsync(string key, string field, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.HashDeleteAsync(GetKey(key), field);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error deleting hash field from Redis for key {Key} field {Field}\", key, field);\n            return false;\n        }\n    }\n\n    public async Task<bool> HashExistsAsync(string key, string field, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.HashExistsAsync(GetKey(key), field);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking hash field existence in Redis for key {Key} field {Field}\", key, field);\n            return false;\n        }\n    }\n\n    public async Task<Dictionary<string, T>> HashGetAllAsync<T>(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var hash = await Database.HashGetAllAsync(GetKey(key));\n            var result = new Dictionary<string, T>();\n\n            foreach (var item in hash)\n            {\n                result[item.Name!] = JsonSerializer.Deserialize<T>(item.Value!, _jsonOptions)!;\n            }\n\n            return result;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting all hash fields from Redis for key {Key}\", key);\n            return new Dictionary<string, T>();\n        }\n    }\n\n    public async Task<long> ListPushAsync<T>(string key, T value, bool toLeft = true, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var serializedValue = JsonSerializer.Serialize(value, _jsonOptions);\n            return toLeft \n                ? await Database.ListLeftPushAsync(GetKey(key), serializedValue)\n                : await Database.ListRightPushAsync(GetKey(key), serializedValue);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error pushing to list in Redis for key {Key}\", key);\n            return 0;\n        }\n    }\n\n    public async Task<T?> ListPopAsync<T>(string key, bool fromLeft = true, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var value = fromLeft \n                ? await Database.ListLeftPopAsync(GetKey(key))\n                : await Database.ListRightPopAsync(GetKey(key));\n                \n            if (!value.HasValue)\n                return default;\n\n            return JsonSerializer.Deserialize<T>(value!, _jsonOptions);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error popping from list in Redis for key {Key}\", key);\n            return default;\n        }\n    }\n\n    public async Task<long> ListLengthAsync(string key, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            return await Database.ListLengthAsync(GetKey(key));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting list length from Redis for key {Key}\", key);\n            return 0;\n        }\n    }\n\n    public async Task<T[]> ListRangeAsync<T>(string key, long start = 0, long stop = -1, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var values = await Database.ListRangeAsync(GetKey(key), start, stop);\n            return values.Select(v => JsonSerializer.Deserialize<T>(v!, _jsonOptions)!).ToArray();\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting list range from Redis for key {Key}\", key);\n            return Array.Empty<T>();\n        }\n    }\n\n    public async Task<bool> IsRateLimitedAsync(string key, int limit, TimeSpan window, CancellationToken cancellationToken = default)\n    {\n        var result = await CheckRateLimitAsync(key, limit, window, cancellationToken);\n        return !result.IsAllowed;\n    }\n\n    public async Task<RateLimitResult> CheckRateLimitAsync(string key, int limit, TimeSpan window, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            var rateLimitKey = GetKey($\"rate_limit:{key}\");\n            var count = await Database.StringIncrementAsync(rateLimitKey);\n            \n            if (count == 1)\n            {\n                await Database.KeyExpireAsync(rateLimitKey, window);\n            }\n\n            var ttl = await Database.KeyTimeToLiveAsync(rateLimitKey) ?? TimeSpan.Zero;\n\n            return new RateLimitResult\n            {\n                IsAllowed = count <= limit,\n                Count = count,\n                Limit = limit,\n                ResetTime = ttl\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error checking rate limit for key {Key}\", key);\n            return new RateLimitResult { IsAllowed = true, Count = 0, Limit = limit };\n        }\n    }\n\n    public void Dispose()\n    {\n        if (_connectionMultiplexer.IsValueCreated)\n        {\n            _connectionMultiplexer.Value.Dispose();\n        }\n    }\n}","size_bytes":13669},"backend/src/Shared/DSAGrind.Common/Services/TestAIService.cs":{"content":"using Microsoft.Extensions.Logging;\nusing DSAGrind.Common.Configuration;\n\nnamespace DSAGrind.Common.Services;\n\n/// <summary>\n/// Test AI service that provides mock responses for development/testing without requiring actual API calls\n/// </summary>\npublic class TestAIService : IAIProviderService\n{\n    private readonly ILogger<TestAIService> _logger;\n    private readonly AISettings _aiSettings;\n\n    public TestAIService(ILogger<TestAIService> logger, AISettings aiSettings)\n    {\n        _logger = logger;\n        _aiSettings = aiSettings;\n    }\n\n    public async Task<string> GenerateHintAsync(string problemDescription, string userCode, int difficulty = 1, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test hint for problem\");\n        await Task.Delay(500, cancellationToken); // Simulate API delay\n        \n        return @\"💡 Test Hint:\n1. Consider the time complexity of your current approach\n2. Think about using a more efficient data structure\n3. Break down the problem into smaller subproblems\n4. Consider edge cases like empty input or single elements\n\nThis is a test response from the development AI service.\";\n    }\n\n    public async Task<string> ExplainCodeAsync(string code, string language, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test code explanation for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"📝 Test Code Explanation ({language}):\n\nYour code appears to implement a solution using standard {language} patterns.\n\nKey components:\n- Variables and data structures for storing intermediate results\n- Main algorithm logic for processing the input\n- Return statement with the final result\n\nAreas for improvement:\n- Consider optimizing the time complexity\n- Add comments for better readability\n- Handle edge cases more explicitly\n\nThis is a test response from the development AI service.\";\n    }\n\n    public async Task<string> AnalyzeComplexityAsync(string code, string language, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test complexity analysis for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return @\"⚡ Test Complexity Analysis:\n\nTime Complexity: O(n log n)\n- The algorithm appears to have logarithmic operations within a linear loop\n\nSpace Complexity: O(n)\n- Additional space is used for storing intermediate results\n\nOptimization suggestions:\n- Consider if sorting is necessary for your approach\n- Look for opportunities to reduce space usage\n- Check if there are more efficient algorithms for this problem type\n\nThis is a test response from the development AI service.\";\n    }\n\n    public async Task<string> GenerateTestCasesAsync(string problemDescription, int count, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating {Count} test test cases\", count);\n        await Task.Delay(500, cancellationToken);\n        \n        var testCases = new List<string>();\n        for (int i = 1; i <= count; i++)\n        {\n            testCases.Add($@\"Test Case {i}:\nInput: [sample_input_{i}]\nExpected Output: [sample_output_{i}]\n---\");\n        }\n        \n        return $@\"🧪 Test Cases Generated:\n\n{string.Join(\"\\n\", testCases)}\n\nNote: These are example test cases generated by the development AI service.\nIn production, these would be tailored specifically to your problem requirements.\";\n    }\n\n    public async Task<string> EstimateDifficultyAsync(string problemDescription, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test difficulty estimation\");\n        await Task.Delay(500, cancellationToken);\n        \n        return @\"{\n    \"\"estimatedDifficulty\"\": \"\"Medium\"\",\n    \"\"confidence\"\": 0.75,\n    \"\"reasoningFactors\"\": [\n        \"\"Requires understanding of data structures\"\",\n        \"\"Multiple solution approaches possible\"\",\n        \"\"Standard algorithm application\"\"\n    ],\n    \"\"estimatedTimeMinutes\"\": 45,\n    \"\"requiredConcepts\"\": [\n        \"\"Arrays/Lists\"\",\n        \"\"Basic algorithms\"\",\n        \"\"Problem decomposition\"\"\n    ]\n}\";\n    }\n\n    public async Task<string> OptimizeCodeAsync(string code, string language, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test code optimization for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"🚀 Test Code Optimization ({language}):\n\n// Optimized version with improvements:\n// 1. Better variable naming\n// 2. Reduced time complexity where possible\n// 3. Added comments for clarity\n\n{code.Replace(\"var \", \"// Optimized: \").Replace(\"int \", \"// Optimized: int \")}\n\nKey optimizations applied:\n- Improved algorithm efficiency\n- Better memory usage\n- Enhanced readability\n\nThis is a test optimization from the development AI service.\";\n    }\n\n    public async Task<string> DebugCodeAsync(string code, string language, string errorMessage, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test debugging help for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"🐛 Test Debug Analysis ({language}):\n\nError Analysis:\nThe error \"\"{errorMessage}\"\" typically occurs due to:\n\n1. **Potential Cause**: Index out of bounds or null reference\n2. **Solution**: Add proper bounds checking and null validation\n3. **Prevention**: Use defensive programming practices\n\nSuggested Fix:\n```{language.ToLower()}\n// Add validation before accessing arrays/objects\nif (array != null && index >= 0 && index < array.Length) {{\n    // Your code here\n}}\n```\n\nBest Practices:\n- Always validate input parameters\n- Use try-catch blocks for error handling\n- Add logging for debugging purposes\n\nThis is a test debug response from the development AI service.\";\n    }\n\n    public async Task<string> GenerateAlternativeSolutionAsync(string problemDescription, string existingCode, string language, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test alternative solution for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"🔄 Test Alternative Solution ({language}):\n\nHere's an alternative approach to solve this problem:\n\n```{language.ToLower()}\n// Alternative solution using a different algorithm\n// This approach focuses on [different technique]\n\npublic int AlternativeSolution(int[] input) {{\n    // Different algorithmic approach\n    // Uses [alternative data structure/method]\n    return result;\n}}\n```\n\nComparison:\n**Original Approach:**\n- Time: O(n²)\n- Space: O(1)\n- Pros: Simple implementation\n- Cons: Higher time complexity\n\n**Alternative Approach:**\n- Time: O(n log n)\n- Space: O(n)\n- Pros: Better time complexity\n- Cons: Uses more memory\n\nChoose based on your constraints and requirements.\n\nThis is a test alternative solution from the development AI service.\";\n    }\n\n    public async Task<string> ExplainSolutionAsync(string problemDescription, string solution, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test solution explanation\");\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"📝 Test Solution Explanation:\n\nThis solution works by implementing the following approach:\n\n**Algorithm Steps:**\n1. Parse and validate the input data\n2. Apply the core algorithm logic\n3. Process results and return output\n\n**Key Insights:**\n- The algorithm leverages efficient data structures\n- Time complexity is optimized for the given constraints\n- Edge cases are handled appropriately\n\n**Why This Works:**\nThe solution addresses the problem requirements by using proven algorithmic techniques that are both correct and efficient.\n\nThis is a test explanation from the development AI service.\";\n    }\n\n    public async Task<string> AnalyzeCodeAsync(string code, string language, string? context = null, CancellationToken cancellationToken = default)\n    {\n        _logger.LogInformation(\"Generating test code analysis for {Language}\", language);\n        await Task.Delay(500, cancellationToken);\n        \n        return $@\"📊 Test Code Analysis ({language}):\n\n**Code Quality Assessment:**\n- Readability: Good\n- Structure: Well organized\n- Best Practices: Following conventions\n\n**Performance Analysis:**\n- Time Complexity: O(n log n)\n- Space Complexity: O(n)\n- Optimization Potential: Medium\n\n**Suggestions:**\n- Consider adding more comments\n- Validate input parameters\n- Handle edge cases explicitly\n\n{(context != null ? $\"**Context Analysis:** {context}\" : \"\")}\n\nThis is a test analysis from the development AI service.\";\n    }\n}","size_bytes":8817},"backend/src/Shared/DSAGrind.Models/DTOs/AIDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\npublic class AIHintRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n    \n    public string? UserCode { get; set; }\n    public string? Language { get; set; }\n    public string? SpecificQuestion { get; set; }\n    public string? ErrorMessage { get; set; }\n    public AIHintLevel HintLevel { get; set; } = AIHintLevel.Gentle;\n}\n\npublic class AIHintResponseDto\n{\n    public string Hint { get; set; } = string.Empty;\n    public string HintType { get; set; } = string.Empty;\n    public AIHintLevel Level { get; set; }\n    public List<string> SuggestedApproaches { get; set; } = new();\n    public List<string> KeyConcepts { get; set; } = new();\n    public string? CodeSuggestion { get; set; }\n    public bool IsComplete { get; set; }\n}\n\npublic class AICodeReviewRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n    \n    [Required]\n    public string Code { get; set; } = string.Empty;\n    \n    [Required]\n    public string Language { get; set; } = string.Empty;\n    \n    public List<string>? TestResults { get; set; }\n    public string? ErrorMessage { get; set; }\n}\n\npublic class AICodeReviewResponseDto\n{\n    public string OverallFeedback { get; set; } = string.Empty;\n    public AICodeQuality QualityScore { get; set; } = new();\n    public List<AICodeSuggestionDto> Suggestions { get; set; } = new();\n    public List<string> PositiveAspects { get; set; } = new();\n    public List<string> ImprovementAreas { get; set; } = new();\n    public TimeSpaceComplexityDto Complexity { get; set; } = new();\n}\n\npublic class AICodeSuggestionDto\n{\n    public string Type { get; set; } = string.Empty; // \"optimization\", \"bug\", \"style\", \"logic\"\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string? CodeExample { get; set; }\n    public int Priority { get; set; } // 1-5, 5 being highest\n    public int? LineNumber { get; set; }\n}\n\npublic class AICodeQuality\n{\n    public int Overall { get; set; } // 1-100\n    public int Readability { get; set; } // 1-100\n    public int Efficiency { get; set; } // 1-100\n    public int Correctness { get; set; } // 1-100\n    public int Style { get; set; } // 1-100\n}\n\npublic class TimeSpaceComplexityDto\n{\n    public string TimeComplexity { get; set; } = string.Empty;\n    public string SpaceComplexity { get; set; } = string.Empty;\n    public string Explanation { get; set; } = string.Empty;\n    public bool IsOptimal { get; set; }\n    public string? OptimalComplexity { get; set; }\n}\n\npublic class AIProblemExplanationRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n    \n    public ExplanationLevel Level { get; set; } = ExplanationLevel.Intermediate;\n    public string? SpecificTopic { get; set; }\n}\n\npublic class AIProblemExplanationResponseDto\n{\n    public string ProblemBreakdown { get; set; } = string.Empty;\n    public List<string> KeyInsights { get; set; } = new();\n    public List<AIApproachDto> Approaches { get; set; } = new();\n    public List<string> Prerequisites { get; set; } = new();\n    public List<string> SimilarProblems { get; set; } = new();\n    public string DifficultyAnalysis { get; set; } = string.Empty;\n}\n\npublic class AIApproachDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string TimeComplexity { get; set; } = string.Empty;\n    public string SpaceComplexity { get; set; } = string.Empty;\n    public List<string> Steps { get; set; } = new();\n    public string? PseudoCode { get; set; }\n    public int Difficulty { get; set; } // 1-5\n}\n\npublic class AILearningPathRequestDto\n{\n    [Required]\n    public string UserId { get; set; } = string.Empty;\n    \n    public List<string>? CompletedProblems { get; set; }\n    public List<string>? WeakAreas { get; set; }\n    public string? TargetLevel { get; set; } // \"beginner\", \"intermediate\", \"advanced\"\n    public string? TimeCommitment { get; set; } // \"casual\", \"moderate\", \"intensive\"\n}\n\npublic class AILearningPathResponseDto\n{\n    public string PathName { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public List<AILearningStepDto> Steps { get; set; } = new();\n    public List<string> RecommendedProblems { get; set; } = new();\n    public string EstimatedTimeToComplete { get; set; } = string.Empty;\n    public List<string> KeyTopics { get; set; } = new();\n}\n\npublic class AILearningStepDto\n{\n    public int Order { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public List<string> Problems { get; set; } = new();\n    public List<string> Resources { get; set; } = new();\n    public string EstimatedTime { get; set; } = string.Empty;\n}\n\npublic class AICodeGenerationRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n    \n    [Required]\n    public string Language { get; set; } = string.Empty;\n    \n    public string? Approach { get; set; }\n    public bool IncludeComments { get; set; } = true;\n    public bool IncludeTestCases { get; set; } = false;\n    public CodeStyle Style { get; set; } = CodeStyle.Clean;\n}\n\npublic class AICodeGenerationResponseDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string Explanation { get; set; } = string.Empty;\n    public TimeSpaceComplexityDto Complexity { get; set; } = new();\n    public List<string> KeyPoints { get; set; } = new();\n    public string? TestCases { get; set; }\n    public List<string> AlternativeApproaches { get; set; } = new();\n}\n\npublic enum AIHintLevel\n{\n    Gentle = 1,\n    Moderate = 2,\n    Direct = 3,\n    Detailed = 4,\n    Solution = 5\n}\n\npublic enum ExplanationLevel\n{\n    Beginner = 1,\n    Intermediate = 2,\n    Advanced = 3,\n    Expert = 4\n}\n\npublic enum CodeStyle\n{\n    Clean = 1,\n    Verbose = 2,\n    Concise = 3,\n    Educational = 4\n}\n\npublic class CodeAnalysisDto\n{\n    public string TimeComplexity { get; set; } = string.Empty;\n    public string SpaceComplexity { get; set; } = string.Empty;\n    public List<string> Suggestions { get; set; } = new();\n    public List<string> Issues { get; set; } = new();\n    public int CodeQualityScore { get; set; }\n    public List<string> BestPractices { get; set; } = new();\n    public List<string> OptimizationTips { get; set; } = new();\n}\n\npublic class DifficultyEstimateDto\n{\n    public string EstimatedDifficulty { get; set; } = string.Empty;\n    public double Confidence { get; set; }\n    public List<string> ReasoningFactors { get; set; } = new();\n    public int EstimatedTimeMinutes { get; set; }\n    public List<string> RequiredConcepts { get; set; } = new();\n}","size_bytes":6806},"backend/src/Shared/DSAGrind.Models/DTOs/AuthDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\npublic class LoginRequestDto\n{\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(6)]\n    public string Password { get; set; } = string.Empty;\n\n    public bool RememberMe { get; set; } = false;\n}\n\npublic class RegisterRequestDto\n{\n    [Required]\n    [MinLength(3)]\n    [MaxLength(50)]\n    public string Username { get; set; } = string.Empty;\n\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(6)]\n    public string Password { get; set; } = string.Empty;\n\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n\npublic class AuthResponseDto\n{\n    public string AccessToken { get; set; } = string.Empty;\n    public string RefreshToken { get; set; } = string.Empty;\n    public UserDto User { get; set; } = new();\n    public DateTime ExpiresAt { get; set; }\n}\n\npublic class RefreshTokenRequestDto\n{\n    [Required]\n    public string RefreshToken { get; set; } = string.Empty;\n}\n\npublic class UserDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string Email { get; set; } = string.Empty;\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string? Avatar { get; set; }\n    public string Role { get; set; } = string.Empty;\n    public bool IsEmailVerified { get; set; }\n    public bool IsActive { get; set; } = true;\n    public string SubscriptionPlan { get; set; } = string.Empty;\n    public string SubscriptionStatus { get; set; } = string.Empty;\n    public DateTime? SubscriptionExpires { get; set; }\n    public int TotalSolved { get; set; }\n    public int Rank { get; set; }\n    public UserProfileDto Profile { get; set; } = new();\n    public DateTime CreatedAt { get; set; }\n    public DateTime? LastLoginAt { get; set; }\n}\n\npublic class UserProfileDto\n{\n    public string? Bio { get; set; }\n    public string? Location { get; set; }\n    public string? Website { get; set; }\n    public string? Company { get; set; }\n    public List<string> Skills { get; set; } = new();\n    public UserPreferencesDto Preferences { get; set; } = new();\n}\n\npublic class UserPreferencesDto\n{\n    public string Theme { get; set; } = \"system\";\n    public string Language { get; set; } = \"en\";\n    public NotificationSettingsDto Notifications { get; set; } = new();\n}\n\npublic class NotificationSettingsDto\n{\n    public bool Email { get; set; } = true;\n    public bool Push { get; set; } = true;\n    public bool Contests { get; set; } = true;\n    public bool Submissions { get; set; } = true;\n}\n\npublic class ForgotPasswordRequestDto\n{\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n}\n\npublic class ResetPasswordRequestDto\n{\n    [Required]\n    public string Token { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(6)]\n    public string NewPassword { get; set; } = string.Empty;\n}\n\npublic class ChangePasswordRequestDto\n{\n    [Required]\n    public string CurrentPassword { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(6)]\n    public string NewPassword { get; set; } = string.Empty;\n}\n\npublic class EmailVerificationRequestDto\n{\n    [Required]\n    public string Token { get; set; } = string.Empty;\n}\n\npublic class ResendVerificationRequestDto\n{\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n}\n\npublic class OAuthCallbackDto\n{\n    public string Code { get; set; } = string.Empty;\n    public string State { get; set; } = string.Empty;\n    public string? Error { get; set; }\n    public string? ErrorDescription { get; set; }\n}\n\npublic class UserSearchRequestDto\n{\n    public string? Search { get; set; }\n    public string? Role { get; set; }\n    public bool? IsActive { get; set; }\n    public int Page { get; set; } = 1;\n    public int PageSize { get; set; } = 20;\n}\n\npublic class UserSearchResponseDto\n{\n    public List<UserDto> Users { get; set; } = new();\n    public int TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n}\n\npublic class AdminAnalyticsDto\n{\n    public int TotalUsers { get; set; }\n    public int ActiveUsers { get; set; }\n    public int TotalProblems { get; set; }\n    public int TotalSubmissions { get; set; }\n    public decimal Revenue { get; set; }\n    public List<AnalyticsDataPointDto> UserGrowthData { get; set; } = new();\n    public List<AnalyticsDataPointDto> RevenueData { get; set; } = new();\n}\n\npublic class AnalyticsDataPointDto\n{\n    public string Label { get; set; } = string.Empty;\n    public decimal Value { get; set; }\n    public DateTime Date { get; set; }\n}","size_bytes":4827},"backend/src/Shared/DSAGrind.Models/DTOs/CategoryDTOs.cs":{"content":"namespace DSAGrind.Models.DTOs;\n\npublic class CategoryDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n    public string Slug { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool IsPaid { get; set; }\n    public int FreeProblemLimit { get; set; }\n    public int TotalProblems { get; set; }\n    public bool IsActive { get; set; }\n    public int OrderIndex { get; set; }\n    public CategoryMetadataDto Metadata { get; set; } = new();\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n\npublic class CategoryMetadataDto\n{\n    public DifficultyDistributionDto Difficulty { get; set; } = new();\n    public List<string> Tags { get; set; } = new();\n    public int EstimatedTimeHours { get; set; }\n}\n\npublic class DifficultyDistributionDto\n{\n    public int Easy { get; set; }\n    public int Medium { get; set; }\n    public int Hard { get; set; }\n}\n\npublic class CreateCategoryRequestDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool IsPaid { get; set; } = false;\n    public int FreeProblemLimit { get; set; } = 5;\n    public int OrderIndex { get; set; } = 0;\n}\n\npublic class UpdateCategoryRequestDto\n{\n    public string? Name { get; set; }\n    public string? Description { get; set; }\n    public string? Icon { get; set; }\n    public bool? IsPaid { get; set; }\n    public int? FreeProblemLimit { get; set; }\n    public int? OrderIndex { get; set; }\n    public bool? IsActive { get; set; }\n}","size_bytes":1665},"backend/src/Shared/DSAGrind.Models/DTOs/MCPDTOs.cs":{"content":"namespace DSAGrind.Models.DTOs;\n\n// Request/Response DTOs\npublic class InitializeRequestDto\n{\n    public string ProtocolVersion { get; set; } = \"2024-11-05\";\n    public ClientInfoDto? ClientInfo { get; set; }\n    public ClientCapabilitiesDto? Capabilities { get; set; }\n}\n\npublic class InitializeResponseDto\n{\n    public string ProtocolVersion { get; set; } = \"2024-11-05\";\n    public ServerInfoDto ServerInfo { get; set; } = new();\n    public ServerCapabilitiesDto Capabilities { get; set; } = new();\n}\n\npublic class ToolCallRequestDto\n{\n    public string Name { get; set; } = string.Empty;\n    public object Arguments { get; set; } = new();\n}\n\npublic class ToolCallResponseDto\n{\n    public List<ContentDto> Content { get; set; } = new();\n}\n\npublic class GetPromptRequestDto\n{\n    public string Name { get; set; } = string.Empty;\n    public Dictionary<string, object>? Arguments { get; set; }\n}\n\npublic class GetPromptResponseDto\n{\n    public List<PromptMessageDto> Messages { get; set; } = new();\n}\n\npublic class ReadResourceRequestDto\n{\n    public string Uri { get; set; } = string.Empty;\n}\n\npublic class ReadResourceResponseDto\n{\n    public List<ContentDto> Contents { get; set; } = new();\n}\n\n// Info DTOs\npublic class ClientInfoDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Version { get; set; } = string.Empty;\n}\n\npublic class ServerInfoDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Version { get; set; } = string.Empty;\n}\n\n// Capability DTOs\npublic class ClientCapabilitiesDto\n{\n    public SamplingCapabilityDto? Sampling { get; set; }\n}\n\npublic class ServerCapabilitiesDto\n{\n    public ToolsCapabilityDto? Tools { get; set; }\n    public PromptsCapabilityDto? Prompts { get; set; }\n    public ResourcesCapabilityDto? Resources { get; set; }\n    public LoggingCapabilityDto? Logging { get; set; }\n}\n\npublic class SamplingCapabilityDto\n{\n}\n\npublic class ToolsCapabilityDto\n{\n    public bool ListChanged { get; set; }\n}\n\npublic class PromptsCapabilityDto\n{\n    public bool ListChanged { get; set; }\n}\n\npublic class ResourcesCapabilityDto\n{\n    public bool Subscribe { get; set; }\n    public bool ListChanged { get; set; }\n}\n\npublic class LoggingCapabilityDto\n{\n}\n\n// Tool DTOs\npublic class ToolDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public object InputSchema { get; set; } = new();\n}\n\n// Prompt DTOs\npublic class PromptDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public List<PromptArgumentDto> Arguments { get; set; } = new();\n}\n\npublic class PromptArgumentDto\n{\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public bool Required { get; set; }\n}\n\npublic class PromptMessageDto\n{\n    public string Role { get; set; } = string.Empty;\n    public ContentDto Content { get; set; } = new();\n}\n\n// Resource DTOs\npublic class ResourceDto\n{\n    public string Uri { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string MimeType { get; set; } = string.Empty;\n}\n\n// Content DTOs\npublic class ContentDto\n{\n    public string Type { get; set; } = string.Empty;\n    public string Text { get; set; } = string.Empty;\n}","size_bytes":3406},"backend/src/Shared/DSAGrind.Models/DTOs/ProblemDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\npublic class ProblemDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string Slug { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string Difficulty { get; set; } = string.Empty;\n    public string CategoryId { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public List<string> Tags { get; set; } = new();\n    public List<string> Companies { get; set; } = new();\n    public List<TestCaseDto> TestCases { get; set; } = new();\n    public ProblemStatsDto Stats { get; set; } = new();\n    public ProblemStatisticsDto Statistics { get; set; } = new();\n    public bool IsPaid { get; set; }\n    public int OrderIndex { get; set; }\n    public string CreatedBy { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n\npublic class ProblemStatsDto\n{\n    public int TotalSubmissions { get; set; }\n    public int AcceptedSubmissions { get; set; }\n    public double AcceptanceRate { get; set; }\n    public int Likes { get; set; }\n    public int Dislikes { get; set; }\n}\n\npublic class CreateProblemRequestDto\n{\n    [Required]\n    public string CategoryId { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(3)]\n    public string Title { get; set; } = string.Empty;\n\n    [Required]\n    [MinLength(10)]\n    public string Description { get; set; } = string.Empty;\n\n    [Required]\n    public string Difficulty { get; set; } = string.Empty;\n\n    public List<string> Tags { get; set; } = new();\n    public List<ProblemExampleDto> Examples { get; set; } = new();\n    public List<string> Constraints { get; set; } = new();\n    public List<TestCaseDto> TestCases { get; set; } = new();\n    public List<TestCaseDto> HiddenTestCases { get; set; } = new();\n    public bool IsPaid { get; set; } = false;\n    public List<string> Hints { get; set; } = new();\n    public ProblemSolutionDto? Solution { get; set; }\n    public string? SolutionTemplate { get; set; }\n}\n\npublic class UpdateProblemRequestDto\n{\n    public string? Title { get; set; }\n    public string? Description { get; set; }\n    public string? Difficulty { get; set; }\n    public List<string>? Tags { get; set; }\n    public List<ProblemExampleDto>? Examples { get; set; }\n    public List<string>? Constraints { get; set; }\n    public List<TestCaseDto>? TestCases { get; set; }\n    public List<TestCaseDto>? HiddenTestCases { get; set; }\n    public bool? IsPaid { get; set; }\n    public List<string>? Hints { get; set; }\n    public ProblemSolutionDto? Solution { get; set; }\n}\n\npublic class ProblemExampleDto\n{\n    [Required]\n    public string Input { get; set; } = string.Empty;\n\n    [Required]\n    public string Output { get; set; } = string.Empty;\n\n    public string? Explanation { get; set; }\n}\n\npublic class TestCaseDto\n{\n    [Required]\n    public string Input { get; set; } = string.Empty;\n\n    [Required]\n    public string ExpectedOutput { get; set; } = string.Empty;\n\n    public bool IsVisible { get; set; } = true;\n    public int TimeLimit { get; set; } = 1000;\n    public int MemoryLimit { get; set; } = 256;\n}\n\npublic class ProblemSolutionDto\n{\n    [Required]\n    public string Code { get; set; } = string.Empty;\n\n    [Required]\n    public string Language { get; set; } = string.Empty;\n\n    public string? Explanation { get; set; }\n    public string? TimeComplexity { get; set; }\n    public string? SpaceComplexity { get; set; }\n}\n\npublic class ProblemStatisticsDto\n{\n    public int TotalSubmissions { get; set; }\n    public int AcceptedSubmissions { get; set; }\n    public double AcceptanceRate { get; set; }\n    public int Views { get; set; }\n    public int Likes { get; set; }\n    public int Dislikes { get; set; }\n    public double AverageRating { get; set; }\n    public int SolvedByUsers { get; set; }\n}\n\npublic class ProblemMetadataDto\n{\n    public List<string> Companies { get; set; } = new();\n    public List<string> Patterns { get; set; } = new();\n    public List<string> RelatedProblems { get; set; } = new();\n    public int EstimatedTimeMinutes { get; set; }\n}\n\npublic class ProblemSearchRequestDto\n{\n    public string? CategoryId { get; set; }\n    public string? Difficulty { get; set; }\n    public List<string>? Tags { get; set; }\n    public bool? IsPaid { get; set; }\n    public bool? IsApproved { get; set; } = true;\n    public string? Search { get; set; }\n    public string? SortBy { get; set; } = \"title\";\n    public string? SortOrder { get; set; } = \"asc\";\n    public int Page { get; set; } = 1;\n    public int PageSize { get; set; } = 20;\n}\n\npublic class ProblemSearchResponseDto\n{\n    public List<ProblemDto> Problems { get; set; } = new();\n    public int TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n    public bool HasNextPage { get; set; }\n    public bool HasPreviousPage { get; set; }\n}\n\npublic class BulkImportRequestDto\n{\n    [Required]\n    public string CategoryId { get; set; } = string.Empty;\n\n    [Required]\n    public List<BulkProblemDto> Problems { get; set; } = new();\n}\n\npublic class BulkProblemDto\n{\n    [Required]\n    public string Title { get; set; } = string.Empty;\n\n    [Required]\n    public string Description { get; set; } = string.Empty;\n\n    [Required]\n    public string Difficulty { get; set; } = string.Empty;\n\n    public string? Tags { get; set; } // Comma-separated\n    public string? Examples { get; set; } // JSON string\n    public string? Constraints { get; set; } // Newline-separated\n    public string? TestCases { get; set; } // JSON string\n    public string? HiddenTestCases { get; set; } // JSON string\n    public bool IsPaid { get; set; } = false;\n    public string? Hints { get; set; } // Newline-separated\n    public string? Solution { get; set; } // JSON string\n}","size_bytes":5974},"backend/src/Shared/DSAGrind.Models/DTOs/SubmissionDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\npublic class SubmissionDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string ProblemTitle { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public int? Runtime { get; set; }\n    public int? Memory { get; set; }\n    public List<TestResultDto> TestResults { get; set; } = new();\n    public string? ErrorMessage { get; set; }\n    public ExecutionDetailsDto ExecutionDetails { get; set; } = new();\n    public bool IsPublic { get; set; }\n    public string? Notes { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class CreateSubmissionRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n\n    [Required]\n    public string Code { get; set; } = string.Empty;\n\n    [Required]\n    public string Language { get; set; } = string.Empty;\n\n    public bool IsPublic { get; set; } = false;\n    public string? Notes { get; set; }\n}\n\npublic class CodeExecutionRequestDto\n{\n    [Required]\n    public string Code { get; set; } = string.Empty;\n\n    [Required]\n    public string Language { get; set; } = string.Empty;\n\n    [Required]\n    public string Input { get; set; } = string.Empty;\n\n    public int TimeLimit { get; set; } = 5000; // milliseconds\n    public int MemoryLimit { get; set; } = 256; // MB\n}\n\npublic class CodeTestRequestDto\n{\n    [Required]\n    public string ProblemId { get; set; } = string.Empty;\n\n    [Required]\n    public string Code { get; set; } = string.Empty;\n\n    [Required]\n    public string Language { get; set; } = string.Empty;\n\n    public bool RunVisibleTestsOnly { get; set; } = true;\n}\n\npublic class CodeExecutionResultDto\n{\n    public string Status { get; set; } = string.Empty;\n    public string Output { get; set; } = string.Empty;\n    public string? ErrorMessage { get; set; }\n    public int Runtime { get; set; }\n    public int Memory { get; set; }\n    public List<TestResultDto> TestResults { get; set; } = new();\n    public ExecutionDetailsDto ExecutionDetails { get; set; } = new();\n}\n\npublic class TestResultDto\n{\n    public int TestCaseIndex { get; set; }\n    public bool Passed { get; set; }\n    public string Input { get; set; } = string.Empty;\n    public string ExpectedOutput { get; set; } = string.Empty;\n    public string ActualOutput { get; set; } = string.Empty;\n    public int Runtime { get; set; }\n    public int Memory { get; set; }\n    public string? ErrorMessage { get; set; }\n}\n\npublic class ExecutionDetailsDto\n{\n    public int CompilationTime { get; set; }\n    public int TotalRuntime { get; set; }\n    public int PeakMemoryUsage { get; set; }\n    public string ExecutorVersion { get; set; } = string.Empty;\n    public SandboxInfoDto SandboxInfo { get; set; } = new();\n}\n\npublic class SandboxInfoDto\n{\n    public string ContainerId { get; set; } = string.Empty;\n    public DateTime ExecutionStartTime { get; set; }\n    public DateTime ExecutionEndTime { get; set; }\n    public ResourceLimitsDto ResourceLimits { get; set; } = new();\n}\n\npublic class ResourceLimitsDto\n{\n    public int TimeLimit { get; set; } = 1000;\n    public int MemoryLimit { get; set; } = 256;\n    public double CpuLimit { get; set; } = 1.0;\n}\n\npublic class SubmissionSearchRequestDto\n{\n    public string? ProblemId { get; set; }\n    public string? UserId { get; set; }\n    public string? Status { get; set; }\n    public string? Language { get; set; }\n    public DateTime? FromDate { get; set; }\n    public DateTime? ToDate { get; set; }\n    public string? SortBy { get; set; } = \"createdAt\";\n    public string? SortOrder { get; set; } = \"desc\";\n    public int Page { get; set; } = 1;\n    public int PageSize { get; set; } = 20;\n}\n\npublic class SubmissionSearchResponseDto\n{\n    public List<SubmissionDto> Submissions { get; set; } = new();\n    public int TotalCount { get; set; }\n    public int Page { get; set; }\n    public int PageSize { get; set; }\n    public int TotalPages { get; set; }\n    public bool HasNextPage { get; set; }\n    public bool HasPreviousPage { get; set; }\n}","size_bytes":4302},"backend/src/Shared/DSAGrind.Models/Entities/Category.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class Category\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"name\")]\n    public string Name { get; set; } = string.Empty;\n\n    [BsonElement(\"slug\")]\n    public string Slug { get; set; } = string.Empty;\n\n    [BsonElement(\"description\")]\n    public string? Description { get; set; }\n\n    [BsonElement(\"icon\")]\n    public string? Icon { get; set; }\n\n    [BsonElement(\"isPaid\")]\n    public bool IsPaid { get; set; } = false;\n\n    [BsonElement(\"freeProblemLimit\")]\n    public int FreeProblemLimit { get; set; } = 5;\n\n    [BsonElement(\"totalProblems\")]\n    public int TotalProblems { get; set; } = 0;\n\n    [BsonElement(\"isActive\")]\n    public bool IsActive { get; set; } = true;\n\n    [BsonElement(\"orderIndex\")]\n    public int OrderIndex { get; set; } = 0;\n\n    [BsonElement(\"metadata\")]\n    public CategoryMetadata Metadata { get; set; } = new();\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"updatedAt\")]\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class CategoryMetadata\n{\n    [BsonElement(\"difficulty\")]\n    public DifficultyDistribution Difficulty { get; set; } = new();\n\n    [BsonElement(\"tags\")]\n    public List<string> Tags { get; set; } = new();\n\n    [BsonElement(\"estimatedTimeHours\")]\n    public int EstimatedTimeHours { get; set; } = 0;\n}\n\npublic class DifficultyDistribution\n{\n    [BsonElement(\"easy\")]\n    public int Easy { get; set; } = 0;\n\n    [BsonElement(\"medium\")]\n    public int Medium { get; set; } = 0;\n\n    [BsonElement(\"hard\")]\n    public int Hard { get; set; } = 0;\n}","size_bytes":1776},"backend/src/Shared/DSAGrind.Models/Entities/Notification.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class Notification\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"type\")]\n    public string Type { get; set; } = string.Empty; // submission_result, contest_reminder, payment_success, etc.\n\n    [BsonElement(\"title\")]\n    public string Title { get; set; } = string.Empty;\n\n    [BsonElement(\"message\")]\n    public string Message { get; set; } = string.Empty;\n\n    [BsonElement(\"payload\")]\n    public Dictionary<string, object> Payload { get; set; } = new();\n\n    [BsonElement(\"isRead\")]\n    public bool IsRead { get; set; } = false;\n\n    [BsonElement(\"priority\")]\n    public string Priority { get; set; } = \"normal\"; // low, normal, high, critical\n\n    [BsonElement(\"channels\")]\n    public List<string> Channels { get; set; } = new(); // email, push, in-app\n\n    [BsonElement(\"sentAt\")]\n    public DateTime? SentAt { get; set; }\n\n    [BsonElement(\"readAt\")]\n    public DateTime? ReadAt { get; set; }\n\n    [BsonElement(\"expiresAt\")]\n    public DateTime? ExpiresAt { get; set; }\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class Contest\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"title\")]\n    public string Title { get; set; } = string.Empty;\n\n    [BsonElement(\"description\")]\n    public string Description { get; set; } = string.Empty;\n\n    [BsonElement(\"startTime\")]\n    public DateTime StartTime { get; set; }\n\n    [BsonElement(\"endTime\")]\n    public DateTime EndTime { get; set; }\n\n    [BsonElement(\"problemIds\")]\n    public List<string> ProblemIds { get; set; } = new();\n\n    [BsonElement(\"participants\")]\n    public List<ContestParticipant> Participants { get; set; } = new();\n\n    [BsonElement(\"leaderboard\")]\n    public List<LeaderboardEntry> Leaderboard { get; set; } = new();\n\n    [BsonElement(\"prizes\")]\n    public List<ContestPrize> Prizes { get; set; } = new();\n\n    [BsonElement(\"rules\")]\n    public ContestRules Rules { get; set; } = new();\n\n    [BsonElement(\"isActive\")]\n    public bool IsActive { get; set; } = true;\n\n    [BsonElement(\"isPublic\")]\n    public bool IsPublic { get; set; } = true;\n\n    [BsonElement(\"createdBy\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string CreatedBy { get; set; } = string.Empty;\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ContestParticipant\n{\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"username\")]\n    public string Username { get; set; } = string.Empty;\n\n    [BsonElement(\"score\")]\n    public int Score { get; set; } = 0;\n\n    [BsonElement(\"rank\")]\n    public int Rank { get; set; } = 0;\n\n    [BsonElement(\"submissions\")]\n    public List<ContestSubmission> Submissions { get; set; } = new();\n\n    [BsonElement(\"joinedAt\")]\n    public DateTime JoinedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ContestSubmission\n{\n    [BsonElement(\"problemId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string ProblemId { get; set; } = string.Empty;\n\n    [BsonElement(\"submissionId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string SubmissionId { get; set; } = string.Empty;\n\n    [BsonElement(\"score\")]\n    public int Score { get; set; } = 0;\n\n    [BsonElement(\"penalty\")]\n    public int Penalty { get; set; } = 0;\n\n    [BsonElement(\"submittedAt\")]\n    public DateTime SubmittedAt { get; set; }\n}\n\npublic class LeaderboardEntry\n{\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"username\")]\n    public string Username { get; set; } = string.Empty;\n\n    [BsonElement(\"rank\")]\n    public int Rank { get; set; }\n\n    [BsonElement(\"score\")]\n    public int Score { get; set; }\n\n    [BsonElement(\"penalty\")]\n    public int Penalty { get; set; }\n\n    [BsonElement(\"problemsSolved\")]\n    public int ProblemsSolved { get; set; }\n}\n\npublic class ContestPrize\n{\n    [BsonElement(\"position\")]\n    public int Position { get; set; }\n\n    [BsonElement(\"description\")]\n    public string Description { get; set; } = string.Empty;\n\n    [BsonElement(\"value\")]\n    public decimal? Value { get; set; }\n\n    [BsonElement(\"currency\")]\n    public string? Currency { get; set; }\n}\n\npublic class ContestRules\n{\n    [BsonElement(\"scoringSystem\")]\n    public string ScoringSystem { get; set; } = \"standard\"; // standard, icpc, ioi\n\n    [BsonElement(\"penaltyPerWrongSubmission\")]\n    public int PenaltyPerWrongSubmission { get; set; } = 20;\n\n    [BsonElement(\"maxSubmissionsPerProblem\")]\n    public int? MaxSubmissionsPerProblem { get; set; }\n\n    [BsonElement(\"allowedLanguages\")]\n    public List<string> AllowedLanguages { get; set; } = new();\n\n    [BsonElement(\"freezeTime\")]\n    public int? FreezeTime { get; set; } // minutes before end when leaderboard freezes\n}","size_bytes":5257},"backend/src/Shared/DSAGrind.Models/Entities/Payment.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class Payment\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"subscriptionId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string? SubscriptionId { get; set; }\n\n    [BsonElement(\"amount\")]\n    public decimal Amount { get; set; }\n\n    [BsonElement(\"currency\")]\n    public string Currency { get; set; } = \"USD\";\n\n    [BsonElement(\"status\")]\n    public string Status { get; set; } = string.Empty; // pending, completed, failed, refunded\n\n    [BsonElement(\"provider\")]\n    public string Provider { get; set; } = string.Empty; // stripe, razorpay\n\n    [BsonElement(\"providerPaymentId\")]\n    public string ProviderPaymentId { get; set; } = string.Empty;\n\n    [BsonElement(\"paymentMethod\")]\n    public PaymentMethod PaymentMethod { get; set; } = new();\n\n    [BsonElement(\"billing\")]\n    public BillingInfo Billing { get; set; } = new();\n\n    [BsonElement(\"metadata\")]\n    public Dictionary<string, object> Metadata { get; set; } = new();\n\n    [BsonElement(\"refundInfo\")]\n    public RefundInfo? RefundInfo { get; set; }\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"updatedAt\")]\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class Subscription\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"plan\")]\n    public string Plan { get; set; } = string.Empty; // free, premium_monthly, premium_annual\n\n    [BsonElement(\"status\")]\n    public string Status { get; set; } = string.Empty; // active, cancelled, expired, suspended\n\n    [BsonElement(\"provider\")]\n    public string Provider { get; set; } = string.Empty;\n\n    [BsonElement(\"providerSubscriptionId\")]\n    public string ProviderSubscriptionId { get; set; } = string.Empty;\n\n    [BsonElement(\"startDate\")]\n    public DateTime StartDate { get; set; }\n\n    [BsonElement(\"endDate\")]\n    public DateTime? EndDate { get; set; }\n\n    [BsonElement(\"nextBillingDate\")]\n    public DateTime? NextBillingDate { get; set; }\n\n    [BsonElement(\"cancelledAt\")]\n    public DateTime? CancelledAt { get; set; }\n\n    [BsonElement(\"features\")]\n    public SubscriptionFeatures Features { get; set; } = new();\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"updatedAt\")]\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class PaymentMethod\n{\n    [BsonElement(\"type\")]\n    public string Type { get; set; } = string.Empty; // card, upi, wallet\n\n    [BsonElement(\"last4\")]\n    public string? Last4 { get; set; }\n\n    [BsonElement(\"brand\")]\n    public string? Brand { get; set; }\n\n    [BsonElement(\"expiryMonth\")]\n    public int? ExpiryMonth { get; set; }\n\n    [BsonElement(\"expiryYear\")]\n    public int? ExpiryYear { get; set; }\n}\n\npublic class BillingInfo\n{\n    [BsonElement(\"name\")]\n    public string Name { get; set; } = string.Empty;\n\n    [BsonElement(\"email\")]\n    public string Email { get; set; } = string.Empty;\n\n    [BsonElement(\"address\")]\n    public Address Address { get; set; } = new();\n}\n\npublic class Address\n{\n    [BsonElement(\"line1\")]\n    public string Line1 { get; set; } = string.Empty;\n\n    [BsonElement(\"line2\")]\n    public string? Line2 { get; set; }\n\n    [BsonElement(\"city\")]\n    public string City { get; set; } = string.Empty;\n\n    [BsonElement(\"state\")]\n    public string State { get; set; } = string.Empty;\n\n    [BsonElement(\"postalCode\")]\n    public string PostalCode { get; set; } = string.Empty;\n\n    [BsonElement(\"country\")]\n    public string Country { get; set; } = string.Empty;\n}\n\npublic class RefundInfo\n{\n    [BsonElement(\"refundId\")]\n    public string RefundId { get; set; } = string.Empty;\n\n    [BsonElement(\"amount\")]\n    public decimal Amount { get; set; }\n\n    [BsonElement(\"reason\")]\n    public string Reason { get; set; } = string.Empty;\n\n    [BsonElement(\"status\")]\n    public string Status { get; set; } = string.Empty;\n\n    [BsonElement(\"processedAt\")]\n    public DateTime ProcessedAt { get; set; }\n}\n\npublic class SubscriptionFeatures\n{\n    [BsonElement(\"unlimitedProblems\")]\n    public bool UnlimitedProblems { get; set; } = false;\n\n    [BsonElement(\"aiAssistance\")]\n    public bool AiAssistance { get; set; } = false;\n\n    [BsonElement(\"premiumSupport\")]\n    public bool PremiumSupport { get; set; } = false;\n\n    [BsonElement(\"advancedAnalytics\")]\n    public bool AdvancedAnalytics { get; set; } = false;\n\n    [BsonElement(\"customThemes\")]\n    public bool CustomThemes { get; set; } = false;\n\n    [BsonElement(\"priorityExecution\")]\n    public bool PriorityExecution { get; set; } = false;\n}","size_bytes":5083},"backend/src/Shared/DSAGrind.Models/Entities/Problem.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class Problem\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"categoryId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string CategoryId { get; set; } = string.Empty;\n\n    [BsonElement(\"title\")]\n    public string Title { get; set; } = string.Empty;\n\n    [BsonElement(\"slug\")]\n    public string Slug { get; set; } = string.Empty;\n\n    [BsonElement(\"description\")]\n    public string Description { get; set; } = string.Empty;\n\n    [BsonElement(\"difficulty\")]\n    public string Difficulty { get; set; } = string.Empty; // Easy, Medium, Hard\n\n    [BsonElement(\"tags\")]\n    public List<string> Tags { get; set; } = new();\n\n    [BsonElement(\"examples\")]\n    public List<ProblemExample> Examples { get; set; } = new();\n\n    [BsonElement(\"constraints\")]\n    public List<string> Constraints { get; set; } = new();\n\n    [BsonElement(\"testCases\")]\n    public List<TestCase> TestCases { get; set; } = new();\n\n    [BsonElement(\"hiddenTestCases\")]\n    public List<TestCase> HiddenTestCases { get; set; } = new();\n\n    [BsonElement(\"isPaid\")]\n    public bool IsPaid { get; set; } = false;\n\n    [BsonElement(\"isApproved\")]\n    public bool IsApproved { get; set; } = false;\n\n    [BsonElement(\"status\")]\n    public string Status { get; set; } = \"draft\"; // draft, published, archived\n\n    [BsonElement(\"orderIndex\")]\n    public int OrderIndex { get; set; } = 0;\n\n    [BsonElement(\"solutionTemplate\")]\n    public string? SolutionTemplate { get; set; }\n\n    [BsonElement(\"aiEstimatedDifficulty\")]\n    public string? AiEstimatedDifficulty { get; set; }\n\n    [BsonElement(\"hints\")]\n    public List<string> Hints { get; set; } = new();\n\n    [BsonElement(\"solution\")]\n    public ProblemSolution? Solution { get; set; }\n\n    [BsonElement(\"statistics\")]\n    public ProblemStatistics Statistics { get; set; } = new();\n\n    [BsonElement(\"metadata\")]\n    public ProblemMetadata Metadata { get; set; } = new();\n\n    [BsonElement(\"createdBy\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string? CreatedBy { get; set; }\n\n    [BsonElement(\"updatedBy\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string? UpdatedBy { get; set; }\n\n    [BsonElement(\"approvedBy\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string? ApprovedBy { get; set; }\n\n    [BsonElement(\"approvedAt\")]\n    public DateTime? ApprovedAt { get; set; }\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"updatedAt\")]\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class ProblemExample\n{\n    [BsonElement(\"input\")]\n    public string Input { get; set; } = string.Empty;\n\n    [BsonElement(\"output\")]\n    public string Output { get; set; } = string.Empty;\n\n    [BsonElement(\"explanation\")]\n    public string? Explanation { get; set; }\n}\n\npublic class TestCase\n{\n    [BsonElement(\"input\")]\n    public string Input { get; set; } = string.Empty;\n\n    [BsonElement(\"expectedOutput\")]\n    public string ExpectedOutput { get; set; } = string.Empty;\n\n    [BsonElement(\"isVisible\")]\n    public bool IsVisible { get; set; } = true;\n\n    [BsonElement(\"timeLimit\")]\n    public int TimeLimit { get; set; } = 1000; // milliseconds\n\n    [BsonElement(\"memoryLimit\")]\n    public int MemoryLimit { get; set; } = 256; // MB\n}\n\npublic class ProblemSolution\n{\n    [BsonElement(\"code\")]\n    public string Code { get; set; } = string.Empty;\n\n    [BsonElement(\"language\")]\n    public string Language { get; set; } = \"python\";\n\n    [BsonElement(\"explanation\")]\n    public string? Explanation { get; set; }\n\n    [BsonElement(\"timeComplexity\")]\n    public string? TimeComplexity { get; set; }\n\n    [BsonElement(\"spaceComplexity\")]\n    public string? SpaceComplexity { get; set; }\n}\n\npublic class ProblemStatistics\n{\n    [BsonElement(\"totalSubmissions\")]\n    public int TotalSubmissions { get; set; } = 0;\n\n    [BsonElement(\"acceptedSubmissions\")]\n    public int AcceptedSubmissions { get; set; } = 0;\n\n    [BsonElement(\"acceptanceRate\")]\n    public double AcceptanceRate { get; set; } = 0.0;\n\n    [BsonElement(\"likes\")]\n    public int Likes { get; set; } = 0;\n\n    [BsonElement(\"dislikes\")]\n    public int Dislikes { get; set; } = 0;\n\n    [BsonElement(\"averageRating\")]\n    public double AverageRating { get; set; } = 0.0;\n\n    [BsonElement(\"solvedByUsers\")]\n    public int SolvedByUsers { get; set; } = 0;\n}\n\npublic class ProblemMetadata\n{\n    [BsonElement(\"companies\")]\n    public List<string> Companies { get; set; } = new();\n\n    [BsonElement(\"patterns\")]\n    public List<string> Patterns { get; set; } = new();\n\n    [BsonElement(\"relatedProblems\")]\n    public List<string> RelatedProblems { get; set; } = new();\n\n    [BsonElement(\"estimatedTimeMinutes\")]\n    public int EstimatedTimeMinutes { get; set; } = 30;\n\n    [BsonElement(\"lastUpdated\")]\n    public DateTime LastUpdated { get; set; } = DateTime.UtcNow;\n}","size_bytes":5043},"backend/src/Shared/DSAGrind.Models/Entities/Submission.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class Submission\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"userId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string UserId { get; set; } = string.Empty;\n\n    [BsonElement(\"problemId\")]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string ProblemId { get; set; } = string.Empty;\n\n    [BsonElement(\"code\")]\n    public string Code { get; set; } = string.Empty;\n\n    [BsonElement(\"language\")]\n    public string Language { get; set; } = string.Empty;\n\n    [BsonElement(\"status\")]\n    public string Status { get; set; } = string.Empty; // Accepted, Wrong Answer, Time Limit Exceeded, etc.\n\n    [BsonElement(\"runtime\")]\n    public int? Runtime { get; set; } // milliseconds\n\n    [BsonElement(\"memory\")]\n    public int? Memory { get; set; } // KB\n\n    [BsonElement(\"testResults\")]\n    public List<TestResult> TestResults { get; set; } = new();\n\n    [BsonElement(\"errorMessage\")]\n    public string? ErrorMessage { get; set; }\n\n    [BsonElement(\"executionDetails\")]\n    public ExecutionDetails ExecutionDetails { get; set; } = new();\n\n    [BsonElement(\"isPublic\")]\n    public bool IsPublic { get; set; } = false;\n\n    [BsonElement(\"notes\")]\n    public string? Notes { get; set; }\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n\npublic class TestResult\n{\n    [BsonElement(\"testCaseIndex\")]\n    public int TestCaseIndex { get; set; }\n\n    [BsonElement(\"passed\")]\n    public bool Passed { get; set; }\n\n    [BsonElement(\"input\")]\n    public string Input { get; set; } = string.Empty;\n\n    [BsonElement(\"expectedOutput\")]\n    public string ExpectedOutput { get; set; } = string.Empty;\n\n    [BsonElement(\"actualOutput\")]\n    public string ActualOutput { get; set; } = string.Empty;\n\n    [BsonElement(\"runtime\")]\n    public int Runtime { get; set; } // milliseconds\n\n    [BsonElement(\"memory\")]\n    public int Memory { get; set; } // KB\n\n    [BsonElement(\"errorMessage\")]\n    public string? ErrorMessage { get; set; }\n}\n\npublic class ExecutionDetails\n{\n    [BsonElement(\"compilationTime\")]\n    public int CompilationTime { get; set; } = 0;\n\n    [BsonElement(\"totalRuntime\")]\n    public int TotalRuntime { get; set; } = 0;\n\n    [BsonElement(\"peakMemoryUsage\")]\n    public int PeakMemoryUsage { get; set; } = 0;\n\n    [BsonElement(\"executorVersion\")]\n    public string ExecutorVersion { get; set; } = string.Empty;\n\n    [BsonElement(\"sandboxInfo\")]\n    public SandboxInfo SandboxInfo { get; set; } = new();\n}\n\npublic class SandboxInfo\n{\n    [BsonElement(\"containerId\")]\n    public string ContainerId { get; set; } = string.Empty;\n\n    [BsonElement(\"executionStartTime\")]\n    public DateTime ExecutionStartTime { get; set; }\n\n    [BsonElement(\"executionEndTime\")]\n    public DateTime ExecutionEndTime { get; set; }\n\n    [BsonElement(\"resourceLimits\")]\n    public ResourceLimits ResourceLimits { get; set; } = new();\n}\n\npublic class ResourceLimits\n{\n    [BsonElement(\"timeLimit\")]\n    public int TimeLimit { get; set; } = 1000; // milliseconds\n\n    [BsonElement(\"memoryLimit\")]\n    public int MemoryLimit { get; set; } = 256; // MB\n\n    [BsonElement(\"cpuLimit\")]\n    public double CpuLimit { get; set; } = 1.0; // CPU cores\n}","size_bytes":3374},"backend/src/Shared/DSAGrind.Models/Entities/User.cs":{"content":"using MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n\nnamespace DSAGrind.Models.Entities;\n\npublic class User\n{\n    [BsonId]\n    [BsonRepresentation(BsonType.ObjectId)]\n    public string Id { get; set; } = string.Empty;\n\n    [BsonElement(\"username\")]\n    public string Username { get; set; } = string.Empty;\n\n    [BsonElement(\"email\")]\n    public string Email { get; set; } = string.Empty;\n\n    [BsonElement(\"passwordHash\")]\n    public string? PasswordHash { get; set; }\n\n    [BsonElement(\"firstName\")]\n    public string? FirstName { get; set; }\n\n    [BsonElement(\"lastName\")]\n    public string? LastName { get; set; }\n\n    [BsonElement(\"avatar\")]\n    public string? Avatar { get; set; }\n\n    [BsonElement(\"role\")]\n    public string Role { get; set; } = \"user\"; // user, admin\n\n    [BsonElement(\"isEmailVerified\")]\n    public bool IsEmailVerified { get; set; } = false;\n\n    [BsonElement(\"emailVerificationToken\")]\n    public string? EmailVerificationToken { get; set; }\n\n    [BsonElement(\"resetPasswordToken\")]\n    public string? ResetPasswordToken { get; set; }\n\n    [BsonElement(\"resetPasswordExpires\")]\n    public DateTime? ResetPasswordExpires { get; set; }\n\n    [BsonElement(\"githubId\")]\n    public string? GitHubId { get; set; }\n\n    [BsonElement(\"googleId\")]\n    public string? GoogleId { get; set; }\n\n    [BsonElement(\"refreshTokens\")]\n    public List<RefreshToken> RefreshTokens { get; set; } = new();\n\n    [BsonElement(\"subscriptionPlan\")]\n    public string SubscriptionPlan { get; set; } = \"free\"; // free, premium\n\n    [BsonElement(\"subscriptionStatus\")]\n    public string SubscriptionStatus { get; set; } = \"active\";\n\n    [BsonElement(\"subscriptionExpires\")]\n    public DateTime? SubscriptionExpires { get; set; }\n\n    [BsonElement(\"totalSolved\")]\n    public int TotalSolved { get; set; } = 0;\n\n    [BsonElement(\"rank\")]\n    public int Rank { get; set; } = 0;\n\n    [BsonElement(\"profile\")]\n    public UserProfile Profile { get; set; } = new();\n\n    [BsonElement(\"createdAt\")]\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"updatedAt\")]\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"isActive\")]\n    public bool IsActive { get; set; } = true;\n\n    [BsonElement(\"lastLoginAt\")]\n    public DateTime? LastLoginAt { get; set; }\n}\n\npublic class RefreshToken\n{\n    [BsonElement(\"token\")]\n    public string Token { get; set; } = string.Empty;\n\n    [BsonElement(\"expires\")]\n    public DateTime Expires { get; set; }\n\n    [BsonElement(\"created\")]\n    public DateTime Created { get; set; } = DateTime.UtcNow;\n\n    [BsonElement(\"createdByIp\")]\n    public string CreatedByIp { get; set; } = string.Empty;\n\n    [BsonElement(\"revoked\")]\n    public DateTime? Revoked { get; set; }\n\n    [BsonElement(\"revokedByIp\")]\n    public string? RevokedByIp { get; set; }\n\n    [BsonElement(\"replacedByToken\")]\n    public string? ReplacedByToken { get; set; }\n\n    public bool IsExpired => DateTime.UtcNow >= Expires;\n    public bool IsRevoked => Revoked != null;\n    public bool IsActive => !IsRevoked && !IsExpired;\n}\n\npublic class UserProfile\n{\n    [BsonElement(\"bio\")]\n    public string? Bio { get; set; }\n\n    [BsonElement(\"location\")]\n    public string? Location { get; set; }\n\n    [BsonElement(\"website\")]\n    public string? Website { get; set; }\n\n    [BsonElement(\"company\")]\n    public string? Company { get; set; }\n\n    [BsonElement(\"skills\")]\n    public List<string> Skills { get; set; } = new();\n\n    [BsonElement(\"preferences\")]\n    public UserPreferences Preferences { get; set; } = new();\n}\n\npublic class UserPreferences\n{\n    [BsonElement(\"theme\")]\n    public string Theme { get; set; } = \"system\"; // light, dark, system\n\n    [BsonElement(\"language\")]\n    public string Language { get; set; } = \"en\";\n\n    [BsonElement(\"notifications\")]\n    public NotificationSettings Notifications { get; set; } = new();\n}\n\npublic class NotificationSettings\n{\n    [BsonElement(\"email\")]\n    public bool Email { get; set; } = true;\n\n    [BsonElement(\"push\")]\n    public bool Push { get; set; } = true;\n\n    [BsonElement(\"contests\")]\n    public bool Contests { get; set; } = true;\n\n    [BsonElement(\"submissions\")]\n    public bool Submissions { get; set; } = true;\n}","size_bytes":4232},"backend/src/Services/DSAGrind.AI.API/obj/Debug/net8.0/DSAGrind.AI.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+88af1a615b7ca441ac2c40e883c8f5e71ffbf754\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1036},"backend/src/Services/DSAGrind.AI.API/obj/Debug/net8.0/DSAGrind.AI.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.AI.API/obj/Debug/net8.0/DSAGrind.AI.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.AI.API/obj/Release/net8.0/DSAGrind.AI.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c20077c3fb02ebf73ea80fd65b00181cd977a9db\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.AI.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1038},"backend/src/Services/DSAGrind.AI.API/obj/Release/net8.0/DSAGrind.AI.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.AI.API/obj/Release/net8.0/DSAGrind.AI.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Admin.API/obj/Debug/net8.0/DSAGrind.Admin.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+930074bd218cd14df3469f7ddc65d9f12bae2a3b\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1045},"backend/src/Services/DSAGrind.Admin.API/obj/Debug/net8.0/DSAGrind.Admin.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Admin.API/obj/Debug/net8.0/DSAGrind.Admin.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":829},"backend/src/Services/DSAGrind.Admin.API/obj/Release/net8.0/DSAGrind.Admin.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Admin.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1047},"backend/src/Services/DSAGrind.Admin.API/obj/Release/net8.0/DSAGrind.Admin.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Admin.API/obj/Release/net8.0/DSAGrind.Admin.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Auth.API/obj/Debug/net8.0/DSAGrind.Auth.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+12ff097a60aea3e75c49b4e7483baa18f5db35eb\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1003},"backend/src/Services/DSAGrind.Auth.API/obj/Debug/net8.0/DSAGrind.Auth.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Auth.API/obj/Debug/net8.0/DSAGrind.Auth.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Auth.API/obj/Release/net8.0/DSAGrind.Auth.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c20077c3fb02ebf73ea80fd65b00181cd977a9db\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Auth.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1044},"backend/src/Services/DSAGrind.Auth.API/obj/Release/net8.0/DSAGrind.Auth.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Auth.API/obj/Release/net8.0/DSAGrind.Auth.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Gateway.API/obj/Debug/net8.0/DSAGrind.Gateway.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+12ff097a60aea3e75c49b4e7483baa18f5db35eb\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1012},"backend/src/Services/DSAGrind.Gateway.API/obj/Debug/net8.0/DSAGrind.Gateway.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Gateway.API/obj/Debug/net8.0/DSAGrind.Gateway.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":680},"backend/src/Services/DSAGrind.Gateway.API/obj/Release/net8.0/DSAGrind.Gateway.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Gateway.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1053},"backend/src/Services/DSAGrind.Gateway.API/obj/Release/net8.0/DSAGrind.Gateway.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Gateway.API/obj/Release/net8.0/DSAGrind.Gateway.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":680},"backend/src/Services/DSAGrind.Payments.API/obj/Debug/net8.0/DSAGrind.Payments.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Payments.API/obj/Release/net8.0/DSAGrind.Payments.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1056},"backend/src/Services/DSAGrind.Payments.API/obj/Release/net8.0/DSAGrind.Payments.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Payments.API/obj/Release/net8.0/DSAGrind.Payments.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Problems.API/obj/Debug/net8.0/DSAGrind.Problems.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+88af1a615b7ca441ac2c40e883c8f5e71ffbf754\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1054},"backend/src/Services/DSAGrind.Problems.API/obj/Debug/net8.0/DSAGrind.Problems.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Problems.API/obj/Debug/net8.0/DSAGrind.Problems.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":829},"backend/src/Services/DSAGrind.Problems.API/obj/Release/net8.0/DSAGrind.Problems.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c20077c3fb02ebf73ea80fd65b00181cd977a9db\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Problems.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1056},"backend/src/Services/DSAGrind.Problems.API/obj/Release/net8.0/DSAGrind.Problems.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Problems.API/obj/Release/net8.0/DSAGrind.Problems.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Search.API/obj/Debug/net8.0/DSAGrind.Search.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Search.API/obj/Release/net8.0/DSAGrind.Search.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1050},"backend/src/Services/DSAGrind.Search.API/obj/Release/net8.0/DSAGrind.Search.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Search.API/obj/Release/net8.0/DSAGrind.Search.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Services/DSAGrind.Submissions.API/obj/Debug/net8.0/DSAGrind.Submissions.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+930074bd218cd14df3469f7ddc65d9f12bae2a3b\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1063},"backend/src/Services/DSAGrind.Submissions.API/obj/Debug/net8.0/DSAGrind.Submissions.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Submissions.API/obj/Debug/net8.0/DSAGrind.Submissions.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":829},"backend/src/Services/DSAGrind.Submissions.API/obj/Release/net8.0/DSAGrind.Submissions.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Submissions.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1065},"backend/src/Services/DSAGrind.Submissions.API/obj/Release/net8.0/DSAGrind.Submissions.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Submissions.API/obj/Release/net8.0/DSAGrind.Submissions.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":790},"backend/src/Shared/DSAGrind.Common/obj/Debug/net8.0/DSAGrind.Common.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+12ff097a60aea3e75c49b4e7483baa18f5db35eb\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":997},"backend/src/Shared/DSAGrind.Common/obj/Debug/net8.0/DSAGrind.Common.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Shared/DSAGrind.Common/obj/Release/net8.0/DSAGrind.Common.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Common\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1038},"backend/src/Shared/DSAGrind.Common/obj/Release/net8.0/DSAGrind.Common.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Shared/DSAGrind.Events/obj/Debug/net8.0/DSAGrind.Events.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+12ff097a60aea3e75c49b4e7483baa18f5db35eb\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":997},"backend/src/Shared/DSAGrind.Events/obj/Debug/net8.0/DSAGrind.Events.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Shared/DSAGrind.Events/obj/Release/net8.0/DSAGrind.Events.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+30247293a2004604e89d1f21b4ebe37cbadf73bd\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Events\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":999},"backend/src/Shared/DSAGrind.Events/obj/Release/net8.0/DSAGrind.Events.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Shared/DSAGrind.Models/obj/Debug/net8.0/DSAGrind.Models.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+12ff097a60aea3e75c49b4e7483baa18f5db35eb\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":997},"backend/src/Shared/DSAGrind.Models/obj/Debug/net8.0/DSAGrind.Models.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Shared/DSAGrind.Models/obj/Release/net8.0/DSAGrind.Models.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+30247293a2004604e89d1f21b4ebe37cbadf73bd\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Models\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":999},"backend/src/Shared/DSAGrind.Models/obj/Release/net8.0/DSAGrind.Models.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":287},"backend/src/Services/DSAGrind.Payments.API/Services/SubscriptionService.cs":{"content":"using DSAGrind.Common.Repositories;\nusing DSAGrind.Models.Entities;\nusing DSAGrind.Models.DTOs;\nusing DSAGrind.Common.Services;\nusing DSAGrind.Models.Settings;\nusing AutoMapper;\nusing Microsoft.Extensions.Options;\nusing Stripe;\n\nnamespace DSAGrind.Payments.API.Services;\n\npublic class SubscriptionService : ISubscriptionService\n{\n    private readonly IMongoRepository<DSAGrind.Models.Entities.Subscription> _subscriptionRepository;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IMapper _mapper;\n    private readonly ILogger<SubscriptionService> _logger;\n    private readonly PaymentSettings _paymentSettings;\n    private readonly Stripe.SubscriptionService? _stripeSubscriptionService;\n    private readonly PriceService? _stripePriceService;\n\n    public SubscriptionService(\n        IMongoRepository<DSAGrind.Models.Entities.Subscription> subscriptionRepository,\n        IEventPublisher eventPublisher,\n        IMapper mapper,\n        ILogger<SubscriptionService> logger,\n        IOptions<PaymentSettings> paymentSettings)\n    {\n        _subscriptionRepository = subscriptionRepository;\n        _eventPublisher = eventPublisher;\n        _mapper = mapper;\n        _logger = logger;\n        _paymentSettings = paymentSettings.Value;\n        \n        if (_paymentSettings.EnableStripeIntegration)\n        {\n            _stripeSubscriptionService = new Stripe.SubscriptionService();\n            _stripePriceService = new PriceService();\n        }\n        else\n        {\n            _stripeSubscriptionService = null;\n            _stripePriceService = null;\n        }\n    }\n\n    public async Task<SubscriptionDto> CreateSubscriptionAsync(CreateSubscriptionRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            if (_paymentSettings.UseMockData || !_paymentSettings.EnableStripeIntegration)\n            {\n                // Mock subscription creation\n                _logger.LogInformation(\"Creating mock subscription for user {UserId} with plan {PlanId}\", userId, request.PlanId);\n                \n                await Task.Delay(100, cancellationToken); // Simulate API delay\n\n                var subscription = new SubscriptionDto\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    UserId = userId,\n                    PlanId = request.PlanId,\n                    Status = \"active\",\n                    CurrentPeriodStart = DateTime.UtcNow,\n                    CurrentPeriodEnd = DateTime.UtcNow.AddMonths(1),\n                    CancelAtPeriodEnd = false,\n                    StripeSubscriptionId = \"sub_mock_\" + Guid.NewGuid().ToString()[..8],\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _eventPublisher.PublishAsync(\"subscription.created\", new { SubscriptionId = subscription.Id, UserId = userId }, cancellationToken);\n                return subscription;\n            }\n            else\n            {\n                // Real Stripe integration\n                _logger.LogInformation(\"Creating real Stripe subscription for user {UserId} with plan {PlanId}\", userId, request.PlanId);\n                \n                var options = new SubscriptionCreateOptions\n                {\n                    Customer = userId, // In production, this should be the Stripe customer ID\n                    Items = new List<SubscriptionItemOptions>\n                    {\n                        new() { Price = request.PlanId }\n                    },\n                    DefaultPaymentMethod = request.PaymentMethodId,\n                    Expand = new List<string> { \"latest_invoice.payment_intent\" }\n                };\n\n                var stripeSubscription = await _stripeSubscriptionService!.CreateAsync(options, cancellationToken: cancellationToken);\n\n                var subscription = new SubscriptionDto\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    UserId = userId,\n                    PlanId = request.PlanId,\n                    Status = stripeSubscription.Status,\n                    CurrentPeriodStart = stripeSubscription.CurrentPeriodStart,\n                    CurrentPeriodEnd = stripeSubscription.CurrentPeriodEnd,\n                    CancelAtPeriodEnd = stripeSubscription.CancelAtPeriodEnd,\n                    StripeSubscriptionId = stripeSubscription.Id,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _eventPublisher.PublishAsync(\"subscription.created\", new { SubscriptionId = subscription.Id, UserId = userId }, cancellationToken);\n                return subscription;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating subscription for user {UserId}\", userId);\n            throw;\n        }\n    }\n\n    public async Task<SubscriptionDto?> GetUserSubscriptionAsync(string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            if (_paymentSettings.UseMockData || !_paymentSettings.EnableStripeIntegration)\n            {\n                // Mock implementation\n                _logger.LogInformation(\"Getting mock subscription for user {UserId}\", userId);\n                \n                await Task.Delay(50, cancellationToken);\n                \n                return new SubscriptionDto\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    UserId = userId,\n                    PlanId = \"price_premium_monthly\",\n                    Status = \"active\",\n                    CurrentPeriodStart = DateTime.UtcNow.AddDays(-15),\n                    CurrentPeriodEnd = DateTime.UtcNow.AddDays(15),\n                    CancelAtPeriodEnd = false,\n                    StripeSubscriptionId = \"sub_mock_\" + Guid.NewGuid().ToString()[..8],\n                    CreatedAt = DateTime.UtcNow.AddDays(-15)\n                };\n            }\n            else\n            {\n                // Real database query for production\n                var subscription = await _subscriptionRepository.GetAsync(s => s.UserId == userId, cancellationToken);\n                return subscription != null ? _mapper.Map<SubscriptionDto>(subscription) : null;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting subscription for user {UserId}\", userId);\n            throw;\n        }\n    }\n\n    public async Task<bool> CancelSubscriptionAsync(string subscriptionId, string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            if (_paymentSettings.UseMockData || !_paymentSettings.EnableStripeIntegration)\n            {\n                // Mock subscription cancellation\n                _logger.LogInformation(\"Cancelling mock subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n                await Task.Delay(100, cancellationToken);\n            }\n            else\n            {\n                // Real Stripe cancellation\n                _logger.LogInformation(\"Cancelling Stripe subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n                var options = new SubscriptionUpdateOptions { CancelAtPeriodEnd = true };\n                await _stripeSubscriptionService!.UpdateAsync(subscriptionId, options, cancellationToken: cancellationToken);\n            }\n\n            await _eventPublisher.PublishAsync(\"subscription.cancelled\", new { SubscriptionId = subscriptionId, UserId = userId }, cancellationToken);\n            return true;\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error cancelling subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n            return false;\n        }\n    }\n\n    public async Task<SubscriptionDto> UpdateSubscriptionAsync(string subscriptionId, UpdateSubscriptionRequestDto request, string userId, CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            if (_paymentSettings.UseMockData || !_paymentSettings.EnableStripeIntegration)\n            {\n                // Mock subscription update\n                _logger.LogInformation(\"Updating mock subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n                await Task.Delay(100, cancellationToken);\n\n                var subscription = new SubscriptionDto\n                {\n                    Id = subscriptionId,\n                    UserId = userId,\n                    PlanId = request.PlanId ?? \"price_premium_monthly\",\n                    Status = \"active\",\n                    CurrentPeriodStart = DateTime.UtcNow.AddDays(-15),\n                    CurrentPeriodEnd = DateTime.UtcNow.AddDays(15),\n                    CancelAtPeriodEnd = request.CancelAtPeriodEnd ?? false,\n                    StripeSubscriptionId = \"sub_mock_\" + Guid.NewGuid().ToString()[..8],\n                    CreatedAt = DateTime.UtcNow.AddDays(-15)\n                };\n\n                await _eventPublisher.PublishAsync(\"subscription.updated\", new { SubscriptionId = subscriptionId, UserId = userId }, cancellationToken);\n                return subscription;\n            }\n            else\n            {\n                // Real Stripe update\n                _logger.LogInformation(\"Updating Stripe subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n                \n                var options = new SubscriptionUpdateOptions();\n                if (!string.IsNullOrEmpty(request.PlanId))\n                {\n                    options.Items = new List<SubscriptionItemOptions>\n                    {\n                        new() { Price = request.PlanId }\n                    };\n                }\n                if (request.CancelAtPeriodEnd.HasValue)\n                {\n                    options.CancelAtPeriodEnd = request.CancelAtPeriodEnd.Value;\n                }\n\n                var stripeSubscription = await _stripeSubscriptionService!.UpdateAsync(subscriptionId, options, cancellationToken: cancellationToken);\n\n                var subscription = new SubscriptionDto\n                {\n                    Id = subscriptionId,\n                    UserId = userId,\n                    PlanId = request.PlanId ?? stripeSubscription.Items.Data.First().Price.Id,\n                    Status = stripeSubscription.Status,\n                    CurrentPeriodStart = stripeSubscription.CurrentPeriodStart,\n                    CurrentPeriodEnd = stripeSubscription.CurrentPeriodEnd,\n                    CancelAtPeriodEnd = stripeSubscription.CancelAtPeriodEnd,\n                    StripeSubscriptionId = stripeSubscription.Id,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _eventPublisher.PublishAsync(\"subscription.updated\", new { SubscriptionId = subscriptionId, UserId = userId }, cancellationToken);\n                return subscription;\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error updating subscription {SubscriptionId} for user {UserId}\", subscriptionId, userId);\n            throw;\n        }\n    }\n\n    public async Task<List<SubscriptionPlanDto>> GetSubscriptionPlansAsync(CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            if (_paymentSettings.UseMockData || !_paymentSettings.EnableStripeIntegration)\n            {\n                // Mock implementation\n                _logger.LogInformation(\"Getting mock subscription plans\");\n                await Task.Delay(50, cancellationToken);\n            }\n            else\n            {\n                // Real Stripe plans could be fetched here in production\n                _logger.LogInformation(\"Getting subscription plans from configuration\");\n            }\n            \n            // Return predefined plans (in production, these could come from Stripe or database)\n            return new List<SubscriptionPlanDto>\n            {\n                new()\n                {\n                    Id = \"price_basic_monthly\",\n                    Name = \"Basic\",\n                    Description = \"Essential features for coding practice\",\n                    Price = 9.99m,\n                    Currency = \"usd\",\n                    Interval = \"monthly\",\n                    Features = new List<string>\n                    {\n                        \"Access to all problems\",\n                        \"Basic AI hints\",\n                        \"Progress tracking\"\n                    },\n                    IsPopular = false,\n                    StripePriceId = \"price_basic_monthly\"\n                },\n                new()\n                {\n                    Id = \"price_premium_monthly\",\n                    Name = \"Premium\",\n                    Description = \"Advanced features for serious developers\",\n                    Price = 19.99m,\n                    Currency = \"usd\",\n                    Interval = \"monthly\",\n                    Features = new List<string>\n                    {\n                        \"Everything in Basic\",\n                        \"Advanced AI assistance\",\n                        \"Code review\",\n                        \"Interview prep\",\n                        \"Priority support\"\n                    },\n                    IsPopular = true,\n                    StripePriceId = \"price_premium_monthly\"\n                },\n                new()\n                {\n                    Id = \"price_premium_yearly\",\n                    Name = \"Premium Yearly\",\n                    Description = \"Premium features with yearly savings\",\n                    Price = 199.99m,\n                    Currency = \"usd\",\n                    Interval = \"yearly\",\n                    Features = new List<string>\n                    {\n                        \"Everything in Premium\",\n                        \"2 months free\",\n                        \"Exclusive content\",\n                        \"Personal mentor sessions\"\n                    },\n                    IsPopular = false,\n                    StripePriceId = \"price_premium_yearly\"\n                }\n            };\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error getting subscription plans\");\n            throw;\n        }\n    }\n}","size_bytes":14259},"backend/src/Services/DSAGrind.Payments.API/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs":{"content":"// <autogenerated />\r\nusing System;\r\nusing System.Reflection;\r\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETCoreApp,Version=v8.0\", FrameworkDisplayName = \".NET 8.0\")]\n","size_bytes":197},"backend/src/Services/DSAGrind.Payments.API/obj/Debug/net8.0/DSAGrind.Payments.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+930074bd218cd14df3469f7ddc65d9f12bae2a3b\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Payments.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1054},"backend/src/Services/DSAGrind.Payments.API/obj/Debug/net8.0/DSAGrind.Payments.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":829},"backend/src/Services/DSAGrind.Search.API/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs":{"content":"// <autogenerated />\r\nusing System;\r\nusing System.Reflection;\r\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETCoreApp,Version=v8.0\", FrameworkDisplayName = \".NET 8.0\")]\n","size_bytes":197},"backend/src/Services/DSAGrind.Search.API/obj/Debug/net8.0/DSAGrind.Search.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+930074bd218cd14df3469f7ddc65d9f12bae2a3b\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Search.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1048},"backend/src/Services/DSAGrind.Search.API/obj/Debug/net8.0/DSAGrind.Search.API.MvcApplicationPartsAssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"FluentValidation.AspNetCore\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Microsoft.AspNetCore.OpenApi\")]\n[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute(\"Swashbuckle.AspNetCore.SwaggerGen\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":829},"backend/src/Shared/DSAGrind.Models/DTOs/PaymentDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\n// Payment DTOs\npublic class CreatePaymentIntentRequestDto\n{\n    [Required]\n    [Range(0.01, double.MaxValue, ErrorMessage = \"Amount must be greater than 0\")]\n    public decimal Amount { get; set; }\n    \n    public string Currency { get; set; } = \"usd\";\n    public string Description { get; set; } = string.Empty;\n    public Dictionary<string, string> Metadata { get; set; } = new();\n}\n\npublic class CreatePaymentRequestDto\n{\n    [Required]\n    [Range(0.01, double.MaxValue, ErrorMessage = \"Amount must be greater than 0\")]\n    public decimal Amount { get; set; }\n    \n    public string Currency { get; set; } = \"usd\";\n    public string Description { get; set; } = string.Empty;\n    public Dictionary<string, string> Metadata { get; set; } = new();\n}\n\npublic class ConfirmPaymentRequestDto\n{\n    [Required]\n    public string PaymentIntentId { get; set; } = string.Empty;\n    \n    public string? PaymentMethodId { get; set; }\n    public bool SavePaymentMethod { get; set; } = false;\n}\n\npublic class PaymentIntentDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string ClientSecret { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class PaymentResultDto\n{\n    public string PaymentId { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public bool Success { get; set; }\n    public string? ErrorMessage { get; set; }\n    public DateTime ProcessedAt { get; set; }\n}\n\npublic class PaymentDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public string StripePaymentId { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n    public RefundDetailsDto? RefundDetails { get; set; }\n}\n\npublic class RefundDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string PaymentId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Reason { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class RefundDetailsDto\n{\n    public string RefundId { get; set; } = string.Empty;\n    public decimal Amount { get; set; }\n    public string Reason { get; set; } = string.Empty;\n    public DateTime RefundedAt { get; set; }\n}\n\n// Subscription DTOs\npublic class CreateSubscriptionRequestDto\n{\n    [Required]\n    public string PlanId { get; set; } = string.Empty;\n    \n    [Required]\n    public string PaymentMethodId { get; set; } = string.Empty;\n}\n\npublic class UpdateSubscriptionRequestDto\n{\n    public string? PlanId { get; set; }\n    public bool? CancelAtPeriodEnd { get; set; }\n}\n\npublic class SubscriptionDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string PlanId { get; set; } = string.Empty;\n    public string Status { get; set; } = string.Empty;\n    public DateTime CurrentPeriodStart { get; set; }\n    public DateTime CurrentPeriodEnd { get; set; }\n    public bool CancelAtPeriodEnd { get; set; }\n    public string StripeSubscriptionId { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n    public SubscriptionPlanDto? Plan { get; set; }\n}\n\npublic class SubscriptionPlanDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public decimal Price { get; set; }\n    public string Currency { get; set; } = string.Empty;\n    public string Interval { get; set; } = string.Empty; // monthly, yearly\n    public List<string> Features { get; set; } = new();\n    public bool IsPopular { get; set; }\n    public string StripePriceId { get; set; } = string.Empty;\n}\n\n// Admin DTOs (extending Auth DTOs)\npublic class AdminDashboardDto\n{\n    public int TotalUsers { get; set; }\n    public int ActiveUsers { get; set; }\n    public int TotalProblems { get; set; }\n    public int PendingProblems { get; set; }\n    public int TotalSubmissions { get; set; }\n    public int TodaySubmissions { get; set; }\n    public decimal Revenue { get; set; }\n    public int PremiumUsers { get; set; }\n    public List<DashboardChartDto> SubmissionsChart { get; set; } = new();\n    public List<DashboardChartDto> UsersChart { get; set; } = new();\n}\n\npublic class DashboardChartDto\n{\n    public string Label { get; set; } = string.Empty;\n    public int Value { get; set; }\n}\n\npublic class AdminNotificationDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string Title { get; set; } = string.Empty;\n    public string Message { get; set; } = string.Empty;\n    public string Type { get; set; } = string.Empty; // info, warning, error, success\n    public bool IsRead { get; set; }\n    public DateTime CreatedAt { get; set; }\n}\n\npublic class SystemHealthDto\n{\n    public bool IsHealthy { get; set; }\n    public List<ServiceHealthDto> Services { get; set; } = new();\n    public DatabaseHealthDto Database { get; set; } = new();\n    public ExternalServiceHealthDto ExternalServices { get; set; } = new();\n}\n\npublic class ServiceHealthDto\n{\n    public string Name { get; set; } = string.Empty;\n    public bool IsHealthy { get; set; }\n    public string Status { get; set; } = string.Empty;\n    public double ResponseTime { get; set; }\n    public DateTime LastCheck { get; set; }\n}\n\npublic class DatabaseHealthDto\n{\n    public bool IsHealthy { get; set; }\n    public double ResponseTime { get; set; }\n    public int ConnectionCount { get; set; }\n}\n\npublic class ExternalServiceHealthDto\n{\n    public bool StripeHealthy { get; set; }\n    public bool RedisHealthy { get; set; }\n    public bool KafkaHealthy { get; set; }\n    public bool QdrantHealthy { get; set; }\n}\n\npublic class AdminAuditLogDto\n{\n    public string Id { get; set; } = string.Empty;\n    public string UserId { get; set; } = string.Empty;\n    public string Action { get; set; } = string.Empty;\n    public string Resource { get; set; } = string.Empty;\n    public string Details { get; set; } = string.Empty;\n    public DateTime Timestamp { get; set; }\n}","size_bytes":6648},"backend/src/Services/DSAGrind.Payments.API/Services/ISubscriptionService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Payments.API.Services;\n\npublic interface ISubscriptionService\n{\n    Task<SubscriptionDto> CreateSubscriptionAsync(CreateSubscriptionRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<SubscriptionDto?> GetUserSubscriptionAsync(string userId, CancellationToken cancellationToken = default);\n    Task<bool> CancelSubscriptionAsync(string subscriptionId, string userId, CancellationToken cancellationToken = default);\n    Task<SubscriptionDto> UpdateSubscriptionAsync(string subscriptionId, UpdateSubscriptionRequestDto request, string userId, CancellationToken cancellationToken = default);\n    Task<List<SubscriptionPlanDto>> GetSubscriptionPlansAsync(CancellationToken cancellationToken = default);\n}","size_bytes":788},"backend/src/Services/DSAGrind.Search.API/Services/IVectorSearchService.cs":{"content":"using DSAGrind.Models.DTOs;\n\nnamespace DSAGrind.Search.API.Services;\n\npublic interface IVectorSearchService\n{\n    Task<List<ProblemDto>> SearchProblemsAsync(string query, int limit, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetSimilarProblemsAsync(string problemId, int count, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> GetPersonalizedRecommendationsAsync(string userId, int count, CancellationToken cancellationToken = default);\n    Task<List<ProblemDto>> SearchByTagsAsync(List<string> tags, int count, CancellationToken cancellationToken = default);\n    Task IndexProblemAsync(string problemId, CancellationToken cancellationToken = default);\n    Task UpdateProblemIndexAsync(string problemId, CancellationToken cancellationToken = default);\n    Task DeleteProblemIndexAsync(string problemId, CancellationToken cancellationToken = default);\n}","size_bytes":910},"backend/src/Shared/DSAGrind.Models/DTOs/AdminDTOs.cs":{"content":"using System.ComponentModel.DataAnnotations;\n\nnamespace DSAGrind.Models.DTOs;\n\n// Request DTOs for Admin Controller\npublic class BanUserRequestDto\n{\n    [Required]\n    public string Reason { get; set; } = string.Empty;\n}\n\npublic class RejectProblemRequestDto\n{\n    [Required]\n    public string Reason { get; set; } = string.Empty;\n}","size_bytes":332},"backend/src/Shared/DSAGrind.Models/Settings/PaymentSettings.cs":{"content":"namespace DSAGrind.Models.Settings;\n\npublic class PaymentSettings\n{\n    public const string SectionName = \"PaymentSettings\";\n    \n    public bool UseMockData { get; set; } = true;\n    public bool EnableStripeIntegration { get; set; } = false;\n    public bool EnableWebhooks { get; set; } = false;\n}","size_bytes":298},"backend/src/Services/DSAGrind.MCP.API/obj/Debug/net8.0/DSAGrind.MCP.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1039},"backend/src/Services/DSAGrind.MCP.API/obj/Debug/net8.0/DSAGrind.MCP.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.MCP.API/obj/Release/net8.0/DSAGrind.MCP.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.MCP.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1041},"backend/src/Services/DSAGrind.MCP.API/obj/Release/net8.0/DSAGrind.MCP.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Unified.API/obj/Debug/net8.0/DSAGrind.Unified.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1051},"backend/src/Services/DSAGrind.Unified.API/obj/Debug/net8.0/DSAGrind.Unified.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"backend/src/Services/DSAGrind.Unified.API/obj/Release/net8.0/DSAGrind.Unified.API.AssemblyInfo.cs":{"content":"//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nusing System;\nusing System.Reflection;\n\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Release\")]\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+c05e1f93abc341acaf3829a3ddddad65544adb43\")]\n[assembly: System.Reflection.AssemblyProductAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyTitleAttribute(\"DSAGrind.Unified.API\")]\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\n\n// Generated by the MSBuild WriteCodeFragment class.\n\n","size_bytes":1053},"backend/src/Services/DSAGrind.Unified.API/obj/Release/net8.0/DSAGrind.Unified.API.GlobalUsings.g.cs":{"content":"// <auto-generated/>\nglobal using global::Microsoft.AspNetCore.Builder;\nglobal using global::Microsoft.AspNetCore.Hosting;\nglobal using global::Microsoft.AspNetCore.Http;\nglobal using global::Microsoft.AspNetCore.Routing;\nglobal using global::Microsoft.Extensions.Configuration;\nglobal using global::Microsoft.Extensions.DependencyInjection;\nglobal using global::Microsoft.Extensions.Hosting;\nglobal using global::Microsoft.Extensions.Logging;\nglobal using global::System;\nglobal using global::System.Collections.Generic;\nglobal using global::System.IO;\nglobal using global::System.Linq;\nglobal using global::System.Net.Http;\nglobal using global::System.Net.Http.Json;\nglobal using global::System.Threading;\nglobal using global::System.Threading.Tasks;\n","size_bytes":753},"API_DESIGN.md":{"content":"# DSAGrind Platform - API Design Documentation\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: Comprehensive RESTful API Design\n- **API Style**: REST with GraphQL considerations for complex queries\n\n---\n\n## 🎯 API Architecture Overview\n\n### API Design Principles\n1. **RESTful Design**: Standard HTTP methods and status codes\n2. **Resource-Oriented**: Clear resource hierarchies and relationships\n3. **Stateless**: Each request contains all necessary information\n4. **Versioned**: API versioning for backward compatibility\n5. **Consistent**: Uniform response formats and error handling\n6. **Secure**: Authentication, authorization, and rate limiting\n7. **Developer-Friendly**: Comprehensive documentation and examples\n\n### API Gateway Architecture\n```\nAPI Request Flow:\nClient Request → API Gateway (Port 5000) → Authentication → Rate Limiting → Service Routing → Microservice\n```\n\n---\n\n## 🔗 API Versioning Strategy\n\n### URL-Based Versioning\n```\nBase URL Structure:\n├── https://api.dsagrind.com/v1/auth/*\n├── https://api.dsagrind.com/v1/problems/*\n├── https://api.dsagrind.com/v1/submissions/*\n├── https://api.dsagrind.com/v1/payments/*\n├── https://api.dsagrind.com/v1/users/*\n├── https://api.dsagrind.com/v1/contests/*\n├── https://api.dsagrind.com/v1/search/*\n└── https://api.dsagrind.com/v1/admin/*\n```\n\n### Version Compatibility Matrix\n```\nAPI Version Support:\n├── v1 (Current): Full support, all features\n├── v0 (Legacy): Deprecated, security updates only\n└── v2 (Future): Beta features, limited availability\n```\n\n---\n\n## 🔐 Authentication & Authorization API\n\n### Base URL: `/v1/auth`\n\n#### POST /v1/auth/register\n**Register a new user account**\n\n```http\nPOST /v1/auth/register\nContent-Type: application/json\nX-API-Version: 1.0\nX-Client-Version: 1.2.3\n\n{\n  \"email\": \"user@example.com\",\n  \"username\": \"codingmaster\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"country\": \"US\",\n  \"agreeToTerms\": true,\n  \"marketingOptIn\": false\n}\n```\n\n**Success Response (201 Created):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"user\": {\n      \"id\": \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n      \"email\": \"user@example.com\",\n      \"username\": \"codingmaster\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"role\": \"User\",\n      \"subscription\": {\n        \"type\": \"Free\",\n        \"expiresAt\": null,\n        \"features\": [\"basic_problems\", \"community_access\"]\n      },\n      \"profile\": {\n        \"avatar\": \"https://dsagrind-assets.s3.amazonaws.com/avatars/default.png\",\n        \"createdAt\": \"2024-01-20T10:30:00Z\",\n        \"isEmailVerified\": false\n      }\n    },\n    \"tokens\": {\n      \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n      \"refreshToken\": \"rt_9X8Y7Z6W5V4U3T2S1R0Q\",\n      \"expiresAt\": \"2024-01-20T11:30:00Z\",\n      \"tokenType\": \"Bearer\"\n    }\n  },\n  \"meta\": {\n    \"requestId\": \"req_abc123def456\",\n    \"timestamp\": \"2024-01-20T10:30:00Z\",\n    \"processingTime\": \"245ms\"\n  }\n}\n```\n\n**Error Response (400 Bad Request):**\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input data provided\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"code\": \"INVALID_EMAIL\",\n        \"message\": \"Please provide a valid email address\"\n      },\n      {\n        \"field\": \"password\",\n        \"code\": \"WEAK_PASSWORD\", \n        \"message\": \"Password must contain at least 8 characters with uppercase, lowercase, number, and special character\"\n      }\n    ]\n  },\n  \"meta\": {\n    \"requestId\": \"req_abc123def456\",\n    \"timestamp\": \"2024-01-20T10:30:00Z\"\n  }\n}\n```\n\n#### POST /v1/auth/login\n**Authenticate user and obtain access tokens**\n\n```http\nPOST /v1/auth/login\nContent-Type: application/json\n\n{\n  \"emailOrUsername\": \"user@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"rememberMe\": true,\n  \"deviceInfo\": {\n    \"platform\": \"web\",\n    \"userAgent\": \"Mozilla/5.0...\",\n    \"ipAddress\": \"192.168.1.100\"\n  }\n}\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"user\": { /* User object */ },\n    \"tokens\": { /* Token object */ },\n    \"session\": {\n      \"sessionId\": \"sess_xyz789\",\n      \"expiresAt\": \"2024-01-21T10:30:00Z\",\n      \"isNewDevice\": false,\n      \"location\": \"San Francisco, CA\"\n    }\n  }\n}\n```\n\n#### POST /v1/auth/refresh\n**Refresh access token using refresh token**\n\n```http\nPOST /v1/auth/refresh\nContent-Type: application/json\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\n{\n  \"refreshToken\": \"rt_9X8Y7Z6W5V4U3T2S1R0Q\"\n}\n```\n\n#### POST /v1/auth/logout\n**Logout user and invalidate tokens**\n\n```http\nPOST /v1/auth/logout\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\n{\n  \"logoutAllDevices\": false\n}\n```\n\n#### GET /v1/auth/me\n**Get current user profile**\n\n```http\nGET /v1/auth/me\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n    \"email\": \"user@example.com\",\n    \"username\": \"codingmaster\",\n    \"profile\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"displayName\": \"John Doe\",\n      \"avatar\": \"https://dsagrind-assets.s3.amazonaws.com/avatars/usr_123.jpg\",\n      \"bio\": \"Passionate coder and problem solver\",\n      \"location\": \"San Francisco, CA\",\n      \"website\": \"https://johndoe.dev\",\n      \"socialLinks\": {\n        \"github\": \"https://github.com/johndoe\",\n        \"linkedin\": \"https://linkedin.com/in/johndoe\"\n      }\n    },\n    \"statistics\": {\n      \"totalSubmissions\": 287,\n      \"acceptedSubmissions\": 189,\n      \"acceptanceRate\": 65.85,\n      \"problemsSolved\": {\n        \"easy\": 45,\n        \"medium\": 78,\n        \"hard\": 23,\n        \"total\": 146\n      },\n      \"currentStreak\": 12,\n      \"longestStreak\": 34,\n      \"ranking\": {\n        \"global\": 1567,\n        \"country\": 123\n      }\n    },\n    \"subscription\": {\n      \"type\": \"Premium\",\n      \"status\": \"active\",\n      \"expiresAt\": \"2024-12-31T23:59:59Z\",\n      \"autoRenew\": true,\n      \"features\": [\"premium_problems\", \"ai_hints\", \"detailed_analytics\"]\n    },\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en\",\n      \"notifications\": {\n        \"email\": true,\n        \"push\": false\n      }\n    }\n  }\n}\n```\n\n#### PUT /v1/auth/me\n**Update current user profile**\n\n```http\nPUT /v1/auth/me\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"profile\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"bio\": \"Updated bio text\",\n    \"location\": \"New York, NY\",\n    \"website\": \"https://johnsmith.dev\"\n  },\n  \"preferences\": {\n    \"theme\": \"light\",\n    \"notifications\": {\n      \"email\": false,\n      \"push\": true\n    }\n  }\n}\n```\n\n---\n\n## 📚 Problems API\n\n### Base URL: `/v1/problems`\n\n#### GET /v1/problems\n**Retrieve paginated list of problems with filtering and sorting**\n\n```http\nGET /v1/problems?page=1&limit=20&difficulty=Medium&tags=array,hash-table&search=two%20sum&sort=acceptance_rate&order=desc&premium=false\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Query Parameters:**\n```\nPagination:\n├── page: Page number (default: 1)\n├── limit: Items per page (default: 20, max: 100)\n\nFiltering:\n├── difficulty: Easy|Medium|Hard\n├── tags: Comma-separated list of tags\n├── search: Search term for title/description\n├── premium: true|false (include premium problems)\n├── status: not_attempted|attempted|completed\n├── companies: Comma-separated company tags\n\nSorting:\n├── sort: title|difficulty|acceptance_rate|created_at|updated_at\n└── order: asc|desc (default: desc)\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"problems\": [\n      {\n        \"id\": \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n        \"title\": \"Two Sum\",\n        \"slug\": \"two-sum\",\n        \"difficulty\": \"Easy\",\n        \"difficultyScore\": 1200,\n        \"tags\": [\n          { \"name\": \"array\", \"category\": \"data-structure\" },\n          { \"name\": \"hash-table\", \"category\": \"data-structure\" }\n        ],\n        \"statistics\": {\n          \"totalSubmissions\": 15847,\n          \"acceptedSubmissions\": 8956,\n          \"acceptanceRate\": 56.52\n        },\n        \"isPremium\": false,\n        \"userProgress\": {\n          \"status\": \"not_attempted\", // not_attempted, attempted, completed\n          \"lastAttempt\": null,\n          \"bestSubmission\": null\n        },\n        \"estimatedTime\": \"15-30 minutes\",\n        \"companies\": [\"Google\", \"Amazon\", \"Apple\"],\n        \"createdAt\": \"2023-08-15T10:00:00Z\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 45,\n      \"totalItems\": 892,\n      \"itemsPerPage\": 20,\n      \"hasNextPage\": true,\n      \"hasPreviousPage\": false\n    },\n    \"filters\": {\n      \"appliedFilters\": {\n        \"difficulty\": \"Medium\",\n        \"tags\": [\"array\", \"hash-table\"],\n        \"premium\": false\n      },\n      \"availableFilters\": {\n        \"difficulties\": [\"Easy\", \"Medium\", \"Hard\"],\n        \"tags\": [\"array\", \"hash-table\", \"dynamic-programming\", \"...\"],\n        \"companies\": [\"Google\", \"Amazon\", \"Microsoft\", \"...\"]\n      }\n    }\n  },\n  \"meta\": {\n    \"requestId\": \"req_problems_list_123\",\n    \"timestamp\": \"2024-01-20T10:30:00Z\",\n    \"processingTime\": \"45ms\",\n    \"cacheHit\": true,\n    \"cacheExpiry\": \"2024-01-20T10:45:00Z\"\n  }\n}\n```\n\n#### GET /v1/problems/{problemId}\n**Get detailed problem information**\n\n```http\nGET /v1/problems/prob_8M9N0O1P2Q3R4S5T6U7V\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n    \"title\": \"Two Sum\",\n    \"slug\": \"two-sum\",\n    \"description\": {\n      \"statement\": \"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to target...\",\n      \"inputFormat\": \"The first line contains an integer n, the size of the array...\",\n      \"outputFormat\": \"Return an array of two integers representing the indices...\",\n      \"constraints\": [\n        \"2 ≤ nums.length ≤ 10^4\",\n        \"-10^9 ≤ nums[i] ≤ 10^9\",\n        \"-10^9 ≤ target ≤ 10^9\"\n      ]\n    },\n    \"difficulty\": \"Easy\",\n    \"difficultyScore\": 1200,\n    \"tags\": [\n      { \"name\": \"array\", \"category\": \"data-structure\" },\n      { \"name\": \"hash-table\", \"category\": \"data-structure\" }\n    ],\n    \"examples\": [\n      {\n        \"input\": \"nums = [2,7,11,15], target = 9\",\n        \"output\": \"[0,1]\",\n        \"explanation\": \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n      }\n    ],\n    \"hints\": [\n      {\n        \"level\": 1,\n        \"content\": \"A really brute force way would be to search for all possible pairs...\",\n        \"isPremium\": false\n      },\n      {\n        \"level\": 2, \n        \"content\": \"Try using a hash map to improve the time complexity...\",\n        \"isPremium\": true\n      }\n    ],\n    \"starterCode\": {\n      \"csharp\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        \\n    }\\n}\",\n      \"python\": \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \",\n      \"java\": \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"\n    },\n    \"supportedLanguages\": [\"csharp\", \"python\", \"java\", \"cpp\", \"javascript\"],\n    \"statistics\": {\n      \"totalSubmissions\": 15847,\n      \"acceptedSubmissions\": 8956,\n      \"acceptanceRate\": 56.52,\n      \"averageRuntime\": 85,\n      \"languageStats\": {\n        \"csharp\": { \"submissions\": 4521, \"accepted\": 2789, \"acceptanceRate\": 61.70 },\n        \"python\": { \"submissions\": 5890, \"accepted\": 3245, \"acceptanceRate\": 55.11 }\n      }\n    },\n    \"userProgress\": {\n      \"status\": \"attempted\",\n      \"attempts\": 3,\n      \"lastAttempt\": \"2024-01-19T15:30:00Z\",\n      \"bestSubmission\": {\n        \"id\": \"sub_best_attempt_123\",\n        \"status\": \"WrongAnswer\",\n        \"runtime\": 95,\n        \"memory\": 42.3,\n        \"submittedAt\": \"2024-01-19T15:30:00Z\"\n      },\n      \"timeSpent\": 2847 // seconds\n    },\n    \"relatedProblems\": [\n      {\n        \"id\": \"prob_3sum_challenge\",\n        \"title\": \"3Sum\",\n        \"difficulty\": \"Medium\",\n        \"similarity\": 0.85\n      }\n    ],\n    \"editorial\": {\n      \"available\": true,\n      \"isPremium\": true,\n      \"preview\": \"This problem can be solved using multiple approaches...\"\n    },\n    \"discussionCount\": 1247,\n    \"isPremium\": false,\n    \"estimatedTime\": \"15-30 minutes\",\n    \"companies\": [\"Google\", \"Amazon\", \"Apple\"],\n    \"createdAt\": \"2023-08-15T10:00:00Z\",\n    \"updatedAt\": \"2024-01-18T14:22:00Z\"\n  }\n}\n```\n\n#### GET /v1/problems/{problemId}/editorial\n**Get problem editorial (Premium feature)**\n\n```http\nGET /v1/problems/prob_8M9N0O1P2Q3R4S5T6U7V/editorial\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### GET /v1/problems/{problemId}/solutions\n**Get community solutions**\n\n```http\nGET /v1/problems/prob_8M9N0O1P2Q3R4S5T6U7V/solutions?language=csharp&sort=votes&page=1&limit=10\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### GET /v1/problems/{problemId}/submissions\n**Get user's submissions for a specific problem**\n\n```http\nGET /v1/problems/prob_8M9N0O1P2Q3R4S5T6U7V/submissions?page=1&limit=10\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n---\n\n## 💻 Submissions API\n\n### Base URL: `/v1/submissions`\n\n#### POST /v1/submissions\n**Submit code solution for a problem**\n\n```http\nPOST /v1/submissions\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"problemId\": \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n  \"language\": \"csharp\",\n  \"code\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        Dictionary<int, int> map = new Dictionary<int, int>();\\n        \\n        for (int i = 0; i < nums.Length; i++) {\\n            int complement = target - nums[i];\\n            if (map.ContainsKey(complement)) {\\n                return new int[] { map[complement], i };\\n            }\\n            map[nums[i]] = i;\\n        }\\n        \\n        return new int[] { };\\n    }\\n}\",\n  \"contestId\": null, // Optional: if submitted during contest\n  \"isPrivate\": false,\n  \"metadata\": {\n    \"editorSettings\": {\n      \"theme\": \"vs-dark\",\n      \"fontSize\": 14\n    },\n    \"codingTime\": 1847000, // milliseconds\n    \"keystrokes\": 547\n  }\n}\n```\n\n**Success Response (202 Accepted):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"submissionId\": \"sub_5K6L7M8N9O0P1Q2R3S4T\",\n    \"status\": \"pending\",\n    \"estimatedProcessingTime\": \"3-8 seconds\",\n    \"queuePosition\": 3,\n    \"message\": \"Your submission has been received and is being processed\"\n  },\n  \"meta\": {\n    \"requestId\": \"req_submission_123\",\n    \"timestamp\": \"2024-01-20T14:30:00Z\"\n  }\n}\n```\n\n#### GET /v1/submissions/{submissionId}\n**Get submission details and results**\n\n```http\nGET /v1/submissions/sub_5K6L7M8N9O0P1Q2R3S4T\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sub_5K6L7M8N9O0P1Q2R3S4T\",\n    \"problemId\": \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n    \"problemTitle\": \"Two Sum\",\n    \"userId\": \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n    \"code\": {\n      \"source\": \"public class Solution {...}\",\n      \"language\": \"csharp\",\n      \"codeLength\": 456,\n      \"linesOfCode\": 14\n    },\n    \"execution\": {\n      \"status\": \"Accepted\", // Pending, Running, Accepted, WrongAnswer, RuntimeError, TimeLimitExceeded, etc.\n      \"statusMessage\": \"All test cases passed successfully\",\n      \"submittedAt\": \"2024-01-20T14:30:00Z\",\n      \"completedAt\": \"2024-01-20T14:30:08Z\",\n      \"totalExecutionTime\": 6234\n    },\n    \"results\": {\n      \"passedTestCases\": 15,\n      \"totalTestCases\": 15,\n      \"passRate\": 100.0,\n      \"score\": 100,\n      \"testCaseResults\": [\n        {\n          \"testCaseId\": \"tc_1\",\n          \"status\": \"Passed\",\n          \"isPublic\": true,\n          \"input\": \"[2,7,11,15]\\\\n9\",\n          \"expectedOutput\": \"[0,1]\",\n          \"actualOutput\": \"[0,1]\",\n          \"executionTime\": 45,\n          \"memoryUsed\": 2147483\n        }\n        // Additional test cases...\n      ],\n      \"performanceMetrics\": {\n        \"averageExecutionTime\": 48.7,\n        \"maxMemoryUsed\": 2267834,\n        \"timeEfficiency\": 97.6,\n        \"memoryEfficiency\": 84.5,\n        \"percentileRank\": 85.7\n      }\n    },\n    \"analysis\": {\n      \"timeComplexity\": {\n        \"estimated\": \"O(n)\",\n        \"confidence\": 0.95\n      },\n      \"spaceComplexity\": {\n        \"estimated\": \"O(n)\", \n        \"confidence\": 0.92\n      },\n      \"codeQuality\": {\n        \"score\": 8.5,\n        \"feedback\": [\n          \"Excellent use of hash table for optimization\",\n          \"Clean and readable code structure\",\n          \"Good variable naming conventions\"\n        ]\n      }\n    },\n    \"feedback\": {\n      \"aiGeneratedTips\": [\n        \"Great job achieving O(n) time complexity!\",\n        \"Consider adding input validation for edge cases\"\n      ],\n      \"similarityCheck\": {\n        \"hasSimilarSubmissions\": false,\n        \"suspiciousLevel\": \"low\"\n      },\n      \"nextRecommendations\": [\n        {\n          \"problemId\": \"prob_3sum_challenge\",\n          \"title\": \"3Sum\",\n          \"reason\": \"Similar hash table concepts\"\n        }\n      ]\n    },\n    \"isPrivate\": false,\n    \"contestSubmission\": null,\n    \"shareableUrl\": \"https://dsagrind.com/submissions/sub_5K6L7M8N9O0P1Q2R3S4T\"\n  }\n}\n```\n\n#### GET /v1/submissions\n**Get user's submission history**\n\n```http\nGET /v1/submissions?page=1&limit=20&status=Accepted&language=csharp&problemId=prob_123&dateFrom=2024-01-01&dateTo=2024-01-31\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### POST /v1/submissions/{submissionId}/run\n**Run code with custom input (testing)**\n\n```http\nPOST /v1/submissions/sub_5K6L7M8N9O0P1Q2R3S4T/run\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"customInput\": \"[1,2,3,4]\\\\n5\",\n  \"expectedOutput\": \"[]\"\n}\n```\n\n---\n\n## 💳 Payments API\n\n### Base URL: `/v1/payments`\n\n#### GET /v1/payments/plans\n**Get available subscription plans**\n\n```http\nGET /v1/payments/plans\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"plans\": [\n      {\n        \"id\": \"plan_free\",\n        \"name\": \"Free\",\n        \"price\": {\n          \"amount\": 0,\n          \"currency\": \"USD\",\n          \"interval\": null\n        },\n        \"features\": [\n          \"Access to 100+ basic problems\",\n          \"Community discussion access\",\n          \"Basic code execution\",\n          \"Limited submissions per hour\"\n        ],\n        \"limits\": {\n          \"problemsPerMonth\": 100,\n          \"submissionsPerHour\": 10,\n          \"aiHintsPerMonth\": 0\n        },\n        \"isPopular\": false\n      },\n      {\n        \"id\": \"plan_premium_monthly\",\n        \"name\": \"Premium\",\n        \"price\": {\n          \"amount\": 9.99,\n          \"currency\": \"USD\", \n          \"interval\": \"month\"\n        },\n        \"features\": [\n          \"Access to 500+ problems including premium\",\n          \"AI-powered hints and explanations\",\n          \"Detailed performance analytics\",\n          \"Unlimited submissions\",\n          \"Contest participation\",\n          \"Code review and optimization tips\"\n        ],\n        \"limits\": {\n          \"problemsPerMonth\": \"unlimited\",\n          \"submissionsPerHour\": \"unlimited\",\n          \"aiHintsPerMonth\": 100\n        },\n        \"isPopular\": true,\n        \"discount\": {\n          \"percentage\": 20,\n          \"validUntil\": \"2024-02-01T00:00:00Z\",\n          \"promoCode\": \"NEWUSER20\"\n        }\n      },\n      {\n        \"id\": \"plan_premium_yearly\",\n        \"name\": \"Premium Annual\",\n        \"price\": {\n          \"amount\": 99.99,\n          \"currency\": \"USD\",\n          \"interval\": \"year\"\n        },\n        \"features\": [\n          \"All Premium features\",\n          \"Priority customer support\",\n          \"Early access to new features\",\n          \"Advanced analytics dashboard\"\n        ],\n        \"limits\": {\n          \"problemsPerMonth\": \"unlimited\",\n          \"submissionsPerHour\": \"unlimited\", \n          \"aiHintsPerMonth\": \"unlimited\"\n        },\n        \"savings\": {\n          \"compared_to\": \"plan_premium_monthly\",\n          \"amount\": 19.89,\n          \"percentage\": 16.6\n        }\n      }\n    ]\n  }\n}\n```\n\n#### POST /v1/payments/create-intent\n**Create payment intent for subscription**\n\n```http\nPOST /v1/payments/create-intent\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"planId\": \"plan_premium_monthly\",\n  \"paymentMethodId\": \"pm_1NvKTGLkdIwHu7ix0KqhrYnK\",\n  \"promoCode\": \"NEWUSER20\",\n  \"billingAddress\": {\n    \"line1\": \"123 Main St\",\n    \"city\": \"San Francisco\",\n    \"state\": \"CA\",\n    \"postalCode\": \"94105\",\n    \"country\": \"US\"\n  }\n}\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"paymentIntentId\": \"pi_1NvKTGLkdIwHu7ix0KqhrYnK\",\n    \"clientSecret\": \"pi_1NvKTGLkdIwHu7ix0KqhrYnK_secret_xyz\",\n    \"amount\": {\n      \"subtotal\": 9.99,\n      \"discount\": -2.00,\n      \"tax\": 0.85,\n      \"total\": 8.84,\n      \"currency\": \"USD\"\n    },\n    \"subscription\": {\n      \"id\": \"sub_premium_monthly_123\",\n      \"startDate\": \"2024-01-20T00:00:00Z\",\n      \"endDate\": \"2024-02-20T00:00:00Z\",\n      \"autoRenew\": true\n    },\n    \"requiresAction\": false,\n    \"nextAction\": null\n  }\n}\n```\n\n#### GET /v1/payments/history\n**Get payment history**\n\n```http\nGET /v1/payments/history?page=1&limit=10&dateFrom=2024-01-01&dateTo=2024-01-31\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### GET /v1/payments/subscription\n**Get current subscription details**\n\n```http\nGET /v1/payments/subscription\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### PUT /v1/payments/subscription\n**Update subscription (upgrade/downgrade)**\n\n```http\nPUT /v1/payments/subscription\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"newPlanId\": \"plan_premium_yearly\",\n  \"prorationBehavior\": \"create_prorations\" // create_prorations, none\n}\n```\n\n#### DELETE /v1/payments/subscription\n**Cancel subscription**\n\n```http\nDELETE /v1/payments/subscription\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"cancelAtPeriodEnd\": true,\n  \"reason\": \"switching_service\",\n  \"feedback\": \"Found a better alternative\"\n}\n```\n\n---\n\n## 🔍 Search API\n\n### Base URL: `/v1/search`\n\n#### GET /v1/search/problems\n**Advanced problem search with semantic similarity**\n\n```http\nGET /v1/search/problems?q=find%20duplicates%20in%20array&semantic=true&limit=10&filters[difficulty]=Medium&filters[tags]=array\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"results\": [\n      {\n        \"problem\": {\n          \"id\": \"prob_find_duplicates\",\n          \"title\": \"Find All Duplicates in an Array\",\n          \"difficulty\": \"Medium\",\n          \"tags\": [\"array\", \"hash-table\"],\n          \"acceptanceRate\": 67.8\n        },\n        \"relevanceScore\": 0.94,\n        \"matchedFields\": [\"title\", \"description\"],\n        \"semanticSimilarity\": 0.89\n      }\n    ],\n    \"searchMetadata\": {\n      \"query\": \"find duplicates in array\",\n      \"semanticSearchEnabled\": true,\n      \"totalResults\": 45,\n      \"searchTime\": \"23ms\",\n      \"suggestions\": [\n        \"duplicate numbers\",\n        \"array duplicates\",\n        \"remove duplicates\"\n      ]\n    }\n  }\n}\n```\n\n#### GET /v1/search/suggestions\n**Get search suggestions and autocomplete**\n\n```http\nGET /v1/search/suggestions?q=two%20sum&type=problems&limit=5\n```\n\n#### POST /v1/search/similar-problems\n**Find problems similar to given problem**\n\n```http\nPOST /v1/search/similar-problems\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n\n{\n  \"problemId\": \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n  \"limit\": 10,\n  \"minSimilarity\": 0.7\n}\n```\n\n---\n\n## 🏆 Contests API\n\n### Base URL: `/v1/contests`\n\n#### GET /v1/contests\n**Get list of contests**\n\n```http\nGET /v1/contests?status=upcoming&type=weekly&page=1&limit=10\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"contests\": [\n      {\n        \"id\": \"contest_weekly_67\",\n        \"title\": \"Weekly Contest 67\",\n        \"type\": \"weekly\",\n        \"status\": \"upcoming\",\n        \"schedule\": {\n          \"startTime\": \"2024-02-01T18:00:00Z\",\n          \"endTime\": \"2024-02-01T19:30:00Z\",\n          \"duration\": 5400,\n          \"timezone\": \"UTC\"\n        },\n        \"problems\": [\n          {\n            \"order\": 1,\n            \"title\": \"Array Manipulation\",\n            \"points\": 100,\n            \"difficulty\": \"Easy\"\n          },\n          {\n            \"order\": 2,\n            \"title\": \"String Algorithms\",\n            \"points\": 200,\n            \"difficulty\": \"Medium\"\n          }\n        ],\n        \"participants\": {\n          \"registered\": 1247,\n          \"capacity\": 5000\n        },\n        \"prizes\": {\n          \"hasFirstPrize\": true,\n          \"description\": \"Winner gets premium subscription\"\n        },\n        \"isRegistered\": false,\n        \"registrationDeadline\": \"2024-02-01T17:30:00Z\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 5,\n      \"totalItems\": 48\n    }\n  }\n}\n```\n\n#### POST /v1/contests/{contestId}/register\n**Register for a contest**\n\n```http\nPOST /v1/contests/contest_weekly_67/register\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n#### GET /v1/contests/{contestId}/leaderboard\n**Get contest leaderboard**\n\n```http\nGET /v1/contests/contest_weekly_67/leaderboard?page=1&limit=50\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n---\n\n## 📊 Analytics API\n\n### Base URL: `/v1/analytics`\n\n#### GET /v1/analytics/user/progress\n**Get user progress analytics**\n\n```http\nGET /v1/analytics/user/progress?period=30d&include=submissions,performance,streaks\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n**Success Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"period\": {\n      \"from\": \"2023-12-21T00:00:00Z\",\n      \"to\": \"2024-01-20T23:59:59Z\",\n      \"days\": 30\n    },\n    \"submissions\": {\n      \"total\": 89,\n      \"accepted\": 67,\n      \"acceptanceRate\": 75.28,\n      \"dailyBreakdown\": [\n        { \"date\": \"2024-01-20\", \"submitted\": 3, \"accepted\": 2 },\n        { \"date\": \"2024-01-19\", \"submitted\": 5, \"accepted\": 4 }\n      ],\n      \"languageBreakdown\": {\n        \"csharp\": { \"submitted\": 34, \"accepted\": 28 },\n        \"python\": { \"submitted\": 32, \"accepted\": 24 },\n        \"java\": { \"submitted\": 23, \"accepted\": 15 }\n      }\n    },\n    \"performance\": {\n      \"averageRuntime\": 127, // milliseconds\n      \"averageMemory\": 45.2, // MB\n      \"runtimeTrend\": \"improving\", // improving, stable, declining\n      \"memoryTrend\": \"stable\",\n      \"percentileRank\": {\n        \"runtime\": 78.5,\n        \"memory\": 82.1\n      }\n    },\n    \"streaks\": {\n      \"current\": 12,\n      \"longest\": 34,\n      \"history\": [\n        { \"startDate\": \"2024-01-08\", \"endDate\": \"2024-01-20\", \"length\": 12 }\n      ]\n    },\n    \"problemCategories\": {\n      \"arrays\": { \"attempted\": 25, \"completed\": 19, \"successRate\": 76.0 },\n      \"strings\": { \"attempted\": 18, \"completed\": 14, \"successRate\": 77.8 },\n      \"trees\": { \"attempted\": 12, \"completed\": 8, \"successRate\": 66.7 }\n    },\n    \"insights\": [\n      {\n        \"type\": \"improvement\",\n        \"message\": \"Your acceptance rate has improved by 12% this month!\"\n      },\n      {\n        \"type\": \"suggestion\",\n        \"message\": \"Try more dynamic programming problems to strengthen weak areas\"\n      }\n    ]\n  }\n}\n```\n\n#### GET /v1/analytics/user/comparison\n**Compare performance with peers**\n\n```http\nGET /v1/analytics/user/comparison?metric=acceptance_rate&timeframe=all_time&cohort=similar_experience\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n```\n\n---\n\n## 🔧 Admin API (Premium/Admin Only)\n\n### Base URL: `/v1/admin`\n\n#### GET /v1/admin/users\n**Get user management dashboard**\n\n```http\nGET /v1/admin/users?page=1&limit=50&search=john&status=active&subscription=premium\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nX-Admin-Role: admin\n```\n\n#### POST /v1/admin/problems\n**Create new problem**\n\n```http\nPOST /v1/admin/problems\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nX-Admin-Role: content_creator\nContent-Type: application/json\n\n{\n  \"title\": \"New Algorithm Challenge\",\n  \"description\": {\n    \"statement\": \"Given an array...\",\n    \"inputFormat\": \"First line contains...\",\n    \"outputFormat\": \"Return a single integer...\",\n    \"constraints\": [\"1 ≤ n ≤ 10^5\"]\n  },\n  \"difficulty\": \"Medium\",\n  \"tags\": [\"array\", \"sorting\"],\n  \"testCases\": [\n    {\n      \"input\": \"3\\n[1,2,3]\",\n      \"expectedOutput\": \"6\",\n      \"isPublic\": true\n    }\n  ],\n  \"hints\": [\n    {\n      \"level\": 1,\n      \"content\": \"Think about the sum of elements\",\n      \"isPremium\": false\n    }\n  ],\n  \"isPremium\": false\n}\n```\n\n#### GET /v1/admin/analytics/platform\n**Get platform-wide analytics**\n\n```http\nGET /v1/admin/analytics/platform?period=7d&metrics=users,submissions,revenue\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nX-Admin-Role: admin\n```\n\n---\n\n## 🚨 Error Handling\n\n### Standard Error Response Format\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Human-readable error message\",\n    \"details\": \"Additional error context or validation errors\",\n    \"timestamp\": \"2024-01-20T10:30:00Z\"\n  },\n  \"meta\": {\n    \"requestId\": \"req_error_123\",\n    \"endpoint\": \"/v1/problems/invalid-id\",\n    \"method\": \"GET\"\n  }\n}\n```\n\n### HTTP Status Codes\n```\nSuccess Codes:\n├── 200 OK: Request successful\n├── 201 Created: Resource created successfully\n├── 202 Accepted: Request accepted for processing\n└── 204 No Content: Successful request with no response body\n\nClient Error Codes:\n├── 400 Bad Request: Invalid request data\n├── 401 Unauthorized: Authentication required\n├── 403 Forbidden: Insufficient permissions\n├── 404 Not Found: Resource not found\n├── 409 Conflict: Resource already exists\n├── 422 Unprocessable Entity: Validation errors\n└── 429 Too Many Requests: Rate limit exceeded\n\nServer Error Codes:\n├── 500 Internal Server Error: Unexpected server error\n├── 502 Bad Gateway: Upstream service error\n├── 503 Service Unavailable: Service temporarily unavailable\n└── 504 Gateway Timeout: Request timeout\n```\n\n### Error Code Categories\n```\nAuthentication Errors:\n├── AUTH_TOKEN_INVALID\n├── AUTH_TOKEN_EXPIRED\n├── AUTH_CREDENTIALS_INVALID\n└── AUTH_PERMISSION_DENIED\n\nValidation Errors:\n├── VALIDATION_REQUIRED_FIELD\n├── VALIDATION_INVALID_FORMAT\n├── VALIDATION_OUT_OF_RANGE\n└── VALIDATION_DUPLICATE_VALUE\n\nBusiness Logic Errors:\n├── RESOURCE_NOT_FOUND\n├── RESOURCE_ALREADY_EXISTS\n├── OPERATION_NOT_ALLOWED\n└── QUOTA_EXCEEDED\n\nSystem Errors:\n├── INTERNAL_ERROR\n├── SERVICE_UNAVAILABLE\n├── DATABASE_ERROR\n└── EXTERNAL_SERVICE_ERROR\n```\n\n---\n\n## 📡 Real-time APIs (WebSocket)\n\n### WebSocket Endpoints\n```\nWebSocket Connections:\n├── wss://api.dsagrind.com/v1/ws/submissions/{submissionId}\n├── wss://api.dsagrind.com/v1/ws/contests/{contestId}\n└── wss://api.dsagrind.com/v1/ws/notifications\n```\n\n### Submission Status Updates\n```json\n{\n  \"type\": \"submission_status_update\",\n  \"data\": {\n    \"submissionId\": \"sub_5K6L7M8N9O0P1Q2R3S4T\",\n    \"status\": \"Running\",\n    \"progress\": {\n      \"currentTestCase\": 5,\n      \"totalTestCases\": 15,\n      \"percentage\": 33.3\n    },\n    \"timestamp\": \"2024-01-20T14:30:05Z\"\n  }\n}\n```\n\n### Contest Updates\n```json\n{\n  \"type\": \"contest_leaderboard_update\",\n  \"data\": {\n    \"contestId\": \"contest_weekly_67\",\n    \"leaderboard\": [\n      {\n        \"rank\": 1,\n        \"userId\": \"usr_champion\",\n        \"score\": 400,\n        \"penalty\": 1247\n      }\n    ],\n    \"timestamp\": \"2024-02-01T18:30:00Z\"\n  }\n}\n```\n\n---\n\n## 🔒 Rate Limiting\n\n### Rate Limit Configuration\n```\nAPI Endpoint Rate Limits:\n├── Authentication: 5 requests/minute per IP\n├── Problem Listing: 100 requests/minute per user\n├── Problem Details: 200 requests/minute per user\n├── Code Submission: 10 submissions/minute per user\n├── Search API: 50 requests/minute per user\n└── Analytics: 20 requests/minute per user\n\nRate Limit Headers:\n├── X-RateLimit-Limit: Maximum requests allowed\n├── X-RateLimit-Remaining: Requests remaining\n├── X-RateLimit-Reset: Unix timestamp when limit resets\n└── Retry-After: Seconds to wait before retrying (when limited)\n```\n\n### Rate Limit Response\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Too many requests. Please wait before trying again.\",\n    \"retryAfter\": 60\n  },\n  \"meta\": {\n    \"requestId\": \"req_rate_limited_123\",\n    \"rateLimit\": {\n      \"limit\": 10,\n      \"remaining\": 0,\n      \"reset\": 1642781294\n    }\n  }\n}\n```\n\nThis comprehensive API design provides a robust, scalable, and developer-friendly interface for the DSAGrind platform, supporting all features while maintaining security, performance, and usability standards.","size_bytes":33351},"ARCHITECTURE_FLOW_DOCUMENTATION.md":{"content":"# DSAGrind Platform - Complete Architecture & Request Flow Documentation\n\n![Architecture Diagram](attached_assets/generated_images/DSAGrind_microservices_architecture_diagram_c7bac80f.png)\n\n## 📋 Table of Contents\n1. [System Overview](#system-overview)\n2. [Complete Request Flow](#complete-request-flow)\n3. [Directory Structure Deep Dive](#directory-structure-deep-dive)\n4. [Dependency Injection Architecture](#dependency-injection-architecture)\n5. [Technology Integration Patterns](#technology-integration-patterns)\n6. [Microservices Communication](#microservices-communication)\n7. [Data Flow Patterns](#data-flow-patterns)\n8. [File-by-File Breakdown](#file-by-file-breakdown)\n9. [Event-Driven Architecture](#event-driven-architecture)\n10. [Security & Authentication Flow](#security--authentication-flow)\n\n---\n\n## 🏗️ System Overview\n\nDSAGrind is a **competitive programming platform** built with **event-driven microservices architecture** using **.NET 8 backend** and **React TypeScript frontend**. The system processes coding problems, executes user submissions in sandboxed environments, handles payments, and provides AI-powered assistance.\n\n### Core Architecture Principles\n- **API Gateway Pattern**: Single entry point via YARP reverse proxy\n- **Event-Driven Communication**: RabbitMQ (CloudAMQP) for async messaging\n- **Shared Kernel**: Common libraries for cross-cutting concerns\n- **Domain-Driven Design**: Each microservice owns its domain\n- **CQRS Pattern**: Separate read/write operations\n- **Dependency Injection**: Constructor injection throughout\n\n---\n\n## 🔄 Complete Request Flow\n\n### 1. Frontend Request Initiation\n```\nclient/src/components/ → client/src/services/ → Gateway API (Port 5000)\n```\n\n**Example: User submits a coding solution**\n```typescript\n// client/src/services/SubmissionService.ts\nconst submitSolution = async (problemId: string, code: string) => {\n  return axios.post('/api/submissions', { problemId, code, language: 'csharp' });\n}\n```\n\n### 2. Gateway Processing\n```\nGateway API → Authentication Middleware → YARP Proxy → Target Microservice\n```\n\n**File Flow:**\n```\nbackend/src/Services/DSAGrind.Gateway.API/\n├── Program.cs                 // Startup configuration\n├── appsettings.json          // YARP routing rules\n└── Properties/launchSettings.json // Development settings\n```\n\n**Gateway Route Configuration:**\n```json\n{\n  \"ReverseProxy\": {\n    \"Routes\": {\n      \"submissions-route\": {\n        \"ClusterId\": \"submissions-cluster\",\n        \"Match\": {\n          \"Path\": \"/api/submissions/{**catch-all}\"\n        }\n      }\n    }\n  }\n}\n```\n\n### 3. Microservice Processing\n```\nTarget Microservice → Controllers → MediatR → Command/Query Handlers → Repository → Database\n```\n\n**Example: Submission Processing Flow**\n```csharp\n// backend/src/Services/DSAGrind.Submissions.API/Controllers/SubmissionsController.cs\n[HttpPost]\npublic async Task<IActionResult> Submit([FromBody] SubmitSolutionCommand command)\n{\n    var result = await _mediator.Send(command);\n    return Ok(result);\n}\n\n// backend/src/Services/DSAGrind.Submissions.API/Application/Commands/SubmitSolutionCommandHandler.cs\npublic async Task<Result> Handle(SubmitSolutionCommand request, CancellationToken cancellationToken)\n{\n    // 1. Validate submission\n    // 2. Execute code in Docker container\n    // 3. Evaluate results\n    // 4. Publish events\n    // 5. Return response\n}\n```\n\n---\n\n## 📁 Directory Structure Deep Dive\n\n### Root Structure\n```\n/\n├── client/                    # React TypeScript Frontend\n├── backend/                   # .NET 8 Backend\n├── .replit                   # Replit configuration\n├── package.json              # Root package management\n└── MICROSERVICES_PACKAGE_REQUIREMENTS.md\n```\n\n### Frontend Structure (`client/`)\n```\nclient/\n├── src/\n│   ├── components/           # Reusable UI components\n│   │   ├── ui/              # Shadcn/ui components\n│   │   ├── forms/           # Form components\n│   │   ├── layout/          # Layout components\n│   │   └── features/        # Feature-specific components\n│   ├── services/            # API communication layer\n│   │   ├── ApiClient.ts     # Axios configuration\n│   │   ├── AuthService.ts   # Authentication API calls\n│   │   ├── ProblemService.ts # Problem management\n│   │   └── SubmissionService.ts # Code submission\n│   ├── hooks/               # Custom React hooks\n│   ├── types/               # TypeScript type definitions\n│   ├── utils/               # Utility functions\n│   └── pages/               # Page components (using Wouter)\n├── public/                  # Static assets\n└── package.json            # Frontend dependencies\n```\n\n**Why Each Directory Exists:**\n- **`components/ui/`**: Provides consistent design system\n- **`services/`**: Abstracts API calls from components\n- **`hooks/`**: Encapsulates stateful logic for reuse\n- **`types/`**: Ensures type safety across the application\n\n### Backend Structure (`backend/`)\n```\nbackend/\n├── src/\n│   ├── Services/            # Microservices\n│   │   ├── DSAGrind.Gateway.API/\n│   │   ├── DSAGrind.Auth.API/\n│   │   ├── DSAGrind.Problems.API/\n│   │   ├── DSAGrind.Submissions.API/\n│   │   ├── DSAGrind.Payments.API/\n│   │   ├── DSAGrind.Search.API/\n│   │   ├── DSAGrind.AI.API/\n│   │   └── DSAGrind.Admin.API/\n│   └── Shared/              # Shared libraries\n│       ├── DSAGrind.Common/\n│       ├── DSAGrind.Models/\n│       └── DSAGrind.Events/\n```\n\n---\n\n## 🔗 Dependency Injection Architecture\n\n### Service Registration Pattern\nEach microservice follows the same DI registration pattern:\n\n```csharp\n// backend/src/Services/DSAGrind.{Service}.API/Program.cs\nvar builder = WebApplication.CreateBuilder(args);\n\n// Core services\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Authentication\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options => { /* JWT configuration */ });\n\n// MediatR for CQRS\nbuilder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));\n\n// AutoMapper for object mapping\nbuilder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());\n\n// Shared services from DSAGrind.Common\nbuilder.Services.AddSharedServices(builder.Configuration);\n\n// Service-specific registrations\nbuilder.Services.AddScoped<IRepository<Problem>, MongoRepository<Problem>>();\nbuilder.Services.AddScoped<IDockerExecutionService, DockerExecutionService>();\n```\n\n### Shared Services Registration (`DSAGrind.Common`)\n```csharp\n// backend/src/Shared/DSAGrind.Common/Extensions/ServiceCollectionExtensions.cs\npublic static IServiceCollection AddSharedServices(this IServiceCollection services, IConfiguration configuration)\n{\n    // MongoDB\n    services.Configure<MongoDbSettings>(configuration.GetSection(\"MongoDb\"));\n    services.AddSingleton<IMongoClient>(sp => new MongoClient(connectionString));\n    \n    // Redis\n    services.AddStackExchangeRedisCache(options => {\n        options.Configuration = configuration.GetConnectionString(\"Redis\");\n    });\n    \n    // RabbitMQ (replaced Kafka)\n    services.Configure<RabbitMQSettings>(configuration.GetSection(\"RabbitMQ\"));\n    services.AddSingleton<IKafkaService, KafkaService>(); // RabbitMQ implementation\n    services.AddSingleton<IEventPublisher, EventPublisher>();\n    \n    // Health checks\n    services.AddHealthChecks()\n        .AddMongoDb(connectionString)\n        .AddRedis(redisConnectionString);\n    \n    return services;\n}\n```\n\n**Why This Pattern:**\n- **Centralized**: Common services configured once\n- **Testable**: Easy to mock dependencies\n- **Configurable**: Environment-specific settings\n- **Maintainable**: Changes in one place\n\n---\n\n## ⚙️ Technology Integration Patterns\n\n### 1. MongoDB Integration\n```csharp\n// backend/src/Shared/DSAGrind.Common/Repositories/MongoRepository.cs\npublic class MongoRepository<T> : IRepository<T> where T : class\n{\n    private readonly IMongoCollection<T> _collection;\n    \n    public MongoRepository(IMongoClient mongoClient, string databaseName, string collectionName)\n    {\n        var database = mongoClient.GetDatabase(databaseName);\n        _collection = database.GetCollection<T>(collectionName);\n    }\n    \n    public async Task<T> GetByIdAsync(string id)\n    {\n        return await _collection.Find(x => x.Id == id).FirstOrDefaultAsync();\n    }\n}\n```\n\n**Usage in Microservices:**\n- **Auth API**: User profiles, authentication tokens\n- **Problems API**: Problem definitions, test cases\n- **Submissions API**: Submission records, execution results\n- **Admin API**: System configuration, user management\n\n### 2. Redis Caching Integration\n```csharp\n// backend/src/Shared/DSAGrind.Common/Services/CacheService.cs\npublic class CacheService : ICacheService\n{\n    private readonly IDistributedCache _cache;\n    \n    public async Task<T?> GetAsync<T>(string key)\n    {\n        var value = await _cache.GetStringAsync(key);\n        return value == null ? default : JsonSerializer.Deserialize<T>(value);\n    }\n    \n    public async Task SetAsync<T>(string key, T value, TimeSpan expiration)\n    {\n        await _cache.SetStringAsync(key, JsonSerializer.Serialize(value), new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = expiration\n        });\n    }\n}\n```\n\n**Cache Usage Patterns:**\n- **Auth API**: JWT token validation, user sessions\n- **Problems API**: Problem metadata, leaderboards\n- **Search API**: Search result caching\n\n### 3. RabbitMQ Event-Driven Communication\n```csharp\n// backend/src/Shared/DSAGrind.Common/Services/KafkaService.cs (RabbitMQ implementation)\npublic class KafkaService : IKafkaService\n{\n    private readonly IConnection _connection;\n    private readonly IModel _channel;\n    \n    public async Task PublishAsync<T>(string topic, T message, string? key = null, Dictionary<string, string>? headers = null)\n    {\n        var messageJson = JsonSerializer.Serialize(message);\n        var body = Encoding.UTF8.GetBytes(messageJson);\n        var exchangeName = $\"{topic}-exchange\";\n        var queueName = topic;\n\n        // Declare exchange and queue\n        _channel?.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Direct, durable: true);\n        _channel?.QueueDeclare(queue: queueName, durable: true, exclusive: false, autoDelete: false, arguments: null);\n        _channel?.QueueBind(queue: queueName, exchange: exchangeName, routingKey: queueName);\n\n        var properties = _channel?.CreateBasicProperties();\n        if (properties != null)\n        {\n            properties.Persistent = true;\n            properties.MessageId = key ?? Guid.NewGuid().ToString();\n            properties.Timestamp = new AmqpTimestamp(DateTimeOffset.UtcNow.ToUnixTimeSeconds());\n        }\n\n        _channel?.BasicPublish(exchange: exchangeName, routingKey: queueName, basicProperties: properties, body: body);\n    }\n}\n```\n\n### 4. External Service Integrations\n\n#### OpenAI Integration (AI API)\n```csharp\n// backend/src/Services/DSAGrind.AI.API/Services/OpenAIService.cs\npublic class OpenAIService\n{\n    private readonly OpenAIClient _client;\n    \n    public async Task<string> GetCodeHintAsync(string problemDescription, string userCode)\n    {\n        var completion = await _client.GetChatCompletionsAsync(new ChatCompletionsOptions\n        {\n            Messages = {\n                new ChatMessage(ChatRole.System, \"You are a coding mentor...\"),\n                new ChatMessage(ChatRole.User, $\"Problem: {problemDescription}\\nCode: {userCode}\")\n            }\n        });\n        \n        return completion.Value.Choices[0].Message.Content;\n    }\n}\n```\n\n#### Stripe Integration (Payments API)\n```csharp\n// backend/src/Services/DSAGrind.Payments.API/Services/StripeService.cs\npublic class StripeService\n{\n    private readonly PaymentIntentService _paymentIntentService;\n    \n    public async Task<PaymentIntent> CreatePaymentIntentAsync(decimal amount, string currency = \"usd\")\n    {\n        var options = new PaymentIntentCreateOptions\n        {\n            Amount = (long)(amount * 100), // Convert to cents\n            Currency = currency,\n            PaymentMethodTypes = new List<string> { \"card\" }\n        };\n        \n        return await _paymentIntentService.CreateAsync(options);\n    }\n}\n```\n\n#### Docker Integration (Submissions API)\n```csharp\n// backend/src/Services/DSAGrind.Submissions.API/Services/DockerExecutionService.cs\npublic class DockerExecutionService\n{\n    private readonly DockerClient _dockerClient;\n    \n    public async Task<ExecutionResult> ExecuteCodeAsync(string code, string language, List<TestCase> testCases)\n    {\n        // 1. Create container with appropriate runtime\n        var containerConfig = new CreateContainerParameters\n        {\n            Image = GetImageForLanguage(language),\n            Cmd = GetExecutionCommand(code, language),\n            WorkingDir = \"/app\",\n            NetworkMode = \"none\", // No network access for security\n            HostConfig = new HostConfig\n            {\n                Memory = 128 * 1024 * 1024, // 128MB limit\n                CpuQuota = 50000 // 50% CPU limit\n            }\n        };\n        \n        var container = await _dockerClient.Containers.CreateContainerAsync(containerConfig);\n        \n        // 2. Start container and execute code\n        await _dockerClient.Containers.StartContainerAsync(container.ID, new ContainerStartParameters());\n        \n        // 3. Wait for completion with timeout\n        var waitResult = await _dockerClient.Containers.WaitContainerAsync(container.ID, CancellationToken.None);\n        \n        // 4. Get output and cleanup\n        var logs = await _dockerClient.Containers.GetContainerLogsAsync(container.ID, new ContainerLogsParameters\n        {\n            ShowStdout = true,\n            ShowStderr = true\n        });\n        \n        await _dockerClient.Containers.RemoveContainerAsync(container.ID, new ContainerRemoveParameters { Force = true });\n        \n        return new ExecutionResult\n        {\n            Output = ParseLogs(logs),\n            Success = waitResult.StatusCode == 0,\n            ExecutionTime = TimeSpan.FromMilliseconds(waitResult.StatusCode)\n        };\n    }\n}\n```\n\n---\n\n## 📡 Microservices Communication\n\n### 1. Synchronous Communication (HTTP)\n```\nFrontend → Gateway API → Target Microservice\n```\n\n**Example: Getting user profile**\n```\nclient/AuthService.ts → Gateway:5000/api/auth/profile → Auth.API:8001/profile\n```\n\n### 2. Asynchronous Communication (RabbitMQ Events)\n\n#### Event Publishing\n```csharp\n// When user registers successfully\nawait _eventPublisher.PublishAsync(\"user-registered\", new UserRegisteredEvent\n{\n    UserId = user.Id,\n    Email = user.Email,\n    RegisteredAt = DateTime.UtcNow\n});\n```\n\n#### Event Consumption\n```csharp\n// In Payments API - listen for user registration to create billing profile\nawait _kafkaService.ConsumeAsync<UserRegisteredEvent>(\"user-registered\", \"payments-service\", async (userEvent, headers) =>\n{\n    await _billingService.CreateBillingProfileAsync(userEvent.UserId, userEvent.Email);\n});\n```\n\n### Event Flow Examples\n\n#### 1. Code Submission Flow\n```\n1. User submits code → Submissions API\n2. Submissions API → Publishes \"submission-received\" event\n3. AI API consumes event → Generates hints if needed\n4. Search API consumes event → Updates user statistics\n5. Admin API consumes event → Updates system metrics\n```\n\n#### 2. Payment Processing Flow\n```\n1. User upgrades subscription → Payments API\n2. Payments API → Publishes \"subscription-upgraded\" event  \n3. Auth API consumes event → Updates user permissions\n4. Problems API consumes event → Unlocks premium problems\n5. Admin API consumes event → Updates revenue metrics\n```\n\n---\n\n## 💾 Data Flow Patterns\n\n### 1. Read Operations (CQRS Query Side)\n```\nFrontend Request → Gateway → Query Handler → Repository → MongoDB → Cache (if cacheable)\n```\n\n**Example: Get Problem List**\n```csharp\n// backend/src/Services/DSAGrind.Problems.API/Application/Queries/GetProblemsQueryHandler.cs\npublic async Task<PaginatedResult<ProblemDto>> Handle(GetProblemsQuery request, CancellationToken cancellationToken)\n{\n    // 1. Check cache first\n    var cacheKey = $\"problems:page:{request.Page}:size:{request.PageSize}\";\n    var cachedResult = await _cacheService.GetAsync<PaginatedResult<ProblemDto>>(cacheKey);\n    \n    if (cachedResult != null)\n        return cachedResult;\n    \n    // 2. Query database\n    var problems = await _problemRepository.GetPaginatedAsync(request.Page, request.PageSize);\n    \n    // 3. Map to DTOs\n    var problemDtos = _mapper.Map<List<ProblemDto>>(problems);\n    \n    var result = new PaginatedResult<ProblemDto>\n    {\n        Data = problemDtos,\n        TotalCount = await _problemRepository.CountAsync(),\n        Page = request.Page,\n        PageSize = request.PageSize\n    };\n    \n    // 4. Cache result\n    await _cacheService.SetAsync(cacheKey, result, TimeSpan.FromMinutes(15));\n    \n    return result;\n}\n```\n\n### 2. Write Operations (CQRS Command Side)\n```\nFrontend Request → Gateway → Command Handler → Repository → MongoDB → Event Publishing\n```\n\n**Example: Submit Solution**\n```csharp\n// backend/src/Services/DSAGrind.Submissions.API/Application/Commands/SubmitSolutionCommandHandler.cs\npublic async Task<SubmissionResult> Handle(SubmitSolutionCommand request, CancellationToken cancellationToken)\n{\n    // 1. Validate input\n    var validationResult = await _validator.ValidateAsync(request);\n    if (!validationResult.IsValid)\n        throw new ValidationException(validationResult.Errors);\n    \n    // 2. Get problem details\n    var problem = await _problemRepository.GetByIdAsync(request.ProblemId);\n    if (problem == null)\n        throw new NotFoundException($\"Problem {request.ProblemId} not found\");\n    \n    // 3. Create submission record\n    var submission = new Submission\n    {\n        Id = Guid.NewGuid().ToString(),\n        UserId = request.UserId,\n        ProblemId = request.ProblemId,\n        Code = request.Code,\n        Language = request.Language,\n        SubmittedAt = DateTime.UtcNow,\n        Status = SubmissionStatus.Pending\n    };\n    \n    await _submissionRepository.CreateAsync(submission);\n    \n    // 4. Execute code asynchronously\n    _ = Task.Run(async () =>\n    {\n        try\n        {\n            var executionResult = await _dockerExecutionService.ExecuteCodeAsync(\n                submission.Code, \n                submission.Language, \n                problem.TestCases\n            );\n            \n            submission.Status = executionResult.Success ? SubmissionStatus.Accepted : SubmissionStatus.WrongAnswer;\n            submission.ExecutionTime = executionResult.ExecutionTime;\n            submission.Output = executionResult.Output;\n            submission.CompletedAt = DateTime.UtcNow;\n            \n            await _submissionRepository.UpdateAsync(submission);\n            \n            // 5. Publish events\n            await _eventPublisher.PublishAsync(\"submission-completed\", new SubmissionCompletedEvent\n            {\n                SubmissionId = submission.Id,\n                UserId = submission.UserId,\n                ProblemId = submission.ProblemId,\n                Status = submission.Status,\n                ExecutionTime = submission.ExecutionTime,\n                CompletedAt = submission.CompletedAt.Value\n            });\n            \n            // Invalidate cache\n            await _cacheService.RemoveAsync($\"user-submissions:{submission.UserId}\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error executing submission {SubmissionId}\", submission.Id);\n            \n            submission.Status = SubmissionStatus.RuntimeError;\n            submission.Output = \"Internal execution error\";\n            submission.CompletedAt = DateTime.UtcNow;\n            \n            await _submissionRepository.UpdateAsync(submission);\n        }\n    });\n    \n    return new SubmissionResult\n    {\n        SubmissionId = submission.Id,\n        Status = submission.Status,\n        Message = \"Submission received and is being processed\"\n    };\n}\n```\n\n---\n\n## 📄 File-by-File Breakdown\n\n### Critical Shared Files\n\n#### 1. `backend/src/Shared/DSAGrind.Common/Services/KafkaService.cs`\n**Purpose**: RabbitMQ implementation maintaining Kafka interface compatibility\n**Key Methods**:\n- `PublishAsync<T>()`: Publishes events to RabbitMQ exchanges\n- `ConsumeAsync<T>()`: Consumes events from RabbitMQ queues\n- Connection management and error handling\n\n#### 2. `backend/src/Shared/DSAGrind.Common/Extensions/ServiceCollectionExtensions.cs`\n**Purpose**: Centralized DI registration for all shared services\n**Registers**:\n- MongoDB client and repositories\n- Redis distributed cache\n- RabbitMQ messaging services\n- Health checks for all external dependencies\n- JWT authentication services\n\n#### 3. `backend/src/Shared/DSAGrind.Models/`\n**Purpose**: Domain models shared across all microservices\n**Key Models**:\n- `User.cs`: User entity with authentication details\n- `Problem.cs`: Coding problem definition with test cases\n- `Submission.cs`: Code submission with execution results\n- `Payment.cs`: Payment and subscription models\n\n#### 4. `backend/src/Shared/DSAGrind.Events/`\n**Purpose**: Event definitions for RabbitMQ messaging\n**Key Events**:\n- `UserRegisteredEvent.cs`: User registration completed\n- `SubmissionCompletedEvent.cs`: Code execution finished\n- `PaymentProcessedEvent.cs`: Payment transaction completed\n- `ProblemCreatedEvent.cs`: New problem added\n\n### Microservice-Specific Files\n\n#### DSAGrind.Gateway.API\n```\nDSAGrind.Gateway.API/\n├── Program.cs              # YARP configuration and startup\n├── appsettings.json       # Route definitions and service discovery\n└── Properties/\n    └── launchSettings.json # Development server configuration\n```\n\n**Key Configuration in appsettings.json**:\n```json\n{\n  \"ReverseProxy\": {\n    \"Routes\": {\n      \"auth-route\": {\n        \"ClusterId\": \"auth-cluster\",\n        \"Match\": { \"Path\": \"/api/auth/{**catch-all}\" }\n      },\n      \"problems-route\": {\n        \"ClusterId\": \"problems-cluster\", \n        \"Match\": { \"Path\": \"/api/problems/{**catch-all}\" }\n      }\n    },\n    \"Clusters\": {\n      \"auth-cluster\": {\n        \"Destinations\": {\n          \"auth-api\": { \"Address\": \"http://localhost:8001/\" }\n        }\n      }\n    }\n  }\n}\n```\n\n#### DSAGrind.Auth.API\n```\nDSAGrind.Auth.API/\n├── Controllers/\n│   └── AuthController.cs        # Authentication endpoints\n├── Application/\n│   ├── Commands/\n│   │   ├── RegisterUserCommand.cs\n│   │   └── LoginUserCommand.cs\n│   └── Queries/\n│       └── GetUserProfileQuery.cs\n├── Domain/\n│   └── Services/\n│       ├── IAuthenticationService.cs\n│       └── AuthenticationService.cs\n├── Infrastructure/\n│   └── Repositories/\n│       └── UserRepository.cs\n└── Program.cs\n```\n\n#### DSAGrind.Submissions.API\n```\nDSAGrind.Submissions.API/\n├── Controllers/\n│   └── SubmissionsController.cs\n├── Application/\n│   ├── Commands/\n│   │   └── SubmitSolutionCommand.cs\n│   └── Queries/\n│       └── GetSubmissionStatusQuery.cs\n├── Domain/\n│   └── Services/\n│       ├── IDockerExecutionService.cs\n│       └── DockerExecutionService.cs\n├── Infrastructure/\n│   └── Repositories/\n│       └── SubmissionRepository.cs\n└── Program.cs\n```\n\n### Frontend Key Files\n\n#### `client/src/services/ApiClient.ts`\n**Purpose**: Centralized HTTP client configuration\n```typescript\nimport axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' \n    ? 'https://your-domain.com' \n    : 'http://localhost:5000',\n  timeout: 30000,\n});\n\n// Request interceptor for auth tokens\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;\n```\n\n#### `client/src/components/features/CodeEditor.tsx`\n**Purpose**: Monaco Editor integration for code submission\n```typescript\nimport { Editor } from '@monaco-editor/react';\nimport { useState } from 'react';\n\ninterface CodeEditorProps {\n  language: string;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function CodeEditor({ language, value, onChange }: CodeEditorProps) {\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <Editor\n      height=\"400px\"\n      language={language}\n      value={value}\n      onChange={(value) => onChange(value || '')}\n      onMount={() => setIsLoading(false)}\n      options={{\n        minimap: { enabled: false },\n        scrollBeyondLastLine: false,\n        fontSize: 14,\n        theme: 'vs-dark'\n      }}\n    />\n  );\n}\n```\n\n---\n\n## 🔐 Security & Authentication Flow\n\n### 1. JWT Token Flow\n```\n1. User logs in → Auth API validates credentials\n2. Auth API generates JWT token → Returns to frontend\n3. Frontend stores token → Includes in all subsequent requests\n4. Gateway validates token → Forwards request to microservice\n5. Microservice trusts Gateway validation → Processes request\n```\n\n### 2. Request Authorization Pipeline\n```csharp\n// In each microservice Program.cs\napp.UseAuthentication(); // Validates JWT token\napp.UseAuthorization();  // Checks user permissions\n\n// In controllers\n[Authorize(Roles = \"User,Premium\")]\n[HttpPost(\"submit\")]\npublic async Task<IActionResult> SubmitSolution([FromBody] SubmitSolutionCommand command)\n{\n    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n    command.UserId = userId;\n    \n    var result = await _mediator.Send(command);\n    return Ok(result);\n}\n```\n\n### 3. Container Security (Docker Execution)\n```csharp\n// Sandboxed execution environment\nvar containerConfig = new CreateContainerParameters\n{\n    Image = \"mcr.microsoft.com/dotnet/runtime:8.0\",\n    NetworkMode = \"none\",           // No network access\n    User = \"nobody\",                // Non-root user\n    HostConfig = new HostConfig\n    {\n        Memory = 128 * 1024 * 1024, // 128MB RAM limit\n        CpuQuota = 50000,           // 50% CPU limit\n        ReadonlyRootfs = true,      // Read-only filesystem\n        SecurityOpt = new[] { \"no-new-privileges\" }\n    }\n};\n```\n\n---\n\n## 🚀 Event-Driven Architecture Details\n\n### Event Publishing Strategy\n```csharp\n// High-level events for business logic\nawait _eventPublisher.PublishAsync(\"user-registered\", userEvent);\nawait _eventPublisher.PublishAsync(\"submission-completed\", submissionEvent);\nawait _eventPublisher.PublishAsync(\"payment-processed\", paymentEvent);\n\n// Low-level events for system operations\nawait _eventPublisher.PublishAsync(\"cache-invalidated\", cacheEvent);\nawait _eventPublisher.PublishAsync(\"search-index-updated\", searchEvent);\n```\n\n### Event Consumption Patterns\n```csharp\n// Each microservice registers its event handlers on startup\npublic static void RegisterEventHandlers(IServiceProvider serviceProvider)\n{\n    var kafkaService = serviceProvider.GetRequiredService<IKafkaService>();\n    \n    // Auth service events\n    _ = kafkaService.ConsumeAsync<PaymentProcessedEvent>(\"payment-processed\", \"auth-service\", \n        async (paymentEvent, headers) => {\n            await UpdateUserSubscriptionLevel(paymentEvent.UserId, paymentEvent.SubscriptionType);\n        });\n    \n    // Problems service events  \n    _ = kafkaService.ConsumeAsync<UserRegisteredEvent>(\"user-registered\", \"problems-service\",\n        async (userEvent, headers) => {\n            await CreateUserProgressTracking(userEvent.UserId);\n        });\n}\n```\n\n### Message Durability & Reliability\n- **Durable Exchanges**: Messages survive broker restarts\n- **Persistent Messages**: Stored to disk before acknowledgment\n- **Manual Acknowledgment**: Only ack after successful processing\n- **Dead Letter Queues**: Failed messages routed for investigation\n- **Retry Logic**: Exponential backoff for transient failures\n\n---\n\n## 🎯 Performance Optimization Patterns\n\n### 1. Caching Strategy\n```csharp\n// Multi-level caching\npublic async Task<Problem> GetProblemAsync(string problemId)\n{\n    // L1: In-memory cache (fastest)\n    if (_memoryCache.TryGetValue($\"problem:{problemId}\", out Problem cachedProblem))\n        return cachedProblem;\n    \n    // L2: Redis distributed cache\n    var redisCached = await _distributedCache.GetAsync<Problem>($\"problem:{problemId}\");\n    if (redisCached != null)\n    {\n        _memoryCache.Set($\"problem:{problemId}\", redisCached, TimeSpan.FromMinutes(5));\n        return redisCached;\n    }\n    \n    // L3: Database (slowest)\n    var problem = await _problemRepository.GetByIdAsync(problemId);\n    if (problem != null)\n    {\n        await _distributedCache.SetAsync($\"problem:{problemId}\", problem, TimeSpan.FromHours(1));\n        _memoryCache.Set($\"problem:{problemId}\", problem, TimeSpan.FromMinutes(5));\n    }\n    \n    return problem;\n}\n```\n\n### 2. Database Query Optimization\n```csharp\n// MongoDB indexes for common queries\npublic async Task CreateIndexesAsync()\n{\n    var submissionCollection = _database.GetCollection<Submission>(\"submissions\");\n    \n    // Compound index for user submissions by date\n    await submissionCollection.Indexes.CreateOneAsync(\n        new CreateIndexModel<Submission>(\n            Builders<Submission>.IndexKeys\n                .Ascending(s => s.UserId)\n                .Descending(s => s.SubmittedAt)\n        )\n    );\n    \n    // Index for problem statistics\n    await submissionCollection.Indexes.CreateOneAsync(\n        new CreateIndexModel<Submission>(\n            Builders<Submission>.IndexKeys\n                .Ascending(s => s.ProblemId)\n                .Ascending(s => s.Status)\n        )\n    );\n}\n```\n\n### 3. Asynchronous Processing\n```csharp\n// Background processing for heavy operations\npublic class SubmissionProcessingService : BackgroundService\n{\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        await foreach (var submission in _submissionQueue.ReadAllAsync(stoppingToken))\n        {\n            _ = Task.Run(async () =>\n            {\n                try\n                {\n                    await ProcessSubmissionAsync(submission);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Failed to process submission {SubmissionId}\", submission.Id);\n                    await _deadLetterQueue.EnqueueAsync(submission);\n                }\n            }, stoppingToken);\n        }\n    }\n}\n```\n\nThis comprehensive documentation provides a complete understanding of how every component in the DSAGrind platform works together, from the smallest file to the largest architectural patterns. The visual diagram combined with this detailed flow analysis gives developers everything needed to understand, maintain, and extend the system.","size_bytes":31593},"DATABASE_DESIGN.md":{"content":"# DSAGrind Platform - Database Design Documentation\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: Comprehensive Database Architecture and Design\n- **Primary Database**: MongoDB Atlas (Document-based NoSQL)\n\n---\n\n## 🎯 Database Architecture Overview\n\n![Database ERD](attached_assets/generated_images/Database_ERD_for_DSAGrind_9360c417.png)\n\n### Database Strategy\nDSAGrind employs a **polyglot persistence** approach with multiple specialized data stores:\n\n```\nData Storage Architecture:\n├── MongoDB Atlas (Primary Database)\n│   ├── User Management\n│   ├── Problem Catalog\n│   ├── Submissions & Results\n│   ├── Payment Records\n│   └── Administrative Data\n├── Redis Cloud (Caching Layer)\n│   ├── Session Storage\n│   ├── Query Result Caching\n│   ├── Rate Limiting Counters\n│   └── Temporary Data\n├── Qdrant (Vector Database)\n│   ├── Problem Embeddings\n│   ├── Code Similarity Search\n│   └── Recommendation Engine\n└── RabbitMQ CloudAMQP (Message Store)\n    ├── Event Persistence\n    ├── Dead Letter Queues\n    └── Message Routing\n```\n\n### Database Selection Rationale\n\n#### **MongoDB Atlas (Primary)**\n- **Document Flexibility**: Schema evolution without migrations\n- **Rich Querying**: Complex aggregation pipelines\n- **Horizontal Scaling**: Automatic sharding capabilities\n- **JSON-Native**: Seamless integration with .NET and React\n- **Cloud Management**: Automated backups, monitoring, scaling\n\n#### **Redis Cloud (Caching)**\n- **In-Memory Performance**: Sub-millisecond response times\n- **Data Structures**: Rich data types (strings, hashes, sets, sorted sets)\n- **Pub/Sub**: Real-time notifications\n- **Persistence Options**: RDB and AOF for durability\n\n#### **Qdrant (Vector Database)**\n- **Semantic Search**: Problem recommendation based on code similarity\n- **High Performance**: Optimized for vector operations\n- **Real-time Updates**: Dynamic index updates\n- **Filtering**: Metadata filtering with vector search\n\n---\n\n## 📊 Entity Relationship Design\n\n### Core Entities and Relationships\n\n```\nEntity Relationships:\nUser (1) ←→ (N) Submission\nUser (1) ←→ (1) UserProfile\nUser (1) ←→ (N) Payment\nUser (1) ←→ (N) Subscription\nProblem (1) ←→ (N) Submission\nProblem (1) ←→ (N) TestCase\nProblem (1) ←→ (N) ProblemTag\nSubmission (1) ←→ (N) TestCaseResult\nContest (1) ←→ (N) Problem\nContest (1) ←→ (N) Participation\n```\n\n---\n\n## 🗄️ Detailed Collection Schemas\n\n### 1. Users Collection\n\n#### Schema Definition\n```javascript\n{\n  _id: ObjectId(\"507f1f77bcf86cd799439011\"),\n  id: \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n  email: \"john.doe@example.com\",\n  username: \"johndoe_coder\",\n  passwordHash: \"$2b$12$9LYqJ8x5KQF2mN3pO4rS6T7uV8wX9yZ0A1bC2dE3fG4hI5jK6lM7nO8p\",\n  role: \"User\", // User, Premium, Admin, Moderator\n  subscription: {\n    type: \"Premium\", // Free, Premium, Pro, Enterprise\n    startDate: ISODate(\"2024-01-01T00:00:00Z\"),\n    endDate: ISODate(\"2024-12-31T23:59:59Z\"),\n    isActive: true,\n    autoRenew: true,\n    paymentMethodId: \"pm_1NvKTGLkdIwHu7ix0KqhrYnK\"\n  },\n  profile: {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    displayName: \"John Doe\",\n    bio: \"Full-stack developer passionate about algorithms and data structures. Competitive programmer with 3+ years experience.\",\n    profileImageUrl: \"https://dsagrind-assets.s3.amazonaws.com/profiles/usr_2Nq8LHnF9X7Y3Z4R5S6T.jpg\",\n    bannerImageUrl: \"https://dsagrind-assets.s3.amazonaws.com/banners/usr_2Nq8LHnF9X7Y3Z4R5S6T.jpg\",\n    location: {\n      country: \"United States\",\n      state: \"California\",\n      city: \"San Francisco\"\n    },\n    dateOfBirth: ISODate(\"1995-06-15T00:00:00Z\"),\n    website: \"https://johndoe.dev\",\n    socialLinks: {\n      github: \"https://github.com/johndoe\",\n      linkedin: \"https://linkedin.com/in/johndoe\",\n      twitter: \"https://twitter.com/johndoe_codes\"\n    },\n    preferredLanguages: [\"csharp\", \"python\", \"java\"],\n    programmingExperience: \"3-5 years\",\n    education: {\n      degree: \"Bachelor of Computer Science\",\n      university: \"Stanford University\",\n      graduationYear: 2020\n    },\n    workExperience: {\n      currentPosition: \"Senior Software Engineer\",\n      company: \"Tech Innovations Inc.\",\n      yearsOfExperience: 4\n    }\n  },\n  statistics: {\n    totalSubmissions: 487,\n    acceptedSubmissions: 312,\n    acceptanceRate: 64.07,\n    problemsSolved: {\n      easy: 89,\n      medium: 156,\n      hard: 67,\n      total: 312\n    },\n    streaks: {\n      current: 12,\n      longest: 45,\n      lastSubmissionDate: ISODate(\"2024-01-20T14:30:00Z\")\n    },\n    rankings: {\n      global: 2847,\n      country: 186,\n      university: 12\n    },\n    languageStats: {\n      \"csharp\": {\n        submissions: 189,\n        accepted: 134,\n        acceptanceRate: 70.89\n      },\n      \"python\": {\n        submissions: 142,\n        accepted: 98,\n        acceptanceRate: 69.01\n      },\n      \"java\": {\n        submissions: 156,\n        accepted: 80,\n        acceptanceRate: 51.28\n      }\n    },\n    categoryStats: {\n      \"arrays\": { solved: 45, total: 67 },\n      \"dynamic-programming\": { solved: 23, total: 89 },\n      \"trees\": { solved: 34, total: 56 },\n      \"graphs\": { solved: 12, total: 45 }\n    },\n    contestParticipation: {\n      totalContests: 23,\n      averageRank: 1847,\n      bestRank: 234,\n      ratingHistory: [\n        { date: ISODate(\"2024-01-01T00:00:00Z\"), rating: 1456 },\n        { date: ISODate(\"2024-01-15T00:00:00Z\"), rating: 1523 },\n        { date: ISODate(\"2024-02-01T00:00:00Z\"), rating: 1487 }\n      ]\n    }\n  },\n  preferences: {\n    theme: \"dark\", // light, dark, auto\n    editorSettings: {\n      fontSize: 14,\n      fontFamily: \"Fira Code\",\n      theme: \"vs-dark\",\n      tabSize: 4,\n      wordWrap: true,\n      minimap: false,\n      autoSave: true\n    },\n    notifications: {\n      email: {\n        weeklyProgress: true,\n        contestReminders: true,\n        newProblems: false,\n        achievements: true\n      },\n      push: {\n        enabled: true,\n        contestStart: true,\n        friendActivity: false\n      }\n    },\n    privacy: {\n      profileVisibility: \"public\", // public, friends, private\n      submissionVisibility: \"public\",\n      showRealName: true,\n      showLocation: true\n    }\n  },\n  security: {\n    twoFactorEnabled: true,\n    backupCodes: [\"1a2b3c4d\", \"5e6f7g8h\", \"9i0j1k2l\"],\n    lastPasswordChange: ISODate(\"2023-12-01T00:00:00Z\"),\n    loginHistory: [\n      {\n        timestamp: ISODate(\"2024-01-20T09:15:00Z\"),\n        ipAddress: \"192.168.1.100\",\n        userAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n        location: \"San Francisco, CA\",\n        success: true\n      }\n    ],\n    refreshTokens: [\n      {\n        token: \"rt_9X8Y7Z6W5V4U3T2S1R0Q\",\n        expiresAt: ISODate(\"2024-02-20T00:00:00Z\"),\n        createdAt: ISODate(\"2024-01-20T09:15:00Z\"),\n        lastUsed: ISODate(\"2024-01-20T14:30:00Z\"),\n        deviceInfo: \"Chrome on Windows\"\n      }\n    ]\n  },\n  metadata: {\n    createdAt: ISODate(\"2023-06-15T10:30:00Z\"),\n    updatedAt: ISODate(\"2024-01-20T14:30:00Z\"),\n    lastLoginAt: ISODate(\"2024-01-20T09:15:00Z\"),\n    emailVerified: true,\n    emailVerificationToken: null,\n    accountStatus: \"active\", // active, suspended, banned, pending\n    flags: [\"early_adopter\", \"beta_tester\"],\n    referralCode: \"JOHN2024\",\n    referredBy: null,\n    totalReferrals: 3\n  }\n}\n```\n\n#### Indexes\n```javascript\n// Unique indexes\ndb.users.createIndex({ \"email\": 1 }, { unique: true });\ndb.users.createIndex({ \"username\": 1 }, { unique: true });\n\n// Performance indexes\ndb.users.createIndex({ \"statistics.rankings.global\": 1 });\ndb.users.createIndex({ \"statistics.problemsSolved.total\": -1 });\ndb.users.createIndex({ \"subscription.type\": 1, \"subscription.isActive\": 1 });\ndb.users.createIndex({ \"metadata.createdAt\": -1 });\n\n// Security indexes\ndb.users.createIndex({ \"security.refreshTokens.token\": 1 });\ndb.users.createIndex({ \"metadata.emailVerificationToken\": 1 });\n\n// Compound indexes for complex queries\ndb.users.createIndex({ \n  \"statistics.rankings.global\": 1, \n  \"subscription.type\": 1,\n  \"metadata.accountStatus\": 1 \n});\n```\n\n### 2. Problems Collection\n\n#### Schema Definition\n```javascript\n{\n  _id: ObjectId(\"507f1f77bcf86cd799439012\"),\n  id: \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n  title: \"Two Sum Advanced\",\n  slug: \"two-sum-advanced\",\n  description: {\n    statement: \"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to target...\",\n    inputFormat: \"The first line contains an integer n, the size of the array...\",\n    outputFormat: \"Return an array of two integers representing the indices...\",\n    constraints: [\n      \"2 ≤ nums.length ≤ 10^4\",\n      \"-10^9 ≤ nums[i] ≤ 10^9\",\n      \"-10^9 ≤ target ≤ 10^9\",\n      \"Only one valid answer exists\"\n    ],\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(n)\"\n  },\n  difficulty: \"Medium\", // Easy, Medium, Hard\n  difficultyScore: 1650, // Numeric difficulty rating (1000-3000)\n  category: \"Arrays and Hashing\",\n  tags: [\n    { name: \"array\", weight: 1.0 },\n    { name: \"hash-table\", weight: 1.0 },\n    { name: \"two-pointers\", weight: 0.7 }\n  ],\n  topicTags: [\n    \"Data Structures\",\n    \"Algorithms\",\n    \"Hash Table\",\n    \"Array\"\n  ],\n  companyTags: [\n    { name: \"Google\", frequency: \"high\", lastSeen: ISODate(\"2024-01-15T00:00:00Z\") },\n    { name: \"Amazon\", frequency: \"medium\", lastSeen: ISODate(\"2024-01-10T00:00:00Z\") },\n    { name: \"Microsoft\", frequency: \"medium\", lastSeen: ISODate(\"2023-12-20T00:00:00Z\") }\n  ],\n  examples: [\n    {\n      id: \"ex_1\",\n      input: \"nums = [2,7,11,15], target = 9\",\n      output: \"[0,1]\",\n      explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n    },\n    {\n      id: \"ex_2\", \n      input: \"nums = [3,2,4], target = 6\",\n      output: \"[1,2]\",\n      explanation: \"Because nums[1] + nums[2] == 6, we return [1, 2].\"\n    }\n  ],\n  testCases: [\n    {\n      id: \"tc_1\",\n      input: \"[2,7,11,15]\\n9\",\n      expectedOutput: \"[0,1]\",\n      isPublic: true,\n      isExample: true,\n      timeLimit: 1000,\n      memoryLimit: 256,\n      difficulty: \"easy\"\n    },\n    {\n      id: \"tc_2\",\n      input: \"[3,2,4]\\n6\", \n      expectedOutput: \"[1,2]\",\n      isPublic: true,\n      isExample: true,\n      timeLimit: 1000,\n      memoryLimit: 256,\n      difficulty: \"easy\"\n    },\n    {\n      id: \"tc_3\",\n      input: \"[3,3]\\n6\",\n      expectedOutput: \"[0,1]\",\n      isPublic: false,\n      isExample: false,\n      timeLimit: 1000,\n      memoryLimit: 256,\n      difficulty: \"medium\"\n    }\n    // ... more test cases\n  ],\n  hints: [\n    {\n      level: 1,\n      content: \"A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.\",\n      isPremium: false\n    },\n    {\n      level: 2,\n      content: \"So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?\",\n      isPremium: false\n    },\n    {\n      level: 3,\n      content: \"The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?\",\n      isPremium: true\n    }\n  ],\n  solutions: [\n    {\n      id: \"sol_1\",\n      approach: \"Brute Force\",\n      language: \"csharp\",\n      code: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        for (int i = 0; i < nums.Length; i++) {\\n            for (int j = i + 1; j < nums.Length; j++) {\\n                if (nums[i] + nums[j] == target) {\\n                    return new int[] { i, j };\\n                }\\n            }\\n        }\\n        return new int[] { };\\n    }\\n}\",\n      timeComplexity: \"O(n²)\",\n      spaceComplexity: \"O(1)\",\n      isPremium: false,\n      explanation: \"Check every possible pair of numbers to see if they sum to the target.\"\n    },\n    {\n      id: \"sol_2\",\n      approach: \"Hash Map\",\n      language: \"csharp\", \n      code: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        Dictionary<int, int> map = new Dictionary<int, int>();\\n        \\n        for (int i = 0; i < nums.Length; i++) {\\n            int complement = target - nums[i];\\n            if (map.ContainsKey(complement)) {\\n                return new int[] { map[complement], i };\\n            }\\n            map[nums[i]] = i;\\n        }\\n        \\n        return new int[] { };\\n    }\\n}\",\n      timeComplexity: \"O(n)\",\n      spaceComplexity: \"O(n)\",\n      isPremium: true,\n      explanation: \"Use a hash map to store numbers we've seen and their indices. For each number, check if its complement exists in the map.\"\n    }\n  ],\n  statistics: {\n    totalSubmissions: 15847,\n    acceptedSubmissions: 8956,\n    acceptanceRate: 56.52,\n    averageRating: 4.2,\n    totalRatings: 1205,\n    languageStats: {\n      \"csharp\": { submissions: 4521, accepted: 2789, rate: 61.70 },\n      \"python\": { submissions: 5890, accepted: 3245, rate: 55.11 },\n      \"java\": { submissions: 3456, accepted: 1923, rate: 55.64 },\n      \"cpp\": { submissions: 1456, accepted: 756, rate: 51.92 },\n      \"javascript\": { submissions: 524, accepted: 243, rate: 46.37 }\n    },\n    difficultyVotes: {\n      easy: 156,\n      medium: 892,\n      hard: 157\n    },\n    performanceMetrics: {\n      averageRuntime: 85, // milliseconds\n      averageMemory: 42.3, // MB\n      fastestSubmission: {\n        runtime: 52,\n        userId: \"usr_fastcoder123\",\n        submissionId: \"sub_lightning_fast\"\n      }\n    }\n  },\n  editorial: {\n    id: \"edit_two_sum_advanced\",\n    content: \"## Approach 1: Brute Force\\n\\nThe brute force approach is simple...\",\n    author: \"DSAGrind Editorial Team\",\n    publishedAt: ISODate(\"2024-01-01T00:00:00Z\"),\n    isPremium: true,\n    viewCount: 5623,\n    upvotes: 423,\n    downvotes: 12\n  },\n  relatedProblems: [\n    {\n      problemId: \"prob_3sum_challenge\",\n      title: \"3Sum\",\n      difficulty: \"Medium\",\n      similarity: 0.85\n    },\n    {\n      problemId: \"prob_two_sum_ii\",\n      title: \"Two Sum II - Input Array Is Sorted\", \n      difficulty: \"Medium\",\n      similarity: 0.92\n    }\n  ],\n  metadata: {\n    createdBy: \"usr_admin_creator\",\n    createdAt: ISODate(\"2023-08-15T10:00:00Z\"),\n    updatedAt: ISODate(\"2024-01-18T14:22:00Z\"),\n    lastModifiedBy: \"usr_editor_john\",\n    version: 3,\n    isActive: true,\n    isPremium: false,\n    isContest: false,\n    contestIds: [\"contest_weekly_45\", \"contest_monthly_12\"],\n    sourceUrl: \"https://leetcode.com/problems/two-sum/\",\n    originalPlatform: \"LeetCode\",\n    difficulty_history: [\n      { difficulty: \"Easy\", changedAt: ISODate(\"2023-08-15T10:00:00Z\"), changedBy: \"usr_admin_creator\" },\n      { difficulty: \"Medium\", changedAt: ISODate(\"2024-01-10T09:30:00Z\"), changedBy: \"usr_editor_john\" }\n    ]\n  }\n}\n```\n\n#### Indexes\n```javascript\n// Search and filtering indexes\ndb.problems.createIndex({ \"title\": \"text\", \"description.statement\": \"text\" });\ndb.problems.createIndex({ \"difficulty\": 1, \"tags.name\": 1 });\ndb.problems.createIndex({ \"category\": 1, \"difficulty\": 1 });\ndb.problems.createIndex({ \"statistics.acceptanceRate\": -1 });\n\n// Performance indexes\ndb.problems.createIndex({ \"metadata.isActive\": 1, \"metadata.isPremium\": 1 });\ndb.problems.createIndex({ \"metadata.createdAt\": -1 });\ndb.problems.createIndex({ \"difficultyScore\": 1 });\n\n// Tag-based queries\ndb.problems.createIndex({ \"tags.name\": 1, \"difficulty\": 1 });\ndb.problems.createIndex({ \"companyTags.name\": 1, \"companyTags.frequency\": 1 });\n\n// Compound indexes for complex queries\ndb.problems.createIndex({ \n  \"metadata.isActive\": 1,\n  \"difficulty\": 1,\n  \"statistics.acceptanceRate\": -1 \n});\n```\n\n### 3. Submissions Collection\n\n#### Schema Definition\n```javascript\n{\n  _id: ObjectId(\"507f1f77bcf86cd799439013\"),\n  id: \"sub_5K6L7M8N9O0P1Q2R3S4T\",\n  userId: \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n  problemId: \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n  contestId: null, // \"contest_weekly_45\" if submitted during contest\n  sessionId: \"session_coding_12345\", // For tracking coding sessions\n  code: {\n    source: \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        Dictionary<int, int> map = new Dictionary<int, int>();\\n        \\n        for (int i = 0; i < nums.Length; i++) {\\n            int complement = target - nums[i];\\n            if (map.ContainsKey(complement)) {\\n                return new int[] { map[complement], i };\\n            }\\n            map[nums[i]] = i;\\n        }\\n        \\n        return new int[] { };\\n    }\\n}\",\n    language: \"csharp\",\n    languageVersion: \"net8.0\",\n    codeLength: 456, // characters\n    linesOfCode: 14\n  },\n  execution: {\n    status: \"Accepted\", // Pending, Running, Accepted, WrongAnswer, RuntimeError, TimeLimitExceeded, MemoryLimitExceeded, CompilationError\n    statusCode: 0,\n    statusMessage: \"All test cases passed successfully\",\n    submittedAt: ISODate(\"2024-01-20T14:30:00Z\"),\n    startedAt: ISODate(\"2024-01-20T14:30:02Z\"),\n    completedAt: ISODate(\"2024-01-20T14:30:08Z\"),\n    totalExecutionTime: 6234, // milliseconds\n    compileTime: 1250, // milliseconds\n    runTime: 4984, // milliseconds\n    containerInfo: {\n      containerId: \"container_abc123def456\",\n      imageId: \"dsagrind/csharp-runner:8.0\",\n      resourceLimits: {\n        memory: 268435456, // 256MB in bytes\n        cpu: 0.5, // 50% CPU\n        timeLimit: 5000 // 5 seconds\n      }\n    }\n  },\n  results: {\n    passedTestCases: 15,\n    totalTestCases: 15,\n    passRate: 100.0,\n    score: 100,\n    testCaseResults: [\n      {\n        testCaseId: \"tc_1\",\n        status: \"Passed\",\n        input: \"[2,7,11,15]\\n9\",\n        expectedOutput: \"[0,1]\", \n        actualOutput: \"[0,1]\",\n        executionTime: 45, // milliseconds\n        memoryUsed: 2147483, // bytes\n        isPublic: true,\n        pointsEarned: 10\n      },\n      {\n        testCaseId: \"tc_2\",\n        status: \"Passed\", \n        input: \"[3,2,4]\\n6\",\n        expectedOutput: \"[1,2]\",\n        actualOutput: \"[1,2]\",\n        executionTime: 52,\n        memoryUsed: 2156789,\n        isPublic: true,\n        pointsEarned: 10\n      }\n      // ... more test case results\n    ],\n    performanceMetrics: {\n      averageExecutionTime: 48.7,\n      maxMemoryUsed: 2267834,\n      totalMemoryAllocated: 268435456,\n      memoryEfficiency: 0.845, // percentage of allocated memory used\n      timeEfficiency: 0.976, // percentage of time limit used\n      codeQualityScore: 8.5, // AI-generated score (1-10)\n      optimizationSuggestions: [\n        \"Consider using Array.IndexOf for cleaner code\",\n        \"Variable naming could be more descriptive\"\n      ]\n    }\n  },\n  analysis: {\n    timeComplexity: {\n      estimated: \"O(n)\",\n      confidence: 0.95,\n      explanation: \"Single pass through array with constant-time hash table operations\"\n    },\n    spaceComplexity: {\n      estimated: \"O(n)\",\n      confidence: 0.92,\n      explanation: \"Hash table storage grows linearly with input size\"\n    },\n    codeStyle: {\n      score: 8.5,\n      issues: [\n        { type: \"naming\", severity: \"minor\", line: 3, message: \"Variable 'i' could be more descriptive\" },\n        { type: \"spacing\", severity: \"minor\", line: 8, message: \"Consider adding blank line for readability\" }\n      ],\n      strengths: [\n        \"Good use of Dictionary for O(1) lookups\",\n        \"Proper error handling\",\n        \"Clean algorithm implementation\"\n      ]\n    },\n    similarities: [\n      {\n        submissionId: \"sub_other_user_123\",\n        similarity: 0.23,\n        commonLines: 3,\n        suspiciousLevel: \"low\"\n      }\n    ]\n  },\n  feedback: {\n    aiGeneratedHints: [\n      \"Great job using a hash map for efficient lookups!\",\n      \"Your solution has optimal time complexity O(n).\",\n      \"Consider adding input validation for edge cases.\"\n    ],\n    performanceComparison: {\n      percentile: 85.7, // User's solution performance vs all submissions\n      betterThan: 85.7,\n      runtimeDistribution: {\n        fastest: 35,\n        median: 67,\n        slowest: 245,\n        userRuntime: 48\n      }\n    },\n    nextRecommendations: [\n      {\n        problemId: \"prob_3sum_challenge\",\n        reason: \"Similar hash table concepts\",\n        difficulty: \"Medium\"\n      },\n      {\n        problemId: \"prob_two_sum_ii\", \n        reason: \"Extension of current problem\",\n        difficulty: \"Medium\"\n      }\n    ]\n  },\n  metadata: {\n    ipAddress: \"192.168.1.100\",\n    userAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n    deviceInfo: {\n      platform: \"Windows\",\n      browser: \"Chrome\",\n      screenResolution: \"1920x1080\",\n      timezone: \"America/Los_Angeles\"\n    },\n    editorInfo: {\n      theme: \"vs-dark\",\n      fontSize: 14,\n      keystrokes: 1247,\n      codingTime: 1825000, // milliseconds spent coding\n      pauses: [\n        { startTime: 456000, duration: 124000, reason: \"thinking\" },\n        { startTime: 892000, duration: 89000, reason: \"debugging\" }\n      ]\n    },\n    flags: [\"first_attempt\", \"optimized_solution\"],\n    tags: [\"interview_practice\", \"self_study\"],\n    isPrivate: false,\n    shareableUrl: \"https://dsagrind.com/submissions/sub_5K6L7M8N9O0P1Q2R3S4T\"\n  }\n}\n```\n\n#### Indexes\n```javascript\n// User-centric queries\ndb.submissions.createIndex({ \"userId\": 1, \"submittedAt\": -1 });\ndb.submissions.createIndex({ \"userId\": 1, \"execution.status\": 1 });\ndb.submissions.createIndex({ \"userId\": 1, \"problemId\": 1, \"submittedAt\": -1 });\n\n// Problem-centric queries\ndb.submissions.createIndex({ \"problemId\": 1, \"execution.status\": 1 });\ndb.submissions.createIndex({ \"problemId\": 1, \"submittedAt\": -1 });\n\n// Performance queries\ndb.submissions.createIndex({ \"execution.status\": 1, \"submittedAt\": -1 });\ndb.submissions.createIndex({ \"results.performanceMetrics.averageExecutionTime\": 1 });\n\n// Contest queries\ndb.submissions.createIndex({ \"contestId\": 1, \"submittedAt\": 1 });\ndb.submissions.createIndex({ \"contestId\": 1, \"userId\": 1, \"results.score\": -1 });\n\n// Analytics queries\ndb.submissions.createIndex({ \"code.language\": 1, \"execution.status\": 1 });\ndb.submissions.createIndex({ \"submittedAt\": -1 }); // Time-series analysis\n```\n\n### 4. Additional Collections\n\n#### Contests Collection\n```javascript\n{\n  _id: ObjectId(\"507f1f77bcf86cd799439014\"),\n  id: \"contest_weekly_67\",\n  title: \"Weekly Contest 67\",\n  type: \"weekly\", // weekly, biweekly, monthly, special\n  status: \"upcoming\", // upcoming, live, completed, cancelled\n  schedule: {\n    startTime: ISODate(\"2024-02-01T18:00:00Z\"),\n    endTime: ISODate(\"2024-02-01T19:30:00Z\"),\n    duration: 5400, // seconds (90 minutes)\n    timezone: \"UTC\"\n  },\n  problems: [\n    {\n      problemId: \"prob_contest_q1\",\n      order: 1,\n      points: 100,\n      title: \"Array Manipulation\",\n      difficulty: \"Easy\"\n    },\n    {\n      problemId: \"prob_contest_q2\", \n      order: 2,\n      points: 200,\n      title: \"String Algorithms\",\n      difficulty: \"Medium\"\n    }\n  ],\n  participants: {\n    registered: 1247,\n    active: 892,\n    completed: 567\n  },\n  leaderboard: [\n    {\n      userId: \"usr_champion_coder\",\n      rank: 1,\n      score: 400,\n      penalty: 1247, // seconds\n      submissions: [\n        { problemId: \"prob_contest_q1\", attempts: 1, time: 342, score: 100 },\n        { problemId: \"prob_contest_q2\", attempts: 2, time: 1247, score: 300 }\n      ]\n    }\n  ],\n  settings: {\n    isPremium: false,\n    allowedLanguages: [\"csharp\", \"python\", \"java\", \"cpp\"],\n    penaltyPerWrongSubmission: 300, // seconds\n    isRated: true,\n    maxSubmissions: 50\n  }\n}\n```\n\n#### Payments Collection\n```javascript\n{\n  _id: ObjectId(\"507f1f77bcf86cd799439015\"),\n  id: \"pay_8X9Y0Z1A2B3C4D5E6F7G\",\n  userId: \"usr_2Nq8LHnF9X7Y3Z4R5S6T\",\n  type: \"subscription\", // subscription, one-time, upgrade, refund\n  status: \"completed\", // pending, processing, completed, failed, refunded\n  amount: {\n    currency: \"USD\",\n    total: 9.99,\n    subtotal: 9.99,\n    tax: 0.0,\n    discount: 0.0,\n    fees: 0.0\n  },\n  paymentMethod: {\n    type: \"card\",\n    provider: \"stripe\",\n    last4: \"4242\",\n    brand: \"visa\",\n    expiryMonth: 12,\n    expiryYear: 2026\n  },\n  subscription: {\n    plan: \"premium_monthly\",\n    billingCycle: \"monthly\",\n    startDate: ISODate(\"2024-01-01T00:00:00Z\"),\n    endDate: ISODate(\"2024-02-01T00:00:00Z\"),\n    autoRenew: true\n  },\n  stripe: {\n    paymentIntentId: \"pi_1NvKTGLkdIwHu7ix0KqhrYnK\",\n    customerId: \"cus_NffrFeUfNV2Hib\",\n    subscriptionId: \"sub_1NvKTGLkdIwHu7ix0KqhrYnK\"\n  },\n  timestamps: {\n    createdAt: ISODate(\"2024-01-01T10:30:00Z\"),\n    processedAt: ISODate(\"2024-01-01T10:30:15Z\"),\n    completedAt: ISODate(\"2024-01-01T10:30:18Z\")\n  }\n}\n```\n\n---\n\n## 🗃️ Caching Strategy (Redis)\n\n### Cache Key Patterns\n```\nCache Key Structure:\n├── User Data\n│   ├── user:profile:{userId}\n│   ├── user:stats:{userId}\n│   ├── user:submissions:{userId}:page:{pageNumber}\n│   └── user:preferences:{userId}\n├── Problem Data\n│   ├── problem:details:{problemId}\n│   ├── problems:list:page:{pageNumber}:filters:{filterHash}\n│   ├── problem:stats:{problemId}\n│   └── problem:leaderboard:{problemId}\n├── Session Data\n│   ├── session:{sessionId}\n│   ├── auth:token:{userId}:{tokenHash}\n│   └── rate_limit:{userId}:{endpoint}\n└── Application Cache\n    ├── leaderboard:global:page:{pageNumber}\n    ├── contests:upcoming\n    └── system:stats:daily\n```\n\n### Caching Implementation\n```javascript\n// Redis Data Structures and TTL\n{\n  // User profile cache (Hash)\n  \"user:profile:usr_123\": {\n    data: JSON.stringify(userProfileObject),\n    ttl: 3600 // 1 hour\n  },\n  \n  // Problem list cache (String)\n  \"problems:list:page:1:filters:difficulty-medium\": {\n    data: JSON.stringify(problemListArray),\n    ttl: 900 // 15 minutes\n  },\n  \n  // Session cache (Hash) \n  \"session:sess_abc123\": {\n    userId: \"usr_123\",\n    loginTime: \"1642781234\",\n    lastActivity: \"1642784567\",\n    ttl: 86400 // 24 hours\n  },\n  \n  // Rate limiting (String with expire)\n  \"rate_limit:usr_123:submissions\": {\n    count: \"5\",\n    ttl: 3600 // Reset every hour\n  },\n  \n  // Leaderboard cache (Sorted Set)\n  \"leaderboard:global\": {\n    \"usr_123\": 1547, // score\n    \"usr_456\": 1523,\n    \"usr_789\": 1489,\n    ttl: 300 // 5 minutes\n  }\n}\n```\n\n---\n\n## 🔍 Vector Database Design (Qdrant)\n\n### Problem Embeddings Collection\n```javascript\n{\n  collection_name: \"problem_embeddings\",\n  vectors: {\n    size: 1536, // OpenAI ada-002 embedding size\n    distance: \"Cosine\"\n  },\n  payload_schema: {\n    problem_id: \"string\",\n    title: \"string\", \n    difficulty: \"string\",\n    tags: [\"string\"],\n    description_hash: \"string\",\n    created_at: \"datetime\",\n    embedding_version: \"string\"\n  },\n  indexes: [\n    { field: \"difficulty\", type: \"keyword\" },\n    { field: \"tags\", type: \"keyword\" },\n    { field: \"created_at\", type: \"datetime\" }\n  ]\n}\n\n// Example vector point\n{\n  id: \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n  vector: [0.123, -0.456, 0.789, ...], // 1536 dimensions\n  payload: {\n    problem_id: \"prob_8M9N0O1P2Q3R4S5T6U7V\",\n    title: \"Two Sum Advanced\",\n    difficulty: \"Medium\",\n    tags: [\"array\", \"hash-table\", \"two-pointers\"],\n    description_hash: \"sha256_hash_of_description\",\n    created_at: \"2024-01-01T00:00:00Z\",\n    embedding_version: \"ada-002-v1\"\n  }\n}\n```\n\n### Code Similarity Collection\n```javascript\n{\n  collection_name: \"code_embeddings\",\n  vectors: {\n    size: 768, // CodeBERT embedding size\n    distance: \"Cosine\"\n  },\n  payload_schema: {\n    submission_id: \"string\",\n    user_id: \"string\",\n    problem_id: \"string\", \n    language: \"string\",\n    code_hash: \"string\",\n    performance_score: \"float\",\n    created_at: \"datetime\"\n  }\n}\n```\n\n---\n\n## 🔄 Data Migration Strategies\n\n### Schema Evolution Patterns\n```javascript\n// Version-based document evolution\n{\n  _id: ObjectId(\"...\"),\n  id: \"usr_123\",\n  schemaVersion: 3, // Current version\n  \n  // Migration tracking\n  migrations: [\n    { version: 2, appliedAt: ISODate(\"2024-01-01T00:00:00Z\"), changes: [\"added_statistics\"] },\n    { version: 3, appliedAt: ISODate(\"2024-01-15T00:00:00Z\"), changes: [\"refactored_preferences\"] }\n  ],\n  \n  // Backward compatibility fields\n  deprecated: {\n    oldFieldName: \"value\", // Kept for backward compatibility\n    _deprecatedAt: ISODate(\"2024-01-01T00:00:00Z\")\n  }\n}\n```\n\n### Data Consistency Patterns\n```javascript\n// Two-Phase Commit for Critical Operations\n// Phase 1: Prepare\n{\n  _id: ObjectId(\"...\"),\n  transactionId: \"txn_abc123\",\n  status: \"prepared\", // prepared, committed, aborted\n  operations: [\n    { collection: \"users\", operation: \"update\", id: \"usr_123\", changes: {...} },\n    { collection: \"submissions\", operation: \"create\", id: \"sub_456\", data: {...} }\n  ],\n  timestamp: ISODate(\"2024-01-01T00:00:00Z\"),\n  ttl: ISODate(\"2024-01-01T00:05:00Z\") // 5 minute timeout\n}\n\n// Phase 2: Commit/Abort\n{\n  transactionId: \"txn_abc123\",\n  status: \"committed\",\n  completedAt: ISODate(\"2024-01-01T00:00:30Z\")\n}\n```\n\n---\n\n## 📊 Performance Optimization\n\n### Query Optimization Strategies\n\n#### Index Usage Monitoring\n```javascript\n// Slow query detection\ndb.runCommand({\n  profile: 2,\n  slowms: 100,\n  sampleRate: 0.1\n});\n\n// Index usage analysis\ndb.users.aggregate([\n  { $indexStats: {} }\n]);\n```\n\n#### Query Patterns\n```javascript\n// Efficient pagination with range queries\ndb.submissions.find({\n  userId: \"usr_123\",\n  submittedAt: { $lt: lastSeenTimestamp }\n}).sort({ submittedAt: -1 }).limit(20);\n\n// Aggregation pipeline for statistics\ndb.submissions.aggregate([\n  { $match: { userId: \"usr_123\", \"execution.status\": \"Accepted\" } },\n  { $group: {\n    _id: \"$code.language\",\n    count: { $sum: 1 },\n    avgRuntime: { $avg: \"$results.performanceMetrics.averageExecutionTime\" }\n  }},\n  { $sort: { count: -1 } }\n]);\n```\n\n### Sharding Strategy\n```javascript\n// Shard key selection for horizontal scaling\n{\n  // Users collection: Shard by userId hash\n  shardKey: { \"id\": \"hashed\" },\n  \n  // Submissions collection: Shard by userId + timestamp  \n  shardKey: { \"userId\": 1, \"submittedAt\": 1 },\n  \n  // Problems collection: Shard by category\n  shardKey: { \"category\": 1, \"difficulty\": 1 }\n}\n```\n\n---\n\n## 🔒 Data Security and Compliance\n\n### Encryption Strategies\n```javascript\n// Field-level encryption for sensitive data\n{\n  userId: \"usr_123\",\n  email: \"john.doe@example.com\", // Encrypted at rest\n  personalInfo: {\n    // Client-side field level encryption\n    ssn: \"encrypted_ssn_value\",\n    dateOfBirth: \"encrypted_dob_value\"\n  },\n  \n  // Searchable encryption for email queries\n  emailHash: \"sha256_hash_for_indexing\",\n  \n  // Audit trail\n  accessLog: [\n    { \n      accessedBy: \"usr_456\",\n      accessType: \"read\",\n      timestamp: ISODate(\"2024-01-01T00:00:00Z\"),\n      ipAddress: \"192.168.1.100\"\n    }\n  ]\n}\n```\n\n### GDPR Compliance\n```javascript\n// User data deletion tracking\n{\n  deletionRequest: {\n    requestedAt: ISODate(\"2024-01-01T00:00:00Z\"),\n    requestedBy: \"usr_123\",\n    status: \"processing\", // pending, processing, completed\n    dataCategories: [\"profile\", \"submissions\", \"payments\"],\n    retentionExceptions: [\"legal_hold\", \"active_subscription\"],\n    completedAt: null,\n    verificationRequired: true\n  },\n  \n  // Data anonymization for analytics\n  anonymizedData: {\n    submissionStats: { /* anonymized stats */ },\n    performanceMetrics: { /* anonymized performance */ }\n  }\n}\n```\n\nThis comprehensive database design provides a robust foundation for the DSAGrind platform, ensuring scalability, performance, and maintainability while supporting all features of a modern competitive programming platform.","size_bytes":31850},"DEPLOYMENT_ARCHITECTURE.md":{"content":"# DSAGrind Platform - Deployment Architecture Documentation\n\n## 📋 Document Information\n- **Version**: 1.0  \n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: Production-Ready Deployment Architecture\n- **Infrastructure**: Cloud-Native with Multi-Region Support\n\n---\n\n## 🎯 Deployment Overview\n\n### Infrastructure Philosophy\nDSAGrind follows a **Cloud-Native Deployment Strategy** with emphasis on:\n- **High Availability**: 99.9% uptime SLA with automated failover\n- **Horizontal Scalability**: Auto-scaling based on demand\n- **Geographic Distribution**: Multi-region deployment for global performance\n- **Infrastructure as Code**: Declarative infrastructure management\n- **Continuous Deployment**: Automated CI/CD pipelines\n- **Monitoring & Observability**: Comprehensive system monitoring\n\n### Deployment Environments\n```\nEnvironment Strategy:\n├── Development (Local & Replit)\n├── Staging (Pre-production testing)  \n├── Production (Live system)\n├── Canary (A/B testing environment)\n└── Disaster Recovery (DR site)\n```\n\n---\n\n## 🏗️ Cloud Infrastructure Architecture\n\n### Multi-Cloud Strategy\n\n#### Primary Cloud Provider: AWS\n```\nAWS Infrastructure Components:\n├── Compute Services\n│   ├── EKS (Elastic Kubernetes Service)\n│   ├── EC2 (Elastic Compute Cloud)\n│   ├── Fargate (Serverless containers)\n│   └── Lambda (Serverless functions)\n├── Storage Services\n│   ├── RDS (Relational Database Service)\n│   ├── DocumentDB (MongoDB-compatible)\n│   ├── ElastiCache (Redis)\n│   └── S3 (Object Storage)\n├── Networking\n│   ├── VPC (Virtual Private Cloud)\n│   ├── CloudFront (CDN)\n│   ├── Application Load Balancer\n│   └── Route 53 (DNS)\n├── Security\n│   ├── IAM (Identity Access Management)\n│   ├── KMS (Key Management Service)\n│   ├── Secrets Manager\n│   └── WAF (Web Application Firewall)\n└── Monitoring\n    ├── CloudWatch (Monitoring)\n    ├── X-Ray (Distributed tracing)\n    └── CloudTrail (Audit logging)\n```\n\n#### Secondary Provider: Azure (DR/Backup)\n```\nAzure Backup Infrastructure:\n├── AKS (Azure Kubernetes Service)\n├── Cosmos DB (Multi-model database)\n├── Azure Cache for Redis\n├── Azure Container Registry\n└── Azure Monitor\n```\n\n### Kubernetes Cluster Architecture\n\n#### Production EKS Cluster Configuration\n```yaml\n# eks-cluster.yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: dsagrind-prod\n  region: us-east-1\n  version: \"1.28\"\n\nvpc:\n  cidr: \"10.0.0.0/16\"\n  nat:\n    gateway: HighlyAvailable\n  clusterEndpoints:\n    publicAccess: false\n    privateAccess: true\n\nnodeGroups:\n  - name: system-nodes\n    instanceType: m5.large\n    minSize: 2\n    maxSize: 10\n    desiredCapacity: 3\n    availabilityZones: [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n    labels:\n      node-type: system\n    taints:\n      - key: node-type\n        value: system\n        effect: NoSchedule\n    iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n\n  - name: application-nodes\n    instanceType: c5.xlarge\n    minSize: 3\n    maxSize: 50\n    desiredCapacity: 6\n    availabilityZones: [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n    labels:\n      node-type: application\n    spot: false\n    iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n\n  - name: code-execution-nodes\n    instanceType: m5.2xlarge\n    minSize: 2\n    maxSize: 20\n    desiredCapacity: 4\n    availabilityZones: [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n    labels:\n      node-type: code-execution\n      workload: high-security\n    taints:\n      - key: workload\n        value: code-execution\n        effect: NoSchedule\n    spot: true\n    spotInstanceTypes: [\"m5.2xlarge\", \"m5a.2xlarge\", \"m4.2xlarge\"]\n\naddons:\n  - name: vpc-cni\n    version: latest\n  - name: coredns\n    version: latest\n  - name: kube-proxy\n    version: latest\n  - name: aws-ebs-csi-driver\n    version: latest\n  - name: aws-load-balancer-controller\n    version: latest\n\nmanagedNodeGroups:\n  - name: managed-nodes\n    instanceTypes: [\"m5.large\", \"m5.xlarge\"]\n    minSize: 1\n    maxSize: 10\n    desiredCapacity: 2\n    volumeSize: 50\n    ssh:\n      allow: false\n    tags:\n      Environment: production\n      Project: dsagrind\n```\n\n---\n\n## 🚀 Container Orchestration\n\n### Kubernetes Deployment Manifests\n\n#### Gateway API Deployment\n```yaml\n# gateway-api-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dsagrind-gateway-api\n  namespace: dsagrind-prod\n  labels:\n    app: gateway-api\n    version: v1.0.0\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: gateway-api\n  template:\n    metadata:\n      labels:\n        app: gateway-api\n        version: v1.0.0\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"8080\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      serviceAccountName: gateway-api-service-account\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        fsGroup: 2000\n      containers:\n      - name: gateway-api\n        image: dsagrind/gateway-api:1.0.0\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 5000\n          name: http\n        - containerPort: 8080\n          name: metrics\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: \"Production\"\n        - name: ASPNETCORE_URLS\n          value: \"http://+:5000\"\n        envFrom:\n        - secretRef:\n            name: dsagrind-secrets\n        - configMapRef:\n            name: dsagrind-config\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 5000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 5000\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: logs\n          mountPath: /app/logs\n        - name: temp\n          mountPath: /tmp\n      volumes:\n      - name: logs\n        emptyDir: {}\n      - name: temp\n        emptyDir:\n          sizeLimit: 1Gi\n      nodeSelector:\n        node-type: application\n      tolerations:\n      - key: node-type\n        operator: Equal\n        value: application\n        effect: NoSchedule\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - gateway-api\n              topologyKey: kubernetes.io/hostname\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway-api-service\n  namespace: dsagrind-prod\n  labels:\n    app: gateway-api\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: 5000\n    protocol: TCP\n    name: http\n  selector:\n    app: gateway-api\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: gateway-api-ingress\n  namespace: dsagrind-prod\n  annotations:\n    kubernetes.io/ingress.class: alb\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012\n    alb.ingress.kubernetes.io/ssl-redirect: '443'\n    alb.ingress.kubernetes.io/healthcheck-path: /health\n    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'\n    alb.ingress.kubernetes.io/healthy-threshold-count: '2'\n    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'\nspec:\n  rules:\n  - host: api.dsagrind.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: gateway-api-service\n            port:\n              number: 80\n  tls:\n  - hosts:\n    - api.dsagrind.com\n```\n\n#### Microservices Deployment (Auth API Example)\n```yaml\n# auth-api-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dsagrind-auth-api\n  namespace: dsagrind-prod\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: auth-api\n  template:\n    metadata:\n      labels:\n        app: auth-api\n        version: v1.0.0\n    spec:\n      serviceAccountName: auth-api-service-account\n      containers:\n      - name: auth-api\n        image: dsagrind/auth-api:1.0.0\n        ports:\n        - containerPort: 8001\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: \"Production\"\n        - name: ConnectionStrings__DefaultConnection\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: mongodb-connection-string\n        - name: JWT__SecretKey\n          valueFrom:\n            secretKeyRef:\n              name: auth-secrets\n              key: jwt-secret-key\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8001\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8001\n          initialDelaySeconds: 10\n          periodSeconds: 5\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth-api-service\n  namespace: dsagrind-prod\nspec:\n  selector:\n    app: auth-api\n  ports:\n  - port: 80\n    targetPort: 8001\n```\n\n#### Code Execution Service (High Security)\n```yaml\n# code-execution-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dsagrind-submissions-api\n  namespace: dsagrind-prod\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: submissions-api\n  template:\n    metadata:\n      labels:\n        app: submissions-api\n        version: v1.0.0\n    spec:\n      serviceAccountName: submissions-api-service-account\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: submissions-api\n        image: dsagrind/submissions-api:1.0.0\n        ports:\n        - containerPort: 8003\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: \"Production\"\n        - name: Docker__Endpoint\n          value: \"unix:///var/run/docker.sock\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        volumeMounts:\n        - name: docker-sock\n          mountPath: /var/run/docker.sock\n          readOnly: true\n        - name: tmp\n          mountPath: /tmp\n        - name: app-tmp\n          mountPath: /app/tmp\n      volumes:\n      - name: docker-sock\n        hostPath:\n          path: /var/run/docker.sock\n          type: Socket\n      - name: tmp\n        emptyDir: {}\n      - name: app-tmp\n        emptyDir:\n          sizeLimit: 1Gi\n      nodeSelector:\n        node-type: code-execution\n      tolerations:\n      - key: workload\n        operator: Equal\n        value: code-execution\n        effect: NoSchedule\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: workload\n                operator: In\n                values:\n                - high-security\n```\n\n---\n\n## 🗄️ Database Deployment Strategy\n\n### MongoDB Atlas Cluster Configuration\n```yaml\n# mongodb-atlas-cluster.tf\nresource \"mongodbatlas_cluster\" \"dsagrind_prod\" {\n  project_id   = var.mongodb_project_id\n  name         = \"dsagrind-prod-cluster\"\n  \n  cluster_type = \"REPLICASET\"\n  \n  provider_settings {\n    provider_name     = \"AWS\"\n    instance_size_name = \"M30\"\n    region_name        = \"US_EAST_1\"\n  }\n  \n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n    regions_config {\n      region_name     = \"US_WEST_2\"\n      electable_nodes = 2\n      priority        = 6\n      read_only_nodes = 1\n    }\n  }\n  \n  backup_enabled               = true\n  auto_scaling_disk_gb_enabled = true\n  mongo_db_major_version       = \"7.0\"\n  \n  advanced_configuration {\n    fail_index_key_too_long              = false\n    javascript_enabled                   = false\n    minimum_enabled_tls_protocol         = \"TLS1_2\"\n    no_table_scan                       = true\n    oplog_size_mb                       = 2048\n    sample_size_bi_connector            = 5000\n    sample_refresh_interval_bi_connector = 300\n  }\n  \n  tags = {\n    Environment = \"production\"\n    Project     = \"dsagrind\"\n    Backup      = \"required\"\n  }\n}\n\n# Database Access Configuration\nresource \"mongodbatlas_database_user\" \"dsagrind_app_user\" {\n  username           = \"dsagrind-app\"\n  password           = var.mongodb_app_password\n  project_id         = var.mongodb_project_id\n  auth_database_name = \"admin\"\n  \n  roles {\n    role_name     = \"readWrite\"\n    database_name = \"dsagrind_prod\"\n  }\n  \n  roles {\n    role_name     = \"read\"\n    database_name = \"dsagrind_analytics\"\n  }\n  \n  scopes {\n    name = mongodbatlas_cluster.dsagrind_prod.name\n    type = \"CLUSTER\"\n  }\n}\n\nresource \"mongodbatlas_project_ip_access_list\" \"eks_cluster\" {\n  project_id = var.mongodb_project_id\n  cidr_block = \"10.0.0.0/16\"\n  comment    = \"EKS Cluster CIDR\"\n}\n```\n\n### Redis Cluster Setup\n```yaml\n# redis-cluster.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-config\n  namespace: dsagrind-prod\ndata:\n  redis.conf: |\n    maxmemory 2gb\n    maxmemory-policy allkeys-lru\n    save 900 1\n    save 300 10\n    save 60 10000\n    rdbcompression yes\n    rdbchecksum yes\n    stop-writes-on-bgsave-error yes\n    tcp-keepalive 300\n    timeout 0\n    tcp-backlog 511\n    databases 16\n    \n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis-cluster\n  namespace: dsagrind-prod\nspec:\n  serviceName: redis-cluster\n  replicas: 3\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7.2-alpine\n        command:\n        - redis-server\n        - /etc/redis/redis.conf\n        - --cluster-enabled yes\n        - --cluster-config-file nodes.conf\n        - --cluster-node-timeout 5000\n        - --appendonly yes\n        ports:\n        - containerPort: 6379\n          name: client\n        - containerPort: 16379\n          name: gossip\n        volumeMounts:\n        - name: redis-config\n          mountPath: /etc/redis\n        - name: redis-data\n          mountPath: /data\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: redis-config\n        configMap:\n          name: redis-config\n  volumeClaimTemplates:\n  - metadata:\n      name: redis-data\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n      storageClassName: gp3\n```\n\n---\n\n## 🔄 CI/CD Pipeline\n\n### GitHub Actions Workflow\n```yaml\n# .github/workflows/deploy-production.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n    paths:\n    - 'backend/**'\n    - 'client/**'\n    - '.github/workflows/**'\n\nenv:\n  AWS_REGION: us-east-1\n  EKS_CLUSTER_NAME: dsagrind-prod\n  ECR_REPOSITORY_PREFIX: dsagrind\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        scan-type: 'fs'\n        scan-ref: '.'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n        \n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: 'trivy-results.sarif'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: security-scan\n    services:\n      mongodb:\n        image: mongo:7.0\n        ports:\n        - 27017:27017\n      redis:\n        image: redis:7.2\n        ports:\n        - 6379:6379\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: '8.0.x'\n        \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n        cache: 'npm'\n        cache-dependency-path: client/package-lock.json\n        \n    - name: Restore .NET dependencies\n      run: dotnet restore backend/DSAGrind.sln\n      \n    - name: Install Node.js dependencies\n      run: npm ci\n      working-directory: client\n      \n    - name: Run .NET tests\n      run: dotnet test backend/DSAGrind.sln --configuration Release --verbosity normal --collect:\"XPlat Code Coverage\"\n      \n    - name: Run frontend tests\n      run: npm test -- --coverage --watchAll=false\n      working-directory: client\n      \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        files: ./backend/coverage.xml,./client/coverage/lcov.info\n\n  build-and-push:\n    runs-on: ubuntu-latest\n    needs: test\n    strategy:\n      matrix:\n        service:\n        - name: gateway-api\n          path: backend/src/Services/DSAGrind.Gateway.API\n        - name: auth-api\n          path: backend/src/Services/DSAGrind.Auth.API\n        - name: problems-api\n          path: backend/src/Services/DSAGrind.Problems.API\n        - name: submissions-api\n          path: backend/src/Services/DSAGrind.Submissions.API\n        - name: payments-api\n          path: backend/src/Services/DSAGrind.Payments.API\n        - name: search-api\n          path: backend/src/Services/DSAGrind.Search.API\n        - name: ai-api\n          path: backend/src/Services/DSAGrind.AI.API\n        - name: admin-api\n          path: backend/src/Services/DSAGrind.Admin.API\n        - name: frontend\n          path: client\n          \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ env.AWS_REGION }}\n        \n    - name: Login to Amazon ECR\n      id: login-ecr\n      uses: aws-actions/amazon-ecr-login@v1\n      \n    - name: Build and push Docker image\n      env:\n        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service.name }}\n        IMAGE_TAG: ${{ github.sha }}\n      run: |\n        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.service.path }}/Dockerfile .\n        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build-and-push\n    environment: production\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ env.AWS_REGION }}\n        \n    - name: Update kubeconfig\n      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}\n      \n    - name: Deploy to Kubernetes\n      run: |\n        # Update image tags in deployment manifests\n        sed -i \"s|dsagrind/gateway-api:.*|dsagrind/gateway-api:${{ github.sha }}|g\" k8s/production/gateway-api-deployment.yaml\n        sed -i \"s|dsagrind/auth-api:.*|dsagrind/auth-api:${{ github.sha }}|g\" k8s/production/auth-api-deployment.yaml\n        # ... repeat for all services\n        \n        # Apply deployments\n        kubectl apply -f k8s/production/\n        \n        # Wait for rollout to complete\n        kubectl rollout status deployment/dsagrind-gateway-api -n dsagrind-prod --timeout=600s\n        kubectl rollout status deployment/dsagrind-auth-api -n dsagrind-prod --timeout=600s\n        # ... repeat for all services\n        \n    - name: Run smoke tests\n      run: |\n        # Wait for services to be ready\n        kubectl wait --for=condition=ready pod -l app=gateway-api -n dsagrind-prod --timeout=300s\n        \n        # Get service endpoint\n        GATEWAY_URL=$(kubectl get ingress gateway-api-ingress -n dsagrind-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n        \n        # Run basic health checks\n        curl -f https://$GATEWAY_URL/health || exit 1\n        curl -f https://$GATEWAY_URL/health/ready || exit 1\n        \n    - name: Notify deployment status\n      if: always()\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n```\n\n### ArgoCD GitOps Configuration\n```yaml\n# argocd/applications/dsagrind-prod.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: dsagrind-prod\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/dsagrind/platform\n    targetRevision: main\n    path: k8s/production\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: dsagrind-prod\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n      allowEmpty: false\n    syncOptions:\n    - CreateNamespace=true\n    - PrunePropagationPolicy=foreground\n    - PruneLast=true\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n  revisionHistoryLimit: 10\n```\n\n---\n\n## 📊 Monitoring & Observability\n\n### Prometheus Monitoring Setup\n```yaml\n# monitoring/prometheus-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n      \n    rule_files:\n    - \"dsagrind_rules.yml\"\n    \n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets:\n          - alertmanager:9093\n          \n    scrape_configs:\n    - job_name: 'kubernetes-pods'\n      kubernetes_sd_configs:\n      - role: pod\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        target_label: __address__\n        \n    - job_name: 'dsagrind-gateway'\n      static_configs:\n      - targets: ['gateway-api-service.dsagrind-prod:80']\n      metrics_path: /metrics\n      scrape_interval: 10s\n      \n    - job_name: 'dsagrind-microservices'\n      kubernetes_sd_configs:\n      - role: service\n        namespaces:\n          names:\n          - dsagrind-prod\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_label_app]\n        regex: '.*-api'\n        action: keep\n\n  dsagrind_rules.yml: |\n    groups:\n    - name: dsagrind.rules\n      rules:\n      - alert: HighErrorRate\n        expr: rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"High error rate detected\"\n          description: \"Error rate is above 10% for 5 minutes\"\n          \n      - alert: HighResponseTime\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High response time detected\"\n          description: \"95th percentile response time is above 2 seconds\"\n          \n      - alert: PodCrashLooping\n        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Pod is crash looping\"\n          description: \"Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is crash looping\"\n          \n      - alert: DatabaseConnectionIssues\n        expr: mongodb_connections_current / mongodb_connections_available > 0.8\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Database connection pool nearly exhausted\"\n          description: \"MongoDB connection usage is above 80%\"\n```\n\n### Grafana Dashboards\n```json\n{\n  \"dashboard\": {\n    \"title\": \"DSAGrind Platform Overview\",\n    \"tags\": [\"dsagrind\", \"production\"],\n    \"timezone\": \"UTC\",\n    \"panels\": [\n      {\n        \"title\": \"Request Rate\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(http_requests_total[5m])) by (service)\",\n            \"legendFormat\": \"{{service}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Response Time\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le, service))\",\n            \"legendFormat\": \"95th percentile {{service}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Error Rate\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(http_requests_total{status=~\\\"5..\\\"}[5m])) by (service) / sum(rate(http_requests_total[5m])) by (service)\",\n            \"legendFormat\": \"Error rate {{service}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Database Performance\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"mongodb_op_counters_total\",\n            \"legendFormat\": \"{{type}} operations\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Code Execution Metrics\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(rate(code_executions_total[5m])) by (language)\",\n            \"legendFormat\": \"{{language}} executions/sec\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Active Users\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"sum(active_users_total)\",\n            \"legendFormat\": \"Active Users\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### ELK Stack Logging\n```yaml\n# logging/elasticsearch.yaml\napiVersion: elasticsearch.k8s.elastic.co/v1\nkind: Elasticsearch\nmetadata:\n  name: dsagrind-elasticsearch\n  namespace: logging\nspec:\n  version: 8.11.0\n  nodeSets:\n  - name: masters\n    count: 3\n    config:\n      node.roles: [\"master\"]\n      xpack.security.enabled: true\n    podTemplate:\n      spec:\n        containers:\n        - name: elasticsearch\n          resources:\n            requests:\n              memory: 2Gi\n              cpu: 1000m\n            limits:\n              memory: 4Gi\n              cpu: 2000m\n    volumeClaimTemplates:\n    - metadata:\n        name: elasticsearch-data\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 100Gi\n        storageClassName: gp3\n  - name: data\n    count: 3\n    config:\n      node.roles: [\"data\", \"ingest\"]\n    podTemplate:\n      spec:\n        containers:\n        - name: elasticsearch\n          resources:\n            requests:\n              memory: 4Gi\n              cpu: 1000m\n            limits:\n              memory: 8Gi\n              cpu: 2000m\n    volumeClaimTemplates:\n    - metadata:\n        name: elasticsearch-data\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 500Gi\n        storageClassName: gp3\n\n---\napiVersion: kibana.k8s.elastic.co/v1\nkind: Kibana\nmetadata:\n  name: dsagrind-kibana\n  namespace: logging\nspec:\n  version: 8.11.0\n  count: 2\n  elasticsearchRef:\n    name: dsagrind-elasticsearch\n  podTemplate:\n    spec:\n      containers:\n      - name: kibana\n        resources:\n          requests:\n            memory: 1Gi\n            cpu: 500m\n          limits:\n            memory: 2Gi\n            cpu: 1000m\n\n---\napiVersion: beat.k8s.elastic.co/v1beta1\nkind: Beat\nmetadata:\n  name: dsagrind-filebeat\n  namespace: logging\nspec:\n  type: filebeat\n  version: 8.11.0\n  elasticsearchRef:\n    name: dsagrind-elasticsearch\n  config:\n    filebeat.inputs:\n    - type: container\n      paths:\n      - /var/log/containers/*dsagrind*.log\n      processors:\n      - add_kubernetes_metadata:\n          host: ${NODE_NAME}\n          matchers:\n          - logs_path:\n              logs_path: \"/var/log/containers/\"\n    output.elasticsearch:\n      hosts: [\"dsagrind-elasticsearch-es-http:9200\"]\n      index: \"dsagrind-logs-%{+yyyy.MM.dd}\"\n  daemonSet:\n    podTemplate:\n      spec:\n        serviceAccountName: filebeat\n        terminationGracePeriodSeconds: 30\n        hostNetwork: true\n        dnsPolicy: ClusterFirstWithHostNet\n        containers:\n        - name: filebeat\n          securityContext:\n            runAsUser: 0\n          volumeMounts:\n          - name: varlogcontainers\n            mountPath: /var/log/containers\n            readOnly: true\n          - name: varlogpods\n            mountPath: /var/log/pods\n            readOnly: true\n          - name: varlibdockercontainers\n            mountPath: /var/lib/docker/containers\n            readOnly: true\n        volumes:\n        - name: varlogcontainers\n          hostPath:\n            path: /var/log/containers\n        - name: varlogpods\n          hostPath:\n            path: /var/log/pods\n        - name: varlibdockercontainers\n          hostPath:\n            path: /var/lib/docker/containers\n```\n\n---\n\n## 🔄 Disaster Recovery & Backup\n\n### Backup Strategy\n```yaml\n# backup/mongodb-backup.yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: mongodb-backup\n  namespace: dsagrind-prod\nspec:\n  schedule: \"0 2 * * *\"  # Daily at 2 AM UTC\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: mongodb-backup\n            image: mongo:7.0\n            command:\n            - /bin/bash\n            - -c\n            - |\n              TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n              BACKUP_NAME=\"dsagrind_backup_${TIMESTAMP}\"\n              \n              # Create backup\n              mongodump --uri=\"${MONGODB_URI}\" --out=\"/backup/${BACKUP_NAME}\"\n              \n              # Compress backup\n              tar -czf \"/backup/${BACKUP_NAME}.tar.gz\" -C \"/backup\" \"${BACKUP_NAME}\"\n              \n              # Upload to S3\n              aws s3 cp \"/backup/${BACKUP_NAME}.tar.gz\" \"s3://${BACKUP_BUCKET}/mongodb/${BACKUP_NAME}.tar.gz\"\n              \n              # Cleanup local files\n              rm -rf \"/backup/${BACKUP_NAME}\"\n              rm -f \"/backup/${BACKUP_NAME}.tar.gz\"\n              \n              # Cleanup old backups (keep 30 days)\n              aws s3 ls \"s3://${BACKUP_BUCKET}/mongodb/\" | while read -r line; do\n                createDate=$(echo $line | awk '{print $1\" \"$2}')\n                createDate=$(date -d \"$createDate\" +%s)\n                cutoffDate=$(date -d \"30 days ago\" +%s)\n                if [[ $createDate -lt $cutoffDate ]]; then\n                  fileName=$(echo $line | awk '{print $4}')\n                  if [[ $fileName != \"\" ]]; then\n                    aws s3 rm \"s3://${BACKUP_BUCKET}/mongodb/${fileName}\"\n                  fi\n                fi\n              done\n            env:\n            - name: MONGODB_URI\n              valueFrom:\n                secretKeyRef:\n                  name: database-secrets\n                  key: mongodb-uri\n            - name: BACKUP_BUCKET\n              value: \"dsagrind-backups\"\n            - name: AWS_REGION\n              value: \"us-east-1\"\n            volumeMounts:\n            - name: backup-storage\n              mountPath: /backup\n          volumes:\n          - name: backup-storage\n            emptyDir:\n              sizeLimit: 10Gi\n          restartPolicy: OnFailure\n\n---\n# Velero backup for Kubernetes resources\napiVersion: velero.io/v1\nkind: Schedule\nmetadata:\n  name: dsagrind-daily-backup\n  namespace: velero\nspec:\n  schedule: \"0 1 * * *\"  # Daily at 1 AM UTC\n  template:\n    includedNamespaces:\n    - dsagrind-prod\n    - monitoring\n    - logging\n    excludedResources:\n    - events\n    - events.events.k8s.io\n    storageLocation: aws-s3\n    ttl: 720h  # 30 days\n    snapshotVolumes: true\n```\n\n### Disaster Recovery Plan\n```yaml\n# dr/disaster-recovery-plan.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: disaster-recovery-plan\n  namespace: dsagrind-prod\ndata:\n  recovery-procedures.md: |\n    # DSAGrind Disaster Recovery Procedures\n    \n    ## RTO/RPO Targets\n    - Recovery Time Objective (RTO): 4 hours\n    - Recovery Point Objective (RPO): 1 hour\n    \n    ## Disaster Scenarios\n    \n    ### 1. Primary Region Failure (us-east-1)\n    \n    **Detection:**\n    - Multiple availability zones down\n    - Database cluster unreachable\n    - Application services failing health checks\n    \n    **Recovery Steps:**\n    1. Activate secondary region (us-west-2)\n    2. Update DNS to point to secondary region\n    3. Restore database from latest backup\n    4. Deploy application services to secondary region\n    5. Verify all services are functional\n    \n    **Commands:**\n    ```bash\n    # Switch to DR region\n    aws eks update-kubeconfig --region us-west-2 --name dsagrind-dr\n    \n    # Deploy applications\n    kubectl apply -f k8s/disaster-recovery/\n    \n    # Update Route53 records\n    aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://dr-dns-changes.json\n    ```\n    \n    ### 2. Database Corruption/Loss\n    \n    **Recovery Steps:**\n    1. Stop all write operations\n    2. Identify last known good backup\n    3. Restore from backup to new cluster\n    4. Update connection strings\n    5. Restart applications\n    6. Verify data integrity\n    \n    ### 3. Kubernetes Cluster Failure\n    \n    **Recovery Steps:**\n    1. Create new EKS cluster\n    2. Restore from Velero backup\n    3. Update load balancer targets\n    4. Verify all pods are running\n    5. Test application functionality\n    \n    ## Recovery Verification Checklist\n    - [ ] All microservices are running\n    - [ ] Database connectivity restored\n    - [ ] Frontend application accessible\n    - [ ] User authentication working\n    - [ ] Code execution functionality working\n    - [ ] Payment processing functional\n    - [ ] Monitoring and alerting active\n    - [ ] SSL certificates valid\n    - [ ] DNS resolution correct\n```\n\nThis comprehensive deployment architecture ensures DSAGrind can be deployed reliably in production with high availability, scalability, and disaster recovery capabilities while maintaining security and performance standards.","size_bytes":35946},"HIGH_LEVEL_DESIGN.md":{"content":"# DSAGrind Platform - High Level Design (HLD)\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Architecture Pattern**: Event-Driven Microservices\n- **Technology Stack**: .NET 8, React TypeScript, MongoDB, RabbitMQ\n\n---\n\n## 🎯 System Overview\n\n### Business Objectives\nDSAGrind is a comprehensive competitive programming platform designed to provide:\n- **Problem Practice**: Extensive library of coding challenges across difficulty levels\n- **Code Execution**: Secure sandboxed environment for multiple programming languages\n- **Real-time Feedback**: Instant code evaluation with detailed test results\n- **Premium Features**: Advanced problems, AI hints, and personalized learning paths\n- **Community Engagement**: Leaderboards, contests, and social features\n\n### Success Metrics\n- **Platform Performance**: Sub-2s response times for code execution\n- **User Engagement**: 80%+ monthly active user retention\n- **System Reliability**: 99.9% uptime SLA\n- **Scalability**: Support for 100K+ concurrent users\n- **Security**: Zero data breaches, secure code execution\n\n---\n\n## 🏗️ System Architecture\n\n### Architecture Style\n**Event-Driven Microservices Architecture** with the following characteristics:\n- **Loose Coupling**: Services communicate via events and APIs\n- **High Cohesion**: Each service owns a specific business domain\n- **Fault Isolation**: Service failures don't cascade across the system\n- **Independent Deployment**: Services can be deployed independently\n- **Technology Diversity**: Each service can use optimal technology stack\n\n### Core Architectural Principles\n\n#### 1. **Domain-Driven Design (DDD)**\n```\nBusiness Domains:\n├── Authentication & Authorization\n├── Problem Management  \n├── Code Submission & Execution\n├── Payment & Subscription\n├── Search & Discovery\n├── AI-Powered Assistance\n└── Administrative Operations\n```\n\n#### 2. **Command Query Responsibility Segregation (CQRS)**\n- **Commands**: Modify system state (Create, Update, Delete)\n- **Queries**: Read system state without side effects\n- **Separation**: Different models and paths for reads vs writes\n\n#### 3. **Event Sourcing Patterns**\n- **Domain Events**: Capture business-significant occurrences\n- **Event Store**: RabbitMQ for reliable event delivery\n- **Event Handlers**: Asynchronous processing of business events\n\n---\n\n## 🔧 System Components\n\n### Frontend Layer\n```\nReact TypeScript SPA\n├── Component Architecture\n│   ├── UI Components (Shadcn/UI)\n│   ├── Feature Components\n│   ├── Layout Components\n│   └── Page Components\n├── State Management\n│   ├── React Query (Server State)\n│   ├── Local State (useState/useReducer)\n│   └── Context API (Global State)\n├── Routing\n│   └── Wouter (Declarative Routing)\n└── Development Tools\n    ├── Vite (Build Tool)\n    ├── TypeScript (Type Safety)\n    └── Tailwind CSS (Styling)\n```\n\n### API Gateway Layer\n```\nYARP Reverse Proxy\n├── Request Routing\n├── Load Balancing\n├── Authentication\n├── Rate Limiting\n├── Request/Response Transformation\n└── Health Monitoring\n```\n\n### Microservices Layer\n```\nMicroservices Ecosystem\n├── DSAGrind.Gateway.API     # Entry point and routing\n├── DSAGrind.Auth.API        # Authentication & user management\n├── DSAGrind.Problems.API    # Problem catalog and management\n├── DSAGrind.Submissions.API # Code execution and evaluation\n├── DSAGrind.Payments.API    # Billing and subscriptions\n├── DSAGrind.Search.API      # Search and recommendations\n├── DSAGrind.AI.API          # AI-powered features\n└── DSAGrind.Admin.API       # Administrative operations\n```\n\n### Shared Libraries\n```\nShared Components\n├── DSAGrind.Common          # Infrastructure and utilities\n├── DSAGrind.Models          # Domain models and DTOs\n└── DSAGrind.Events          # Event definitions\n```\n\n### Data Layer\n```\nData Storage Strategy\n├── Primary Database (MongoDB Atlas)\n│   ├── Document-based storage\n│   ├── Flexible schema\n│   ├── Horizontal scaling\n│   └── Rich querying capabilities\n├── Cache Layer (Redis Cloud)\n│   ├── Session storage\n│   ├── Query result caching\n│   ├── Rate limiting counters\n│   └── Temporary data storage\n├── Vector Database (Qdrant)\n│   ├── Semantic search\n│   ├── Problem recommendations\n│   └── AI-powered matching\n└── Message Broker (RabbitMQ CloudAMQP)\n    ├── Event-driven communication\n    ├── Reliable message delivery\n    ├── Dead letter handling\n    └── Message persistence\n```\n\n---\n\n## 🌐 System Interfaces\n\n### External Integrations\n\n#### **Payment Processing (Stripe)**\n```\nPayment Flow:\nUser Payment Intent → Stripe API → Webhook → Payments.API → Event Publishing\n```\n- **Capabilities**: Credit card processing, subscription management, invoicing\n- **Security**: PCI DSS compliance through Stripe\n- **Features**: Recurring billing, prorated upgrades, payment retries\n\n#### **AI Services (OpenAI)**\n```\nAI Request Flow:\nUser Request → AI.API → OpenAI API → Response Processing → User Response\n```\n- **Capabilities**: Code analysis, hint generation, explanation\n- **Integration**: GPT-4 for advanced code understanding\n- **Rate Limiting**: Token-based usage tracking\n\n#### **Code Execution (Docker)**\n```\nExecution Flow:\nCode Submission → Docker Container → Sandboxed Execution → Results Collection\n```\n- **Security**: Network isolation, resource limits, read-only filesystem\n- **Languages**: C#, Python, Java, C++, JavaScript\n- **Monitoring**: Execution time, memory usage, output capture\n\n### Internal API Contracts\n\n#### **Authentication API**\n```\nPOST /api/auth/register\nPOST /api/auth/login\nPOST /api/auth/refresh\nGET  /api/auth/profile\nPUT  /api/auth/profile\n```\n\n#### **Problems API**\n```\nGET    /api/problems\nGET    /api/problems/{id}\nPOST   /api/problems\nPUT    /api/problems/{id}\nDELETE /api/problems/{id}\nGET    /api/problems/{id}/submissions\n```\n\n#### **Submissions API**\n```\nPOST /api/submissions\nGET  /api/submissions/{id}\nGET  /api/submissions/user/{userId}\nGET  /api/submissions/{id}/results\n```\n\n---\n\n## 📊 Data Flow Architecture\n\n### Request Processing Pipeline\n\n#### **1. User Authentication Flow**\n```\nFrontend → Gateway → Auth.API → MongoDB → JWT Generation → Response\n```\n\n#### **2. Problem Browsing Flow**\n```\nFrontend → Gateway → Problems.API → Cache Check → MongoDB → Response Caching → Frontend\n```\n\n#### **3. Code Submission Flow**\n```\nFrontend → Gateway → Submissions.API → Docker Execution → Result Processing → Event Publishing → Response\n```\n\n#### **4. Payment Processing Flow**\n```\nFrontend → Gateway → Payments.API → Stripe API → Webhook Processing → Event Publishing → Response\n```\n\n### Event-Driven Communication\n\n#### **Event Publishing Pattern**\n```\nService Operation → Event Creation → RabbitMQ Publishing → Multiple Service Consumption\n```\n\n#### **Key Events**\n- **UserRegisteredEvent**: Triggers welcome email, initial setup\n- **SubmissionCompletedEvent**: Updates statistics, triggers notifications\n- **PaymentProcessedEvent**: Updates user permissions, sends receipts\n- **ProblemCreatedEvent**: Updates search index, triggers notifications\n\n---\n\n## 🔒 Security Architecture\n\n### Authentication & Authorization\n```\nSecurity Layers:\n├── JWT Token-based Authentication\n├── Role-based Authorization (RBAC)\n├── API Rate Limiting\n├── CORS Protection\n└── Input Validation & Sanitization\n```\n\n### Code Execution Security\n```\nDocker Security:\n├── Network Isolation (--network=none)\n├── Resource Limits (CPU, Memory)\n├── Read-only Filesystem\n├── Non-privileged User Execution\n└── Temporary Container Lifecycle\n```\n\n### Data Protection\n```\nData Security:\n├── Encryption at Rest (MongoDB Atlas)\n├── Encryption in Transit (TLS 1.3)\n├── PII Data Handling\n├── GDPR Compliance\n└── Regular Security Audits\n```\n\n---\n\n## 📈 Scalability Design\n\n### Horizontal Scaling Strategy\n```\nScaling Approach:\n├── Stateless Microservices\n├── Load Balancer Distribution\n├── Database Sharding Strategy\n├── Cache Layer Scaling\n└── Message Queue Clustering\n```\n\n### Performance Optimization\n```\nOptimization Techniques:\n├── Database Indexing Strategy\n├── Multi-level Caching\n├── Asynchronous Processing\n├── CDN for Static Assets\n└── Database Connection Pooling\n```\n\n### Capacity Planning\n```\nResource Planning:\n├── Expected Load: 10K concurrent users\n├── Peak Submission Rate: 1K submissions/minute\n├── Database Growth: 1GB/month\n├── Cache Memory: 16GB Redis cluster\n└── Message Throughput: 10K events/minute\n```\n\n---\n\n## 🔄 Deployment Architecture\n\n### Environment Strategy\n```\nDeployment Environments:\n├── Development (Local/Replit)\n├── Staging (Pre-production testing)\n├── Production (Live system)\n└── DR Site (Disaster recovery)\n```\n\n### Deployment Pipeline\n```\nCI/CD Pipeline:\nSource Code → Build → Test → Package → Deploy → Monitor\n```\n\n### Infrastructure Components\n```\nInfrastructure Stack:\n├── Container Platform (Docker)\n├── Orchestration (Kubernetes/Docker Compose)\n├── Load Balancer (Cloud Load Balancer)\n├── Monitoring (Application Insights)\n└── Logging (Structured Logging + ELK Stack)\n```\n\n---\n\n## 🎯 Quality Attributes\n\n### Performance Requirements\n- **Response Time**: < 2 seconds for 95% of requests\n- **Throughput**: 1000 requests/second per service\n- **Code Execution**: < 5 seconds for most submissions\n- **Database Queries**: < 100ms for indexed queries\n\n### Availability Requirements\n- **System Uptime**: 99.9% availability (8.76 hours downtime/year)\n- **Recovery Time**: < 15 minutes for service restoration\n- **Data Backup**: Daily automated backups with 30-day retention\n- **Disaster Recovery**: < 4 hours RTO, < 1 hour RPO\n\n### Security Requirements\n- **Authentication**: Multi-factor authentication support\n- **Authorization**: Granular permission system\n- **Data Protection**: Encryption for all sensitive data\n- **Audit Trail**: Complete action logging and monitoring\n\n---\n\n## 🔍 Monitoring & Observability\n\n### Health Monitoring\n```\nHealth Check Strategy:\n├── Service Health Endpoints\n├── Database Connectivity Checks\n├── External Service Availability\n├── Resource Utilization Monitoring\n└── Application Performance Metrics\n```\n\n### Logging Strategy\n```\nLogging Architecture:\n├── Structured Logging (JSON format)\n├── Centralized Log Aggregation\n├── Log Level Management\n├── Performance Metrics Logging\n└── Security Event Logging\n```\n\n### Alerting Framework\n```\nAlert Categories:\n├── Critical System Failures\n├── Performance Degradation\n├── Security Incidents\n├── Resource Exhaustion\n└── Business Metric Anomalies\n```\n\n---\n\n## 🚀 Future Roadmap\n\n### Phase 1: Core Platform (Current)\n- ✅ Microservices architecture\n- ✅ Basic problem solving\n- ✅ Code execution engine\n- ✅ User authentication\n- ✅ Payment processing\n\n### Phase 2: Enhanced Features (Next 6 months)\n- 🔄 Advanced AI features\n- 🔄 Contest platform\n- 🔄 Social features\n- 🔄 Mobile application\n- 🔄 Advanced analytics\n\n### Phase 3: Scale & Optimization (6-12 months)\n- 🔄 Global CDN deployment\n- 🔄 Advanced caching strategies\n- 🔄 Machine learning recommendations\n- 🔄 Enterprise features\n- 🔄 API marketplace\n\n---\n\n## 📋 Risk Assessment\n\n### Technical Risks\n```\nRisk Management:\n├── Service Dependencies\n│   ├── Risk: Single point of failure\n│   └── Mitigation: Circuit breakers, fallbacks\n├── Data Consistency\n│   ├── Risk: Eventual consistency issues\n│   └── Mitigation: Saga pattern, compensation\n├── Performance Bottlenecks\n│   ├── Risk: Database performance degradation\n│   └── Mitigation: Caching, read replicas\n└── Security Vulnerabilities\n    ├── Risk: Code injection attacks\n    └── Mitigation: Sandboxing, input validation\n```\n\n### Business Risks\n```\nBusiness Continuity:\n├── External Service Dependencies\n│   ├── Risk: Stripe/OpenAI service outages\n│   └── Mitigation: Alternative providers, graceful degradation\n├── Compliance Requirements\n│   ├── Risk: GDPR/PCI DSS violations\n│   └── Mitigation: Regular audits, compliance automation\n└── Competitive Pressure\n    ├── Risk: Market saturation\n    └── Mitigation: Unique value propositions, innovation\n```\n\n---\n\nThis High-Level Design provides the foundational architecture blueprint for the DSAGrind platform, establishing the strategic technical direction while maintaining flexibility for future evolution and scaling requirements.","size_bytes":13147},"LOW_LEVEL_DESIGN.md":{"content":"# DSAGrind Platform - Low Level Design (LLD)\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: Detailed implementation specifications\n- **Technology Stack**: .NET 8, React TypeScript, MongoDB, RabbitMQ\n\n---\n\n## 🎯 Implementation Overview\n\nThis document provides detailed implementation specifications for each component of the DSAGrind platform, including class designs, database schemas, API specifications, and algorithm implementations.\n\n---\n\n## 🏗️ Detailed Component Design\n\n### 1. Authentication Service (DSAGrind.Auth.API)\n\n#### Class Structure\n```csharp\n// Domain Models\npublic class User\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Email { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string PasswordHash { get; set; } = string.Empty;\n    public UserRole Role { get; set; } = UserRole.User;\n    public SubscriptionType Subscription { get; set; } = SubscriptionType.Free;\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime LastLoginAt { get; set; }\n    public bool IsEmailVerified { get; set; } = false;\n    public UserProfile Profile { get; set; } = new();\n    public List<string> RefreshTokens { get; set; } = new();\n}\n\npublic class UserProfile\n{\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n    public string Bio { get; set; } = string.Empty;\n    public string ProfileImageUrl { get; set; } = string.Empty;\n    public string Country { get; set; } = string.Empty;\n    public DateTime? DateOfBirth { get; set; }\n    public List<string> PreferredLanguages { get; set; } = new();\n    public UserStatistics Statistics { get; set; } = new();\n}\n\npublic class UserStatistics\n{\n    public int TotalSubmissions { get; set; }\n    public int AcceptedSubmissions { get; set; }\n    public int EasyProblemsCompleted { get; set; }\n    public int MediumProblemsCompleted { get; set; }\n    public int HardProblemsCompleted { get; set; }\n    public decimal AcceptanceRate => TotalSubmissions > 0 ? (decimal)AcceptedSubmissions / TotalSubmissions * 100 : 0;\n    public int CurrentStreak { get; set; }\n    public int LongestStreak { get; set; }\n    public Dictionary<string, int> LanguageStats { get; set; } = new();\n}\n\n// Commands and Queries (CQRS)\npublic class RegisterUserCommand : IRequest<Result<AuthenticationResult>>\n{\n    public string Email { get; set; } = string.Empty;\n    public string Username { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n}\n\npublic class LoginUserCommand : IRequest<Result<AuthenticationResult>>\n{\n    public string EmailOrUsername { get; set; } = string.Empty;\n    public string Password { get; set; } = string.Empty;\n    public bool RememberMe { get; set; } = false;\n}\n\n// Command Handlers\npublic class RegisterUserCommandHandler : IRequestHandler<RegisterUserCommand, Result<AuthenticationResult>>\n{\n    private readonly IUserRepository _userRepository;\n    private readonly IPasswordHasher _passwordHasher;\n    private readonly IJwtTokenGenerator _tokenGenerator;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IValidator<RegisterUserCommand> _validator;\n\n    public async Task<Result<AuthenticationResult>> Handle(RegisterUserCommand request, CancellationToken cancellationToken)\n    {\n        // 1. Validate input\n        var validationResult = await _validator.ValidateAsync(request, cancellationToken);\n        if (!validationResult.IsValid)\n            return Result<AuthenticationResult>.Failure(validationResult.Errors.First().ErrorMessage);\n\n        // 2. Check if user already exists\n        var existingUser = await _userRepository.GetByEmailOrUsernameAsync(request.Email, request.Username);\n        if (existingUser != null)\n            return Result<AuthenticationResult>.Failure(\"User already exists with this email or username\");\n\n        // 3. Create user\n        var user = new User\n        {\n            Email = request.Email.ToLowerInvariant(),\n            Username = request.Username,\n            PasswordHash = _passwordHasher.HashPassword(request.Password),\n            Profile = new UserProfile\n            {\n                FirstName = request.FirstName,\n                LastName = request.LastName\n            }\n        };\n\n        await _userRepository.CreateAsync(user);\n\n        // 4. Generate tokens\n        var authResult = await _tokenGenerator.GenerateTokensAsync(user);\n\n        // 5. Publish event\n        await _eventPublisher.PublishAsync(\"user-registered\", new UserRegisteredEvent\n        {\n            UserId = user.Id,\n            Email = user.Email,\n            Username = user.Username,\n            RegisteredAt = user.CreatedAt\n        });\n\n        return Result<AuthenticationResult>.Success(authResult);\n    }\n}\n\n// Repository Interface and Implementation\npublic interface IUserRepository : IRepository<User>\n{\n    Task<User?> GetByEmailAsync(string email);\n    Task<User?> GetByUsernameAsync(string username);\n    Task<User?> GetByEmailOrUsernameAsync(string email, string username);\n    Task<User?> GetByRefreshTokenAsync(string refreshToken);\n    Task UpdateStatisticsAsync(string userId, UserStatistics statistics);\n}\n\npublic class UserRepository : MongoRepository<User>, IUserRepository\n{\n    public UserRepository(IMongoClient mongoClient, IConfiguration configuration) \n        : base(mongoClient, configuration.GetValue<string>(\"MongoDb:DatabaseName\"), \"users\")\n    {\n    }\n\n    public async Task<User?> GetByEmailAsync(string email)\n    {\n        return await Collection.Find(u => u.Email == email.ToLowerInvariant()).FirstOrDefaultAsync();\n    }\n\n    public async Task<User?> GetByUsernameAsync(string username)\n    {\n        return await Collection.Find(u => u.Username == username).FirstOrDefaultAsync();\n    }\n\n    public async Task<User?> GetByEmailOrUsernameAsync(string email, string username)\n    {\n        return await Collection.Find(u => u.Email == email.ToLowerInvariant() || u.Username == username).FirstOrDefaultAsync();\n    }\n\n    public async Task<User?> GetByRefreshTokenAsync(string refreshToken)\n    {\n        return await Collection.Find(u => u.RefreshTokens.Contains(refreshToken)).FirstOrDefaultAsync();\n    }\n\n    public async Task UpdateStatisticsAsync(string userId, UserStatistics statistics)\n    {\n        var update = Builders<User>.Update.Set(u => u.Profile.Statistics, statistics);\n        await Collection.UpdateOneAsync(u => u.Id == userId, update);\n    }\n}\n\n// JWT Token Generator\npublic interface IJwtTokenGenerator\n{\n    Task<AuthenticationResult> GenerateTokensAsync(User user);\n    ClaimsPrincipal? ValidateToken(string token);\n    Task<AuthenticationResult?> RefreshTokenAsync(string refreshToken);\n}\n\npublic class JwtTokenGenerator : IJwtTokenGenerator\n{\n    private readonly JwtSettings _jwtSettings;\n    private readonly IUserRepository _userRepository;\n\n    public async Task<AuthenticationResult> GenerateTokensAsync(User user)\n    {\n        var claims = new[]\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id),\n            new Claim(ClaimTypes.Email, user.Email),\n            new Claim(ClaimTypes.Name, user.Username),\n            new Claim(ClaimTypes.Role, user.Role.ToString()),\n            new Claim(\"subscription\", user.Subscription.ToString())\n        };\n\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtSettings.SecretKey));\n        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var accessToken = new JwtSecurityToken(\n            issuer: _jwtSettings.Issuer,\n            audience: _jwtSettings.Audience,\n            claims: claims,\n            expires: DateTime.UtcNow.AddMinutes(_jwtSettings.AccessTokenExpirationMinutes),\n            signingCredentials: credentials\n        );\n\n        var refreshToken = GenerateRefreshToken();\n        \n        // Store refresh token\n        user.RefreshTokens.Add(refreshToken);\n        await _userRepository.UpdateAsync(user);\n\n        return new AuthenticationResult\n        {\n            AccessToken = new JwtSecurityTokenHandler().WriteToken(accessToken),\n            RefreshToken = refreshToken,\n            ExpiresAt = accessToken.ValidTo,\n            User = new UserDto\n            {\n                Id = user.Id,\n                Email = user.Email,\n                Username = user.Username,\n                Role = user.Role.ToString(),\n                Subscription = user.Subscription.ToString(),\n                Profile = user.Profile\n            }\n        };\n    }\n\n    private string GenerateRefreshToken()\n    {\n        var randomBytes = new byte[32];\n        using var rng = RandomNumberGenerator.Create();\n        rng.GetBytes(randomBytes);\n        return Convert.ToBase64String(randomBytes);\n    }\n}\n```\n\n### 2. Problem Management Service (DSAGrind.Problems.API)\n\n#### Class Structure\n```csharp\n// Domain Models\npublic class Problem\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Title { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public ProblemDifficulty Difficulty { get; set; }\n    public List<string> Tags { get; set; } = new();\n    public List<TestCase> TestCases { get; set; } = new();\n    public List<Example> Examples { get; set; } = new();\n    public ProblemConstraints Constraints { get; set; } = new();\n    public ProblemStatistics Statistics { get; set; } = new();\n    public string CreatedBy { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    public bool IsActive { get; set; } = true;\n    public bool IsPremium { get; set; } = false;\n    public List<string> SupportedLanguages { get; set; } = new() { \"csharp\", \"python\", \"java\", \"cpp\", \"javascript\" };\n}\n\npublic class TestCase\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Input { get; set; } = string.Empty;\n    public string ExpectedOutput { get; set; } = string.Empty;\n    public bool IsHidden { get; set; } = true;\n    public int TimeLimit { get; set; } = 1000; // milliseconds\n    public int MemoryLimit { get; set; } = 128; // MB\n}\n\npublic class Example\n{\n    public string Input { get; set; } = string.Empty;\n    public string Output { get; set; } = string.Empty;\n    public string? Explanation { get; set; }\n}\n\npublic class ProblemConstraints\n{\n    public string TimeComplexity { get; set; } = string.Empty;\n    public string SpaceComplexity { get; set; } = string.Empty;\n    public string InputConstraints { get; set; } = string.Empty;\n    public int MaxExecutionTime { get; set; } = 5000; // milliseconds\n    public int MaxMemoryUsage { get; set; } = 256; // MB\n}\n\npublic class ProblemStatistics\n{\n    public int TotalSubmissions { get; set; }\n    public int AcceptedSubmissions { get; set; }\n    public decimal AcceptanceRate => TotalSubmissions > 0 ? (decimal)AcceptedSubmissions / TotalSubmissions * 100 : 0;\n    public Dictionary<string, int> LanguageStats { get; set; } = new();\n    public Dictionary<ProblemDifficulty, int> DifficultyDistribution { get; set; } = new();\n}\n\n// Commands and Queries\npublic class GetProblemsQuery : IRequest<Result<PaginatedResult<ProblemDto>>>\n{\n    public int Page { get; set; } = 1;\n    public int PageSize { get; set; } = 20;\n    public ProblemDifficulty? Difficulty { get; set; }\n    public List<string> Tags { get; set; } = new();\n    public string? SearchTerm { get; set; }\n    public bool IncludePremium { get; set; } = false;\n    public ProblemSortBy SortBy { get; set; } = ProblemSortBy.CreatedAt;\n    public SortDirection SortDirection { get; set; } = SortDirection.Desc;\n}\n\npublic class GetProblemByIdQuery : IRequest<Result<ProblemDetailDto>>\n{\n    public string ProblemId { get; set; } = string.Empty;\n    public string? UserId { get; set; }\n}\n\n// Query Handlers\npublic class GetProblemsQueryHandler : IRequestHandler<GetProblemsQuery, Result<PaginatedResult<ProblemDto>>>\n{\n    private readonly IProblemRepository _problemRepository;\n    private readonly ICacheService _cacheService;\n    private readonly IMapper _mapper;\n\n    public async Task<Result<PaginatedResult<ProblemDto>>> Handle(GetProblemsQuery request, CancellationToken cancellationToken)\n    {\n        // 1. Generate cache key\n        var cacheKey = GenerateCacheKey(request);\n        \n        // 2. Check cache\n        var cachedResult = await _cacheService.GetAsync<PaginatedResult<ProblemDto>>(cacheKey);\n        if (cachedResult != null)\n            return Result<PaginatedResult<ProblemDto>>.Success(cachedResult);\n\n        // 3. Build filter\n        var filter = BuildFilter(request);\n\n        // 4. Get total count\n        var totalCount = await _problemRepository.CountAsync(filter);\n\n        // 5. Get problems\n        var problems = await _problemRepository.GetPaginatedAsync(filter, request.Page, request.PageSize, request.SortBy, request.SortDirection);\n\n        // 6. Map to DTOs\n        var problemDtos = _mapper.Map<List<ProblemDto>>(problems);\n\n        var result = new PaginatedResult<ProblemDto>\n        {\n            Data = problemDtos,\n            TotalCount = totalCount,\n            Page = request.Page,\n            PageSize = request.PageSize,\n            TotalPages = (int)Math.Ceiling((double)totalCount / request.PageSize)\n        };\n\n        // 7. Cache result\n        await _cacheService.SetAsync(cacheKey, result, TimeSpan.FromMinutes(15));\n\n        return Result<PaginatedResult<ProblemDto>>.Success(result);\n    }\n\n    private FilterDefinition<Problem> BuildFilter(GetProblemsQuery request)\n    {\n        var builder = Builders<Problem>.Filter;\n        var filters = new List<FilterDefinition<Problem>>();\n\n        // Active problems only\n        filters.Add(builder.Eq(p => p.IsActive, true));\n\n        // Difficulty filter\n        if (request.Difficulty.HasValue)\n            filters.Add(builder.Eq(p => p.Difficulty, request.Difficulty.Value));\n\n        // Tags filter\n        if (request.Tags.Any())\n            filters.Add(builder.AnyIn(p => p.Tags, request.Tags));\n\n        // Search term filter\n        if (!string.IsNullOrEmpty(request.SearchTerm))\n        {\n            var searchFilter = builder.Or(\n                builder.Regex(p => p.Title, new BsonRegularExpression(request.SearchTerm, \"i\")),\n                builder.Regex(p => p.Description, new BsonRegularExpression(request.SearchTerm, \"i\"))\n            );\n            filters.Add(searchFilter);\n        }\n\n        // Premium filter\n        if (!request.IncludePremium)\n            filters.Add(builder.Eq(p => p.IsPremium, false));\n\n        return filters.Any() ? builder.And(filters) : builder.Empty;\n    }\n}\n\n// Repository\npublic interface IProblemRepository : IRepository<Problem>\n{\n    Task<List<Problem>> GetPaginatedAsync(FilterDefinition<Problem> filter, int page, int pageSize, ProblemSortBy sortBy, SortDirection sortDirection);\n    Task<long> CountAsync(FilterDefinition<Problem> filter);\n    Task<List<Problem>> GetByTagsAsync(List<string> tags);\n    Task<List<Problem>> GetRandomProblemsAsync(int count, ProblemDifficulty? difficulty = null);\n    Task UpdateStatisticsAsync(string problemId, ProblemStatistics statistics);\n}\n\npublic class ProblemRepository : MongoRepository<Problem>, IProblemRepository\n{\n    public async Task<List<Problem>> GetPaginatedAsync(FilterDefinition<Problem> filter, int page, int pageSize, ProblemSortBy sortBy, SortDirection sortDirection)\n    {\n        var sortDefinition = BuildSortDefinition(sortBy, sortDirection);\n        \n        return await Collection\n            .Find(filter)\n            .Sort(sortDefinition)\n            .Skip((page - 1) * pageSize)\n            .Limit(pageSize)\n            .ToListAsync();\n    }\n\n    public async Task<long> CountAsync(FilterDefinition<Problem> filter)\n    {\n        return await Collection.CountDocumentsAsync(filter);\n    }\n\n    private SortDefinition<Problem> BuildSortDefinition(ProblemSortBy sortBy, SortDirection sortDirection)\n    {\n        var builder = Builders<Problem>.Sort;\n        \n        return sortBy switch\n        {\n            ProblemSortBy.Title => sortDirection == SortDirection.Asc ? builder.Ascending(p => p.Title) : builder.Descending(p => p.Title),\n            ProblemSortBy.Difficulty => sortDirection == SortDirection.Asc ? builder.Ascending(p => p.Difficulty) : builder.Descending(p => p.Difficulty),\n            ProblemSortBy.AcceptanceRate => sortDirection == SortDirection.Asc ? builder.Ascending(p => p.Statistics.AcceptanceRate) : builder.Descending(p => p.Statistics.AcceptanceRate),\n            ProblemSortBy.CreatedAt => sortDirection == SortDirection.Asc ? builder.Ascending(p => p.CreatedAt) : builder.Descending(p => p.CreatedAt),\n            _ => builder.Descending(p => p.CreatedAt)\n        };\n    }\n}\n```\n\n### 3. Code Submission Service (DSAGrind.Submissions.API)\n\n#### Class Structure\n```csharp\n// Domain Models\npublic class Submission\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n    public SubmissionStatus Status { get; set; } = SubmissionStatus.Pending;\n    public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? CompletedAt { get; set; }\n    public ExecutionResult? Result { get; set; }\n    public List<TestCaseResult> TestResults { get; set; } = new();\n    public string? ErrorMessage { get; set; }\n    public SubmissionMetrics Metrics { get; set; } = new();\n}\n\npublic class ExecutionResult\n{\n    public bool Success { get; set; }\n    public TimeSpan ExecutionTime { get; set; }\n    public long MemoryUsed { get; set; } // bytes\n    public string Output { get; set; } = string.Empty;\n    public string? ErrorOutput { get; set; }\n    public int ExitCode { get; set; }\n}\n\npublic class TestCaseResult\n{\n    public string TestCaseId { get; set; } = string.Empty;\n    public bool Passed { get; set; }\n    public string ActualOutput { get; set; } = string.Empty;\n    public string ExpectedOutput { get; set; } = string.Empty;\n    public TimeSpan ExecutionTime { get; set; }\n    public long MemoryUsed { get; set; }\n    public string? ErrorMessage { get; set; }\n}\n\npublic class SubmissionMetrics\n{\n    public TimeSpan TotalExecutionTime { get; set; }\n    public long MaxMemoryUsed { get; set; }\n    public int PassedTestCases { get; set; }\n    public int TotalTestCases { get; set; }\n    public decimal PassRate => TotalTestCases > 0 ? (decimal)PassedTestCases / TotalTestCases * 100 : 0;\n}\n\n// Commands\npublic class SubmitSolutionCommand : IRequest<Result<SubmissionResult>>\n{\n    public string UserId { get; set; } = string.Empty;\n    public string ProblemId { get; set; } = string.Empty;\n    public string Code { get; set; } = string.Empty;\n    public string Language { get; set; } = string.Empty;\n}\n\n// Command Handler\npublic class SubmitSolutionCommandHandler : IRequestHandler<SubmitSolutionCommand, Result<SubmissionResult>>\n{\n    private readonly ISubmissionRepository _submissionRepository;\n    private readonly IProblemRepository _problemRepository;\n    private readonly IDockerExecutionService _executionService;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IValidator<SubmitSolutionCommand> _validator;\n\n    public async Task<Result<SubmissionResult>> Handle(SubmitSolutionCommand request, CancellationToken cancellationToken)\n    {\n        // 1. Validate input\n        var validationResult = await _validator.ValidateAsync(request, cancellationToken);\n        if (!validationResult.IsValid)\n            return Result<SubmissionResult>.Failure(validationResult.Errors.First().ErrorMessage);\n\n        // 2. Get problem\n        var problem = await _problemRepository.GetByIdAsync(request.ProblemId);\n        if (problem == null)\n            return Result<SubmissionResult>.Failure(\"Problem not found\");\n\n        // 3. Check language support\n        if (!problem.SupportedLanguages.Contains(request.Language))\n            return Result<SubmissionResult>.Failure($\"Language {request.Language} is not supported for this problem\");\n\n        // 4. Create submission record\n        var submission = new Submission\n        {\n            UserId = request.UserId,\n            ProblemId = request.ProblemId,\n            Code = request.Code,\n            Language = request.Language,\n            Status = SubmissionStatus.Pending\n        };\n\n        await _submissionRepository.CreateAsync(submission);\n\n        // 5. Start asynchronous execution\n        _ = Task.Run(async () => await ExecuteSubmissionAsync(submission, problem), cancellationToken);\n\n        return Result<SubmissionResult>.Success(new SubmissionResult\n        {\n            SubmissionId = submission.Id,\n            Status = submission.Status,\n            Message = \"Submission received and is being processed\"\n        });\n    }\n\n    private async Task ExecuteSubmissionAsync(Submission submission, Problem problem)\n    {\n        try\n        {\n            submission.Status = SubmissionStatus.Running;\n            await _submissionRepository.UpdateAsync(submission);\n\n            var testResults = new List<TestCaseResult>();\n            var totalExecutionTime = TimeSpan.Zero;\n            long maxMemoryUsed = 0;\n\n            // Execute each test case\n            foreach (var testCase in problem.TestCases)\n            {\n                var executionResult = await _executionService.ExecuteCodeAsync(\n                    submission.Code,\n                    submission.Language,\n                    testCase.Input,\n                    testCase.TimeLimit,\n                    testCase.MemoryLimit\n                );\n\n                var testResult = new TestCaseResult\n                {\n                    TestCaseId = testCase.Id,\n                    ActualOutput = executionResult.Output.Trim(),\n                    ExpectedOutput = testCase.ExpectedOutput.Trim(),\n                    ExecutionTime = executionResult.ExecutionTime,\n                    MemoryUsed = executionResult.MemoryUsed,\n                    ErrorMessage = executionResult.ErrorOutput\n                };\n\n                testResult.Passed = string.Equals(testResult.ActualOutput, testResult.ExpectedOutput, StringComparison.OrdinalIgnoreCase);\n                testResults.Add(testResult);\n\n                totalExecutionTime += executionResult.ExecutionTime;\n                maxMemoryUsed = Math.Max(maxMemoryUsed, executionResult.MemoryUsed);\n\n                // Stop on first failure for efficiency\n                if (!testResult.Passed && !testCase.IsHidden)\n                {\n                    break;\n                }\n            }\n\n            // Determine final status\n            var passedCount = testResults.Count(tr => tr.Passed);\n            var totalCount = testResults.Count;\n\n            submission.Status = passedCount == problem.TestCases.Count ? SubmissionStatus.Accepted : \n                              totalCount == 0 ? SubmissionStatus.RuntimeError : SubmissionStatus.WrongAnswer;\n\n            submission.TestResults = testResults;\n            submission.Metrics = new SubmissionMetrics\n            {\n                TotalExecutionTime = totalExecutionTime,\n                MaxMemoryUsed = maxMemoryUsed,\n                PassedTestCases = passedCount,\n                TotalTestCases = totalCount\n            };\n\n            submission.CompletedAt = DateTime.UtcNow;\n            await _submissionRepository.UpdateAsync(submission);\n\n            // Publish completion event\n            await _eventPublisher.PublishAsync(\"submission-completed\", new SubmissionCompletedEvent\n            {\n                SubmissionId = submission.Id,\n                UserId = submission.UserId,\n                ProblemId = submission.ProblemId,\n                Status = submission.Status,\n                ExecutionTime = totalExecutionTime,\n                MemoryUsed = maxMemoryUsed,\n                CompletedAt = submission.CompletedAt.Value\n            });\n        }\n        catch (Exception ex)\n        {\n            submission.Status = SubmissionStatus.RuntimeError;\n            submission.ErrorMessage = \"Internal execution error\";\n            submission.CompletedAt = DateTime.UtcNow;\n            await _submissionRepository.UpdateAsync(submission);\n        }\n    }\n}\n\n// Docker Execution Service\npublic interface IDockerExecutionService\n{\n    Task<ExecutionResult> ExecuteCodeAsync(string code, string language, string input, int timeLimit, int memoryLimit);\n}\n\npublic class DockerExecutionService : IDockerExecutionService\n{\n    private readonly DockerClient _dockerClient;\n    private readonly ILogger<DockerExecutionService> _logger;\n\n    public async Task<ExecutionResult> ExecuteCodeAsync(string code, string language, string input, int timeLimit, int memoryLimit)\n    {\n        var containerId = string.Empty;\n        \n        try\n        {\n            // 1. Create container configuration\n            var containerConfig = new CreateContainerParameters\n            {\n                Image = GetImageForLanguage(language),\n                Cmd = GetExecutionCommand(code, language),\n                WorkingDir = \"/app\",\n                NetworkMode = \"none\", // No network access\n                User = \"nobody:nobody\", // Non-privileged user\n                Env = new[] { $\"INPUT={input}\" },\n                HostConfig = new HostConfig\n                {\n                    Memory = memoryLimit * 1024 * 1024, // Convert MB to bytes\n                    CpuQuota = 50000, // 50% CPU limit\n                    ReadonlyRootfs = true, // Read-only filesystem\n                    SecurityOpt = new[] { \"no-new-privileges\" },\n                    Tmpfs = new Dictionary<string, string> { { \"/tmp\", \"rw,noexec,nosuid,size=100m\" } }\n                }\n            };\n\n            // 2. Create and start container\n            var container = await _dockerClient.Containers.CreateContainerAsync(containerConfig);\n            containerId = container.ID;\n\n            var startTime = DateTime.UtcNow;\n            await _dockerClient.Containers.StartContainerAsync(containerId, new ContainerStartParameters());\n\n            // 3. Wait for completion with timeout\n            var waitResult = await _dockerClient.Containers.WaitContainerAsync(\n                containerId, \n                CancellationToken.None\n            ).WaitAsync(TimeSpan.FromMilliseconds(timeLimit));\n\n            var endTime = DateTime.UtcNow;\n            var executionTime = endTime - startTime;\n\n            // 4. Get container stats for memory usage\n            var stats = await _dockerClient.Containers.GetContainerStatsAsync(containerId, new ContainerStatsParameters\n            {\n                OneShot = true\n            });\n\n            // 5. Get logs\n            var logs = await _dockerClient.Containers.GetContainerLogsAsync(containerId, new ContainerLogsParameters\n            {\n                ShowStdout = true,\n                ShowStderr = true,\n                Timestamps = false\n            });\n\n            var (stdout, stderr) = ParseContainerLogs(logs);\n\n            return new ExecutionResult\n            {\n                Success = waitResult.StatusCode == 0,\n                ExecutionTime = executionTime,\n                MemoryUsed = GetMemoryUsageFromStats(stats),\n                Output = stdout,\n                ErrorOutput = stderr,\n                ExitCode = (int)waitResult.StatusCode\n            };\n        }\n        catch (TimeoutException)\n        {\n            return new ExecutionResult\n            {\n                Success = false,\n                ExecutionTime = TimeSpan.FromMilliseconds(timeLimit),\n                Output = string.Empty,\n                ErrorOutput = \"Time Limit Exceeded\",\n                ExitCode = -1\n            };\n        }\n        finally\n        {\n            // Cleanup container\n            if (!string.IsNullOrEmpty(containerId))\n            {\n                try\n                {\n                    await _dockerClient.Containers.RemoveContainerAsync(containerId, new ContainerRemoveParameters\n                    {\n                        Force = true\n                    });\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogWarning(ex, \"Failed to remove container {ContainerId}\", containerId);\n                }\n            }\n        }\n    }\n\n    private string GetImageForLanguage(string language)\n    {\n        return language.ToLowerInvariant() switch\n        {\n            \"csharp\" => \"mcr.microsoft.com/dotnet/runtime:8.0-alpine\",\n            \"python\" => \"python:3.11-alpine\",\n            \"java\" => \"openjdk:17-alpine\",\n            \"cpp\" => \"gcc:latest\",\n            \"javascript\" => \"node:18-alpine\",\n            _ => throw new NotSupportedException($\"Language {language} is not supported\")\n        };\n    }\n\n    private List<string> GetExecutionCommand(string code, string language)\n    {\n        return language.ToLowerInvariant() switch\n        {\n            \"csharp\" => new List<string> { \"sh\", \"-c\", $\"echo '{code}' > Program.cs && dotnet new console -f net8.0 && cp Program.cs . && dotnet run\" },\n            \"python\" => new List<string> { \"python\", \"-c\", code },\n            \"java\" => new List<string> { \"sh\", \"-c\", $\"echo '{code}' > Main.java && javac Main.java && java Main\" },\n            \"cpp\" => new List<string> { \"sh\", \"-c\", $\"echo '{code}' > main.cpp && g++ -o main main.cpp && ./main\" },\n            \"javascript\" => new List<string> { \"node\", \"-e\", code },\n            _ => throw new NotSupportedException($\"Language {language} is not supported\")\n        };\n    }\n\n    private (string stdout, string stderr) ParseContainerLogs(Stream logStream)\n    {\n        var stdout = new StringBuilder();\n        var stderr = new StringBuilder();\n\n        using var reader = new StreamReader(logStream);\n        string? line;\n        while ((line = reader.ReadLine()) != null)\n        {\n            // Docker log format: [8 bytes header][payload]\n            // First byte indicates stream type: 1=stdout, 2=stderr\n            if (line.Length > 8)\n            {\n                var streamType = line[0];\n                var content = line.Substring(8);\n                \n                if (streamType == 1)\n                    stdout.AppendLine(content);\n                else if (streamType == 2)\n                    stderr.AppendLine(content);\n            }\n        }\n\n        return (stdout.ToString().Trim(), stderr.ToString().Trim());\n    }\n\n    private long GetMemoryUsageFromStats(ContainerStatsResponse stats)\n    {\n        return stats.MemoryStats?.Usage ?? 0;\n    }\n}\n```\n\n---\n\n## 💾 Database Schema Design\n\n### MongoDB Collections\n\n#### Users Collection\n```javascript\n{\n  _id: ObjectId(\"...\"),\n  id: \"user-uuid\",\n  email: \"user@example.com\",\n  username: \"johndoe\",\n  passwordHash: \"hashed-password\",\n  role: \"User\", // User, Premium, Admin\n  subscription: \"Free\", // Free, Premium, Enterprise\n  createdAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  lastLoginAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  isEmailVerified: true,\n  profile: {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    bio: \"Software Engineer\",\n    profileImageUrl: \"https://...\",\n    country: \"US\",\n    dateOfBirth: ISODate(\"1990-01-01T00:00:00Z\"),\n    preferredLanguages: [\"csharp\", \"python\"],\n    statistics: {\n      totalSubmissions: 150,\n      acceptedSubmissions: 120,\n      easyProblemsCompleted: 50,\n      mediumProblemsCompleted: 40,\n      hardProblemsCompleted: 10,\n      currentStreak: 5,\n      longestStreak: 15,\n      languageStats: {\n        \"csharp\": 80,\n        \"python\": 70\n      }\n    }\n  },\n  refreshTokens: [\"token1\", \"token2\"]\n}\n\n// Indexes\ndb.users.createIndex({ \"email\": 1 }, { unique: true })\ndb.users.createIndex({ \"username\": 1 }, { unique: true })\ndb.users.createIndex({ \"refreshTokens\": 1 })\ndb.users.createIndex({ \"profile.statistics.acceptedSubmissions\": -1 })\n```\n\n#### Problems Collection\n```javascript\n{\n  _id: ObjectId(\"...\"),\n  id: \"problem-uuid\",\n  title: \"Two Sum\",\n  description: \"Given an array of integers...\",\n  difficulty: \"Easy\", // Easy, Medium, Hard\n  tags: [\"array\", \"hash-table\"],\n  testCases: [\n    {\n      id: \"testcase-uuid\",\n      input: \"[2,7,11,15]\\n9\",\n      expectedOutput: \"[0,1]\",\n      isHidden: false,\n      timeLimit: 1000,\n      memoryLimit: 128\n    }\n  ],\n  examples: [\n    {\n      input: \"[2,7,11,15], target = 9\",\n      output: \"[0,1]\",\n      explanation: \"Because nums[0] + nums[1] == 9...\"\n    }\n  ],\n  constraints: {\n    timeComplexity: \"O(n)\",\n    spaceComplexity: \"O(n)\",\n    inputConstraints: \"2 <= nums.length <= 10^4\",\n    maxExecutionTime: 5000,\n    maxMemoryUsage: 256\n  },\n  statistics: {\n    totalSubmissions: 1000,\n    acceptedSubmissions: 600,\n    languageStats: {\n      \"csharp\": 300,\n      \"python\": 400,\n      \"java\": 300\n    }\n  },\n  createdBy: \"admin-user-id\",\n  createdAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  updatedAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  isActive: true,\n  isPremium: false,\n  supportedLanguages: [\"csharp\", \"python\", \"java\", \"cpp\", \"javascript\"]\n}\n\n// Indexes\ndb.problems.createIndex({ \"difficulty\": 1, \"tags\": 1 })\ndb.problems.createIndex({ \"createdAt\": -1 })\ndb.problems.createIndex({ \"statistics.acceptanceRate\": -1 })\ndb.problems.createIndex({ \"isActive\": 1, \"isPremium\": 1 })\ndb.problems.createIndex({ \"title\": \"text\", \"description\": \"text\" })\n```\n\n#### Submissions Collection\n```javascript\n{\n  _id: ObjectId(\"...\"),\n  id: \"submission-uuid\",\n  userId: \"user-uuid\",\n  problemId: \"problem-uuid\",\n  code: \"public class Solution { ... }\",\n  language: \"csharp\",\n  status: \"Accepted\", // Pending, Running, Accepted, WrongAnswer, RuntimeError, TimeLimitExceeded\n  submittedAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  completedAt: ISODate(\"2024-01-01T00:00:00Z\"),\n  result: {\n    success: true,\n    executionTime: NumberLong(150), // milliseconds\n    memoryUsed: NumberLong(1048576), // bytes\n    output: \"Expected output\",\n    errorOutput: null,\n    exitCode: 0\n  },\n  testResults: [\n    {\n      testCaseId: \"testcase-uuid\",\n      passed: true,\n      actualOutput: \"[0,1]\",\n      expectedOutput: \"[0,1]\",\n      executionTime: NumberLong(50),\n      memoryUsed: NumberLong(524288),\n      errorMessage: null\n    }\n  ],\n  metrics: {\n    totalExecutionTime: NumberLong(150),\n    maxMemoryUsed: NumberLong(1048576),\n    passedTestCases: 5,\n    totalTestCases: 5\n  },\n  errorMessage: null\n}\n\n// Indexes\ndb.submissions.createIndex({ \"userId\": 1, \"submittedAt\": -1 })\ndb.submissions.createIndex({ \"problemId\": 1, \"status\": 1 })\ndb.submissions.createIndex({ \"submittedAt\": -1 })\ndb.submissions.createIndex({ \"userId\": 1, \"problemId\": 1, \"submittedAt\": -1 })\n```\n\n---\n\n## 🔌 API Endpoint Specifications\n\n### Authentication API Endpoints\n\n#### POST /api/auth/register\n```http\nPOST /api/auth/register\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"username\": \"johndoe\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}\n\nResponse 201 Created:\n{\n  \"success\": true,\n  \"data\": {\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"secure-refresh-token\",\n    \"expiresAt\": \"2024-01-01T01:00:00Z\",\n    \"user\": {\n      \"id\": \"user-uuid\",\n      \"email\": \"user@example.com\",\n      \"username\": \"johndoe\",\n      \"role\": \"User\",\n      \"subscription\": \"Free\",\n      \"profile\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"statistics\": {\n          \"totalSubmissions\": 0,\n          \"acceptedSubmissions\": 0,\n          \"acceptanceRate\": 0\n        }\n      }\n    }\n  }\n}\n\nResponse 400 Bad Request:\n{\n  \"success\": false,\n  \"error\": \"User already exists with this email or username\",\n  \"validationErrors\": []\n}\n```\n\n#### POST /api/auth/login\n```http\nPOST /api/auth/login\nContent-Type: application/json\n\n{\n  \"emailOrUsername\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"rememberMe\": true\n}\n\nResponse 200 OK:\n{\n  \"success\": true,\n  \"data\": {\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"secure-refresh-token\",\n    \"expiresAt\": \"2024-01-01T01:00:00Z\",\n    \"user\": { /* user object */ }\n  }\n}\n\nResponse 401 Unauthorized:\n{\n  \"success\": false,\n  \"error\": \"Invalid credentials\"\n}\n```\n\n### Problems API Endpoints\n\n#### GET /api/problems\n```http\nGET /api/problems?page=1&pageSize=20&difficulty=Medium&tags=array,hash-table&searchTerm=two%20sum&sortBy=AcceptanceRate&sortDirection=desc\nAuthorization: Bearer <access-token>\n\nResponse 200 OK:\n{\n  \"success\": true,\n  \"data\": {\n    \"data\": [\n      {\n        \"id\": \"problem-uuid\",\n        \"title\": \"Two Sum\",\n        \"difficulty\": \"Easy\",\n        \"tags\": [\"array\", \"hash-table\"],\n        \"statistics\": {\n          \"totalSubmissions\": 1000,\n          \"acceptedSubmissions\": 600,\n          \"acceptanceRate\": 60.0\n        },\n        \"isPremium\": false\n      }\n    ],\n    \"totalCount\": 150,\n    \"page\": 1,\n    \"pageSize\": 20,\n    \"totalPages\": 8\n  }\n}\n```\n\n#### GET /api/problems/{id}\n```http\nGET /api/problems/problem-uuid\nAuthorization: Bearer <access-token>\n\nResponse 200 OK:\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"problem-uuid\",\n    \"title\": \"Two Sum\",\n    \"description\": \"Given an array of integers and a target...\",\n    \"difficulty\": \"Easy\",\n    \"tags\": [\"array\", \"hash-table\"],\n    \"examples\": [\n      {\n        \"input\": \"[2,7,11,15], target = 9\",\n        \"output\": \"[0,1]\",\n        \"explanation\": \"Because nums[0] + nums[1] == 9...\"\n      }\n    ],\n    \"constraints\": {\n      \"timeComplexity\": \"O(n)\",\n      \"spaceComplexity\": \"O(n)\",\n      \"inputConstraints\": \"2 <= nums.length <= 10^4\"\n    },\n    \"supportedLanguages\": [\"csharp\", \"python\", \"java\"],\n    \"statistics\": {\n      \"totalSubmissions\": 1000,\n      \"acceptedSubmissions\": 600,\n      \"acceptanceRate\": 60.0\n    },\n    \"userProgress\": {\n      \"hasAttempted\": true,\n      \"isCompleted\": false,\n      \"bestSubmission\": {\n        \"status\": \"WrongAnswer\",\n        \"submittedAt\": \"2024-01-01T00:00:00Z\"\n      }\n    }\n  }\n}\n```\n\n### Submissions API Endpoints\n\n#### POST /api/submissions\n```http\nPOST /api/submissions\nAuthorization: Bearer <access-token>\nContent-Type: application/json\n\n{\n  \"problemId\": \"problem-uuid\",\n  \"code\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        // solution code\\n    }\\n}\",\n  \"language\": \"csharp\"\n}\n\nResponse 202 Accepted:\n{\n  \"success\": true,\n  \"data\": {\n    \"submissionId\": \"submission-uuid\",\n    \"status\": \"Pending\",\n    \"message\": \"Submission received and is being processed\"\n  }\n}\n\nResponse 400 Bad Request:\n{\n  \"success\": false,\n  \"error\": \"Language csharp is not supported for this problem\"\n}\n```\n\n#### GET /api/submissions/{id}\n```http\nGET /api/submissions/submission-uuid\nAuthorization: Bearer <access-token>\n\nResponse 200 OK:\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"submission-uuid\",\n    \"problemId\": \"problem-uuid\",\n    \"problemTitle\": \"Two Sum\",\n    \"code\": \"public class Solution { ... }\",\n    \"language\": \"csharp\",\n    \"status\": \"Accepted\",\n    \"submittedAt\": \"2024-01-01T00:00:00Z\",\n    \"completedAt\": \"2024-01-01T00:00:05Z\",\n    \"metrics\": {\n      \"totalExecutionTime\": 150,\n      \"maxMemoryUsed\": 1048576,\n      \"passedTestCases\": 5,\n      \"totalTestCases\": 5,\n      \"passRate\": 100.0\n    },\n    \"testResults\": [\n      {\n        \"testCaseId\": \"testcase-uuid\",\n        \"passed\": true,\n        \"actualOutput\": \"[0,1]\",\n        \"expectedOutput\": \"[0,1]\",\n        \"executionTime\": 50,\n        \"memoryUsed\": 524288,\n        \"isHidden\": false\n      }\n    ]\n  }\n}\n```\n\n---\n\n## 🔐 Security Implementation Details\n\n### JWT Token Implementation\n```csharp\npublic class JwtSettings\n{\n    public string SecretKey { get; set; } = string.Empty;\n    public string Issuer { get; set; } = string.Empty;\n    public string Audience { get; set; } = string.Empty;\n    public int AccessTokenExpirationMinutes { get; set; } = 15;\n    public int RefreshTokenExpirationDays { get; set; } = 30;\n}\n\npublic class TokenValidationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IJwtTokenGenerator _tokenGenerator;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var authHeader = context.Request.Headers[\"Authorization\"].FirstOrDefault();\n        \n        if (authHeader != null && authHeader.StartsWith(\"Bearer \"))\n        {\n            var token = authHeader.Substring(\"Bearer \".Length).Trim();\n            var principal = _tokenGenerator.ValidateToken(token);\n            \n            if (principal != null)\n            {\n                context.User = principal;\n            }\n        }\n\n        await _next(context);\n    }\n}\n```\n\n### Input Validation\n```csharp\npublic class RegisterUserCommandValidator : AbstractValidator<RegisterUserCommand>\n{\n    public RegisterUserCommandValidator()\n    {\n        RuleFor(x => x.Email)\n            .NotEmpty().WithMessage(\"Email is required\")\n            .EmailAddress().WithMessage(\"Valid email address is required\")\n            .MaximumLength(255).WithMessage(\"Email must not exceed 255 characters\");\n\n        RuleFor(x => x.Username)\n            .NotEmpty().WithMessage(\"Username is required\")\n            .MinimumLength(3).WithMessage(\"Username must be at least 3 characters\")\n            .MaximumLength(50).WithMessage(\"Username must not exceed 50 characters\")\n            .Matches(@\"^[a-zA-Z0-9_]+$\").WithMessage(\"Username can only contain letters, numbers, and underscores\");\n\n        RuleFor(x => x.Password)\n            .NotEmpty().WithMessage(\"Password is required\")\n            .MinimumLength(8).WithMessage(\"Password must be at least 8 characters\")\n            .Matches(@\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]\")\n            .WithMessage(\"Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character\");\n    }\n}\n```\n\n### Code Execution Security\n```csharp\npublic class SecureDockerExecutionService : IDockerExecutionService\n{\n    private readonly Dictionary<string, string> _secureImages = new()\n    {\n        [\"csharp\"] = \"dsagrind/dotnet-secure:8.0\",\n        [\"python\"] = \"dsagrind/python-secure:3.11\",\n        [\"java\"] = \"dsagrind/java-secure:17\"\n    };\n\n    private CreateContainerParameters CreateSecureContainer(string language, string code, string input)\n    {\n        return new CreateContainerParameters\n        {\n            Image = _secureImages[language],\n            Cmd = GetSecureExecutionCommand(language),\n            NetworkMode = \"none\", // No network access\n            User = \"runner:runner\", // Non-privileged user\n            Env = new[] \n            { \n                $\"CODE={Convert.ToBase64String(Encoding.UTF8.GetBytes(code))}\",\n                $\"INPUT={Convert.ToBase64String(Encoding.UTF8.GetBytes(input))}\"\n            },\n            HostConfig = new HostConfig\n            {\n                Memory = 128 * 1024 * 1024, // 128MB limit\n                CpuQuota = 50000, // 50% CPU\n                CpuPeriod = 100000,\n                PidsLimit = 64, // Process limit\n                ReadonlyRootfs = true,\n                SecurityOpt = new[] \n                { \n                    \"no-new-privileges\",\n                    \"seccomp:unconfined\" // Restricted system calls\n                },\n                Tmpfs = new Dictionary<string, string> \n                { \n                    { \"/tmp\", \"rw,noexec,nosuid,size=50m\" },\n                    { \"/var/tmp\", \"rw,noexec,nosuid,size=50m\" }\n                },\n                Ulimits = new List<Ulimit>\n                {\n                    new() { Name = \"nproc\", Soft = 32, Hard = 32 }, // Process limit\n                    new() { Name = \"nofile\", Soft = 64, Hard = 64 } // File descriptor limit\n                }\n            }\n        };\n    }\n\n    private List<string> GetSecureExecutionCommand(string language)\n    {\n        return new List<string> \n        { \n            \"/secure-runner.sh\", // Custom secure execution script\n            language \n        };\n    }\n}\n```\n\nThis Low-Level Design provides comprehensive implementation details for building the DSAGrind platform, covering all major components with actual code implementations, database schemas, API specifications, and security measures.","size_bytes":44553},"MICROSERVICES_PACKAGE_REQUIREMENTS.md":{"content":"# DSAGrind Microservices Package Requirements\n\n## Overview\nThis document provides a comprehensive list of packages required for each microservice and shared library in the DSAGrind platform after the migration from Kafka to RabbitMQ.\n\n## Shared Libraries\n\n### DSAGrind.Common\n**Core infrastructure and shared services**\n```xml\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Abstractions\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Options\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Http\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Diagnostics.HealthChecks\" Version=\"8.0.0\" />\n<PackageReference Include=\"AspNetCore.HealthChecks.MongoDb\" Version=\"7.0.0\" />\n<PackageReference Include=\"Microsoft.IdentityModel.Tokens\" Version=\"7.3.1\" />\n<PackageReference Include=\"Qdrant.Client\" Version=\"1.15.1\" />\n<PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"7.3.1\" />\n<PackageReference Include=\"MongoDB.Bson\" Version=\"3.0.0\" />\n<PackageReference Include=\"MongoDB.Driver\" Version=\"3.0.0\" />\n<PackageReference Include=\"RabbitMQ.Client\" Version=\"6.8.1\" />\n<PackageReference Include=\"StackExchange.Redis\" Version=\"2.7.10\" />\n<PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" />\n```\n\n### DSAGrind.Models\n**Domain models and DTOs**\n```xml\n<PackageReference Include=\"MongoDB.Bson\" Version=\"3.0.0\" />\n<PackageReference Include=\"System.ComponentModel.Annotations\" Version=\"5.0.0\" />\n```\n\n### DSAGrind.Events\n**Event definitions for RabbitMQ messaging**\n```xml\n<PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" />\n```\n\n## Microservices\n\n### DSAGrind.Gateway.API\n**API Gateway using YARP reverse proxy**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"YARP.ReverseProxy\" Version=\"2.1.0\" />\n```\n\n### DSAGrind.Auth.API\n**Authentication and authorization service**\n```xml\n<PackageReference Include=\"AspNetCore.HealthChecks.MongoDb\" Version=\"9.0.0\" />\n<PackageReference Include=\"AspNetCore.HealthChecks.Redis\" Version=\"9.0.0\" />\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"MongoDB.Driver\" Version=\"3.0.0\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"BCrypt.Net-Next\" Version=\"4.0.3\" />\n<PackageReference Include=\"Microsoft.Extensions.Caching.StackExchangeRedis\" Version=\"8.0.1\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n```\n\n### DSAGrind.Problems.API\n**Problem management service**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"MongoDB.Bson\" Version=\"3.0.0\" />\n<PackageReference Include=\"MongoDB.Driver\" Version=\"3.0.0\" />\n```\n\n### DSAGrind.Submissions.API\n**Code submission and execution service**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"Docker.DotNet\" Version=\"3.125.15\" />\n```\n\n### DSAGrind.Payments.API\n**Payment processing with Stripe integration**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"Stripe.net\" Version=\"43.0.0\" />\n```\n\n### DSAGrind.Search.API\n**Vector search using Qdrant**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"Qdrant.Client\" Version=\"1.15.1\" />\n```\n\n### DSAGrind.AI.API\n**AI integration with OpenAI and Semantic Kernel**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"Microsoft.SemanticKernel\" Version=\"1.0.1\" />\n<PackageReference Include=\"OpenAI\" Version=\"1.11.0\" />\n```\n\n### DSAGrind.Admin.API\n**Administrative management service**\n```xml\n<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.1\" />\n<PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.1\" />\n<PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.1\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n<PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n<PackageReference Include=\"MediatR\" Version=\"12.2.0\" />\n<PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n<PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.1\" />\n<PackageReference Include=\"MongoDB.Bson\" Version=\"3.0.0\" />\n<PackageReference Include=\"MongoDB.Driver\" Version=\"3.0.0\" />\n```\n\n## Frontend (React TypeScript)\n\n### Client Dependencies\n```json\n{\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"wouter\": \"^3.0.0\",\n    \"@tanstack/react-query\": \"^5.17.0\",\n    \"@radix-ui/react-*\": \"Latest compatible versions\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.0.0\",\n    \"tailwind-merge\": \"^2.2.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"lucide-react\": \"^0.307.0\",\n    \"embla-carousel-react\": \"^8.0.0\",\n    \"embla-carousel-autoplay\": \"^8.0.0\",\n    \"vaul\": \"^0.8.0\",\n    \"cmdk\": \"^0.2.0\",\n    \"input-otp\": \"^1.2.4\",\n    \"next-themes\": \"^0.2.1\",\n    \"recharts\": \"^2.10.3\",\n    \"monaco-editor\": \"^0.45.0\",\n    \"@monaco-editor/react\": \"^4.6.0\",\n    \"axios\": \"^1.6.5\",\n    \"react-hook-form\": \"^7.48.2\",\n    \"@hookform/resolvers\": \"^3.3.2\",\n    \"zod\": \"^3.22.4\",\n    \"date-fns\": \"^3.2.0\",\n    \"react-day-picker\": \"^8.10.0\",\n    \"sonner\": \"^1.3.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.43\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\n    \"@typescript-eslint/parser\": \"^6.14.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"typescript\": \"^5.2.2\",\n    \"vite\": \"^5.0.8\",\n    \"eslint\": \"^8.55.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\n    \"tailwindcss\": \"^3.4.0\",\n    \"postcss\": \"^8.4.32\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"vitest\": \"^1.1.0\",\n    \"@vitest/ui\": \"^1.1.0\"\n  }\n}\n```\n\n## Database and Infrastructure\n\n### MongoDB Atlas\n- **Primary Database**: Document storage with flexible schema\n- **Connection**: MongoDB.Driver Version 3.0.0\n- **Health Checks**: AspNetCore.HealthChecks.MongoDb\n\n### RabbitMQ (CloudAMQP)\n- **Message Broker**: Event-driven communication\n- **Connection**: RabbitMQ.Client Version 6.8.1\n- **Configuration**: CloudAMQP connection string\n\n### Redis Cloud\n- **Caching**: Session management and query caching\n- **Connection**: StackExchange.Redis Version 2.7.10\n- **Health Checks**: AspNetCore.HealthChecks.Redis\n\n### Qdrant\n- **Vector Database**: Semantic search capabilities\n- **Connection**: Qdrant.Client Version 1.15.1\n- **Usage**: DSAGrind.Search.API and DSAGrind.Common\n\n## External Services\n\n### Stripe\n- **Payment Processing**: Subscription management\n- **Package**: Stripe.net Version 43.0.0\n- **Service**: DSAGrind.Payments.API\n\n### OpenAI\n- **AI Integration**: Code analysis and hints\n- **Package**: OpenAI Version 1.11.0\n- **Service**: DSAGrind.AI.API\n\n### Microsoft Semantic Kernel\n- **AI Orchestration**: Advanced AI capabilities\n- **Package**: Microsoft.SemanticKernel Version 1.0.1\n- **Service**: DSAGrind.AI.API\n\n### Docker\n- **Code Execution**: Sandboxed environment\n- **Package**: Docker.DotNet Version 3.125.15\n- **Service**: DSAGrind.Submissions.API\n\n## Installation Commands\n\n### Backend (.NET 8)\n```bash\n# Install all packages for each microservice\ndotnet restore backend/src/Shared/DSAGrind.Common/DSAGrind.Common.csproj\ndotnet restore backend/src/Shared/DSAGrind.Models/DSAGrind.Models.csproj\ndotnet restore backend/src/Shared/DSAGrind.Events/DSAGrind.Events.csproj\ndotnet restore backend/src/Services/DSAGrind.Gateway.API/DSAGrind.Gateway.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Auth.API/DSAGrind.Auth.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Problems.API/DSAGrind.Problems.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Submissions.API/DSAGrind.Submissions.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Payments.API/DSAGrind.Payments.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Search.API/DSAGrind.Search.API.csproj\ndotnet restore backend/src/Services/DSAGrind.AI.API/DSAGrind.AI.API.csproj\ndotnet restore backend/src/Services/DSAGrind.Admin.API/DSAGrind.Admin.API.csproj\n```\n\n### Frontend (Node.js 20)\n```bash\n# Install root dependencies\nnpm install\n\n# Install client dependencies  \ncd client && npm install\n```\n\n## Migration Notes\n\n### Kafka to RabbitMQ Migration\n- **Original Kafka implementation**: Preserved as commented code\n- **New RabbitMQ implementation**: Drop-in replacement maintaining same interfaces\n- **Topics/Queues**: Same topic names maintained for compatibility\n- **Event Types**: All existing event types preserved\n- **Configuration**: New RabbitMQSettings replaces KafkaSettings\n\n### Preserved Technologies\n- **MongoDB**: Primary database unchanged\n- **Redis**: Caching layer unchanged  \n- **Qdrant**: Vector search capabilities unchanged\n- **All microservice functionality**: Preserved and unmodified\n- **All external integrations**: Stripe, OpenAI, Docker execution unchanged\n- **Frontend stack**: React, TypeScript, Vite unchanged\n\nThis migration ensures zero functional changes while moving from Kafka to RabbitMQ for improved cloud compatibility and simplified deployment.","size_bytes":13964},"SECURITY_DESIGN.md":{"content":"# DSAGrind Platform - Security Design Documentation\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: Comprehensive Security Architecture and Implementation\n- **Security Framework**: Zero Trust Architecture with Defense in Depth\n\n---\n\n## 🎯 Security Overview\n\n### Security Philosophy\nDSAGrind implements a **Zero Trust Security Model** with multiple layers of protection:\n- **Assume Breach**: Every component validates and verifies\n- **Least Privilege**: Minimal access rights for users and services\n- **Defense in Depth**: Multiple security layers at every level\n- **Continuous Monitoring**: Real-time threat detection and response\n- **Privacy by Design**: Data protection built into every feature\n\n### Security Domains\n```\nSecurity Architecture:\n├── Identity & Access Management (IAM)\n├── Application Security\n├── Data Protection & Privacy\n├── Infrastructure Security\n├── Code Execution Security\n├── Network Security\n├── Monitoring & Incident Response\n└── Compliance & Governance\n```\n\n---\n\n## 🔐 Identity & Access Management\n\n### Authentication Architecture\n\n#### Multi-Factor Authentication (MFA)\n```csharp\npublic class MultiFactorAuthenticationService\n{\n    public async Task<AuthenticationResult> AuthenticateAsync(LoginRequest request)\n    {\n        // Step 1: Primary authentication (password)\n        var primaryAuth = await ValidatePrimaryCredentials(request.EmailOrUsername, request.Password);\n        if (!primaryAuth.IsValid)\n            return AuthenticationResult.Failed(\"Invalid credentials\");\n\n        // Step 2: Check if MFA is required\n        var user = primaryAuth.User;\n        if (user.IsMfaEnabled || IsHighRiskLogin(request))\n        {\n            var mfaChallenge = await CreateMfaChallenge(user);\n            return AuthenticationResult.RequiresMfa(mfaChallenge);\n        }\n\n        // Step 3: Risk-based authentication\n        var riskAssessment = await AssessLoginRisk(user, request);\n        if (riskAssessment.RiskLevel == RiskLevel.High)\n        {\n            await TriggerAdditionalVerification(user, request);\n            return AuthenticationResult.RequiresAdditionalVerification();\n        }\n\n        // Step 4: Generate secure tokens\n        var tokens = await GenerateSecureTokens(user, request);\n        await LogSuccessfulLogin(user, request);\n\n        return AuthenticationResult.Success(user, tokens);\n    }\n\n    private async Task<MfaChallenge> CreateMfaChallenge(User user)\n    {\n        var availableMethods = new List<MfaMethod>();\n\n        // TOTP (Time-based One-Time Password)\n        if (user.MfaSettings.TotpEnabled)\n            availableMethods.Add(MfaMethod.Totp);\n\n        // SMS (for backup)\n        if (user.MfaSettings.SmsEnabled && !string.IsNullOrEmpty(user.PhoneNumber))\n            availableMethods.Add(MfaMethod.Sms);\n\n        // Hardware Security Keys (FIDO2/WebAuthn)\n        if (user.MfaSettings.SecurityKeys.Any())\n            availableMethods.Add(MfaMethod.SecurityKey);\n\n        // Backup codes\n        if (user.MfaSettings.BackupCodes.Any(c => !c.IsUsed))\n            availableMethods.Add(MfaMethod.BackupCode);\n\n        return new MfaChallenge\n        {\n            ChallengeId = Guid.NewGuid().ToString(),\n            AvailableMethods = availableMethods,\n            ExpiresAt = DateTime.UtcNow.AddMinutes(5)\n        };\n    }\n}\n\n// Risk Assessment Engine\npublic class LoginRiskAssessment\n{\n    public async Task<RiskAssessment> AssessLoginRisk(User user, LoginRequest request)\n    {\n        var factors = new List<RiskFactor>();\n\n        // Geographic risk\n        var location = await _geoLocationService.GetLocationAsync(request.IpAddress);\n        if (!user.LoginHistory.Any(h => h.Country == location.Country))\n            factors.Add(new RiskFactor(\"new_country\", RiskLevel.Medium));\n\n        // Device fingerprinting\n        var deviceId = await _deviceFingerprintService.GetDeviceIdAsync(request.UserAgent, request.Fingerprint);\n        if (!user.KnownDevices.Any(d => d.DeviceId == deviceId))\n            factors.Add(new RiskFactor(\"new_device\", RiskLevel.Medium));\n\n        // Time-based analysis\n        var currentHour = DateTime.UtcNow.Hour;\n        var userTypicalHours = user.LoginHistory.Select(h => h.Timestamp.Hour).ToList();\n        if (!userTypicalHours.Contains(currentHour) && userTypicalHours.Any())\n            factors.Add(new RiskFactor(\"unusual_time\", RiskLevel.Low));\n\n        // Velocity checks\n        var recentLogins = user.LoginHistory.Where(h => h.Timestamp > DateTime.UtcNow.AddMinutes(-5));\n        if (recentLogins.Count() > 3)\n            factors.Add(new RiskFactor(\"rapid_attempts\", RiskLevel.High));\n\n        // IP reputation\n        var ipReputation = await _threatIntelligenceService.CheckIpReputationAsync(request.IpAddress);\n        if (ipReputation.IsMalicious)\n            factors.Add(new RiskFactor(\"malicious_ip\", RiskLevel.High));\n\n        return new RiskAssessment\n        {\n            RiskLevel = CalculateOverallRisk(factors),\n            Factors = factors,\n            Confidence = 0.85f\n        };\n    }\n}\n```\n\n#### JWT Token Security\n```csharp\npublic class SecureJwtTokenGenerator : IJwtTokenGenerator\n{\n    private readonly JwtSecurityTokenHandler _tokenHandler;\n    private readonly ISecretRotationService _secretRotationService;\n    private readonly ITokenBlacklistService _blacklistService;\n\n    public async Task<TokenResponse> GenerateTokensAsync(User user, DeviceInfo deviceInfo)\n    {\n        // Use rotating secrets for enhanced security\n        var currentSecret = await _secretRotationService.GetCurrentSecretAsync();\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(currentSecret.Value));\n        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        // Generate unique JTI (JWT ID) for token tracking\n        var jti = Guid.NewGuid().ToString();\n\n        var claims = new[]\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, user.Id),\n            new Claim(JwtRegisteredClaimNames.Email, user.Email),\n            new Claim(JwtRegisteredClaimNames.Jti, jti),\n            new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64),\n            new Claim(\"username\", user.Username),\n            new Claim(\"role\", user.Role.ToString()),\n            new Claim(\"subscription\", user.Subscription.Type.ToString()),\n            new Claim(\"device_id\", deviceInfo.DeviceId),\n            new Claim(\"session_id\", deviceInfo.SessionId)\n        };\n\n        // Short-lived access token (15 minutes)\n        var accessToken = new JwtSecurityToken(\n            issuer: _jwtSettings.Issuer,\n            audience: _jwtSettings.Audience,\n            claims: claims,\n            expires: DateTime.UtcNow.AddMinutes(15),\n            signingCredentials: credentials\n        );\n\n        // Longer-lived refresh token (30 days) with additional security\n        var refreshToken = await GenerateSecureRefreshToken(user.Id, deviceInfo, jti);\n\n        // Store token metadata for security monitoring\n        await StoreTokenMetadata(new TokenMetadata\n        {\n            Jti = jti,\n            UserId = user.Id,\n            DeviceId = deviceInfo.DeviceId,\n            IpAddress = deviceInfo.IpAddress,\n            IssuedAt = DateTime.UtcNow,\n            ExpiresAt = accessToken.ValidTo,\n            TokenType = \"access\"\n        });\n\n        return new TokenResponse\n        {\n            AccessToken = _tokenHandler.WriteToken(accessToken),\n            RefreshToken = refreshToken,\n            ExpiresAt = accessToken.ValidTo,\n            TokenType = \"Bearer\"\n        };\n    }\n\n    public async Task<ClaimsPrincipal> ValidateTokenAsync(string token)\n    {\n        try\n        {\n            // Check token blacklist first\n            var jti = ExtractJti(token);\n            if (await _blacklistService.IsBlacklistedAsync(jti))\n                throw new SecurityTokenValidationException(\"Token has been revoked\");\n\n            // Get current and previous secrets for key rotation\n            var secrets = await _secretRotationService.GetValidSecretsAsync();\n            SecurityToken validatedToken = null;\n            ClaimsPrincipal principal = null;\n\n            foreach (var secret in secrets)\n            {\n                try\n                {\n                    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret.Value));\n                    var validationParameters = new TokenValidationParameters\n                    {\n                        ValidateIssuerSigningKey = true,\n                        IssuerSigningKey = key,\n                        ValidateIssuer = true,\n                        ValidIssuer = _jwtSettings.Issuer,\n                        ValidateAudience = true,\n                        ValidAudience = _jwtSettings.Audience,\n                        ValidateLifetime = true,\n                        ClockSkew = TimeSpan.FromMinutes(1),\n                        RequireExpirationTime = true\n                    };\n\n                    principal = _tokenHandler.ValidateToken(token, validationParameters, out validatedToken);\n                    break; // Successfully validated\n                }\n                catch (SecurityTokenException)\n                {\n                    continue; // Try next secret\n                }\n            }\n\n            if (principal == null)\n                throw new SecurityTokenValidationException(\"Invalid token signature\");\n\n            // Additional security checks\n            await PerformAdditionalTokenValidation(principal, validatedToken as JwtSecurityToken);\n\n            return principal;\n        }\n        catch (Exception ex)\n        {\n            await LogSecurityEvent(\"token_validation_failed\", new { token = MaskToken(token), error = ex.Message });\n            throw;\n        }\n    }\n\n    private async Task PerformAdditionalTokenValidation(ClaimsPrincipal principal, JwtSecurityToken jwt)\n    {\n        var jti = principal.FindFirst(JwtRegisteredClaimNames.Jti)?.Value;\n        var deviceId = principal.FindFirst(\"device_id\")?.Value;\n\n        // Check if token is still valid in our database\n        var tokenMetadata = await GetTokenMetadata(jti);\n        if (tokenMetadata == null || tokenMetadata.IsRevoked)\n            throw new SecurityTokenValidationException(\"Token has been revoked\");\n\n        // Validate device binding\n        if (tokenMetadata.DeviceId != deviceId)\n            throw new SecurityTokenValidationException(\"Token device mismatch\");\n\n        // Check for concurrent session limits\n        var userActiveSessions = await GetActiveSessionCount(tokenMetadata.UserId);\n        if (userActiveSessions > _securitySettings.MaxConcurrentSessions)\n        {\n            await RevokeOldestSession(tokenMetadata.UserId);\n        }\n    }\n}\n```\n\n### Authorization Framework\n\n#### Role-Based Access Control (RBAC)\n```csharp\npublic enum UserRole\n{\n    User = 1,\n    Premium = 2,\n    Moderator = 4,\n    ContentCreator = 8,\n    Admin = 16,\n    SuperAdmin = 32\n}\n\npublic enum Permission\n{\n    // Problem permissions\n    ViewBasicProblems = 1,\n    ViewPremiumProblems = 2,\n    CreateProblems = 4,\n    EditProblems = 8,\n    DeleteProblems = 16,\n    \n    // Submission permissions\n    SubmitSolutions = 32,\n    ViewOwnSubmissions = 64,\n    ViewAllSubmissions = 128,\n    \n    // Contest permissions\n    ParticipateContests = 256,\n    CreateContests = 512,\n    ModerateContests = 1024,\n    \n    // User management\n    ViewUserProfiles = 2048,\n    EditUserProfiles = 4096,\n    BanUsers = 8192,\n    \n    // Analytics and reporting\n    ViewBasicAnalytics = 16384,\n    ViewAdvancedAnalytics = 32768,\n    ViewSystemAnalytics = 65536\n}\n\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)]\npublic class RequirePermissionAttribute : Attribute, IAuthorizationRequirement\n{\n    public Permission[] Permissions { get; }\n    public bool RequireAll { get; set; } = false;\n\n    public RequirePermissionAttribute(params Permission[] permissions)\n    {\n        Permissions = permissions;\n    }\n}\n\npublic class PermissionAuthorizationHandler : AuthorizationHandler<RequirePermissionAttribute>\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        RequirePermissionAttribute requirement)\n    {\n        var user = context.User;\n        if (!user.Identity.IsAuthenticated)\n        {\n            context.Fail();\n            return Task.CompletedTask;\n        }\n\n        var userRole = Enum.Parse<UserRole>(user.FindFirst(\"role\")?.Value ?? \"User\");\n        var userPermissions = GetPermissionsForRole(userRole);\n\n        var hasPermission = requirement.RequireAll\n            ? requirement.Permissions.All(p => userPermissions.HasFlag(p))\n            : requirement.Permissions.Any(p => userPermissions.HasFlag(p));\n\n        if (hasPermission)\n            context.Succeed(requirement);\n        else\n            context.Fail();\n\n        return Task.CompletedTask;\n    }\n\n    private Permission GetPermissionsForRole(UserRole role)\n    {\n        return role switch\n        {\n            UserRole.User => Permission.ViewBasicProblems | Permission.SubmitSolutions | Permission.ViewOwnSubmissions | Permission.ViewUserProfiles | Permission.ViewBasicAnalytics,\n            \n            UserRole.Premium => GetPermissionsForRole(UserRole.User) | Permission.ViewPremiumProblems | Permission.ParticipateContests,\n            \n            UserRole.Moderator => GetPermissionsForRole(UserRole.Premium) | Permission.ModerateContests | Permission.ViewAllSubmissions | Permission.EditUserProfiles,\n            \n            UserRole.ContentCreator => GetPermissionsForRole(UserRole.Premium) | Permission.CreateProblems | Permission.EditProblems | Permission.CreateContests,\n            \n            UserRole.Admin => GetPermissionsForRole(UserRole.ContentCreator) | GetPermissionsForRole(UserRole.Moderator) | Permission.DeleteProblems | Permission.BanUsers | Permission.ViewAdvancedAnalytics,\n            \n            UserRole.SuperAdmin => (Permission)(-1), // All permissions\n            \n            _ => Permission.ViewBasicProblems\n        };\n    }\n}\n\n// Usage in controllers\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class ProblemsController : ControllerBase\n{\n    [HttpGet(\"{id}\")]\n    [RequirePermission(Permission.ViewBasicProblems)]\n    public async Task<IActionResult> GetProblem(string id)\n    {\n        var problem = await _problemService.GetByIdAsync(id);\n        \n        // Additional permission check for premium problems\n        if (problem.IsPremium)\n        {\n            var userRole = Enum.Parse<UserRole>(User.FindFirst(\"role\")?.Value ?? \"User\");\n            var permissions = GetPermissionsForRole(userRole);\n            \n            if (!permissions.HasFlag(Permission.ViewPremiumProblems))\n                return Forbid(\"Premium subscription required\");\n        }\n        \n        return Ok(problem);\n    }\n\n    [HttpPost]\n    [RequirePermission(Permission.CreateProblems)]\n    public async Task<IActionResult> CreateProblem([FromBody] CreateProblemRequest request)\n    {\n        // Implementation\n    }\n}\n```\n\n---\n\n## 🛡️ Application Security\n\n### Input Validation & Sanitization\n\n#### Comprehensive Input Validation\n```csharp\npublic class SecurityValidationService\n{\n    private readonly ILogger<SecurityValidationService> _logger;\n    private readonly IConfiguration _configuration;\n\n    public ValidationResult ValidateUserInput(string input, InputType type, ValidationContext context)\n    {\n        var result = new ValidationResult();\n\n        // Basic sanitization\n        input = SanitizeInput(input, type);\n\n        // Length validation\n        if (!ValidateLength(input, type))\n        {\n            result.AddError(\"Input length exceeds allowed limits\");\n            return result;\n        }\n\n        // XSS prevention\n        if (ContainsPotentialXss(input))\n        {\n            result.AddError(\"Input contains potentially malicious content\");\n            await LogSecurityThreat(\"xss_attempt\", context, input);\n            return result;\n        }\n\n        // SQL injection prevention\n        if (ContainsPotentialSqlInjection(input))\n        {\n            result.AddError(\"Input contains potentially malicious SQL patterns\");\n            await LogSecurityThreat(\"sql_injection_attempt\", context, input);\n            return result;\n        }\n\n        // Code injection prevention (for code submissions)\n        if (type == InputType.Code && ContainsPotentialCodeInjection(input))\n        {\n            result.AddError(\"Code contains potentially dangerous operations\");\n            await LogSecurityThreat(\"code_injection_attempt\", context, input);\n            return result;\n        }\n\n        // Custom validation rules based on input type\n        switch (type)\n        {\n            case InputType.Email:\n                result = ValidateEmail(input);\n                break;\n            case InputType.Username:\n                result = ValidateUsername(input);\n                break;\n            case InputType.Code:\n                result = ValidateCodeSubmission(input, context);\n                break;\n            case InputType.ProblemDescription:\n                result = ValidateProblemDescription(input);\n                break;\n        }\n\n        return result;\n    }\n\n    private string SanitizeInput(string input, InputType type)\n    {\n        if (string.IsNullOrEmpty(input))\n            return input;\n\n        return type switch\n        {\n            InputType.Html => AntiXss.HtmlEncode(input),\n            InputType.PlainText => input.Trim(),\n            InputType.Code => input, // Don't sanitize code submissions\n            InputType.Email => input.Trim().ToLowerInvariant(),\n            InputType.Username => Regex.Replace(input.Trim(), @\"[^\\w\\d_.-]\", \"\"),\n            _ => AntiXss.HtmlEncode(input.Trim())\n        };\n    }\n\n    private bool ContainsPotentialXss(string input)\n    {\n        var xssPatterns = new[]\n        {\n            @\"<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>\",\n            @\"javascript:\",\n            @\"vbscript:\",\n            @\"onload\\s*=\",\n            @\"onerror\\s*=\",\n            @\"onclick\\s*=\",\n            @\"<iframe\\b\",\n            @\"<object\\b\",\n            @\"<embed\\b\"\n        };\n\n        return xssPatterns.Any(pattern => \n            Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline));\n    }\n\n    private bool ContainsPotentialSqlInjection(string input)\n    {\n        var sqlPatterns = new[]\n        {\n            @\"(\\b(ALTER|CREATE|DELETE|DROP|EXEC(UTE)?|INSERT( +INTO)?|MERGE|SELECT|UPDATE|UNION( +ALL)?)\\b)\",\n            @\"(\\b(AND|OR)\\b.*(=|>|<|\\bLIKE\\b).*(\\b(AND|OR)\\b|\\-\\-|\\#))\",\n            @\"(\\bEXEC\\b(\\s|\\+)+(S|X)P\\w+)\",\n            @\"(\\bSP_\\w+)\"\n        };\n\n        return sqlPatterns.Any(pattern => \n            Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline));\n    }\n\n    private bool ContainsPotentialCodeInjection(string input)\n    {\n        var dangerousPatterns = new[]\n        {\n            @\"\\bexec\\s*\\(\",           // exec() function calls\n            @\"\\beval\\s*\\(\",           // eval() function calls\n            @\"\\bsystem\\s*\\(\",         // system() calls\n            @\"\\bshell_exec\\s*\\(\",     // shell execution\n            @\"\\bpassthru\\s*\\(\",       // passthru calls\n            @\"\\bfile_get_contents\\s*\\(\",  // file access\n            @\"\\bfopen\\s*\\(\",          // file operations\n            @\"\\b__import__\\s*\\(\",     // Python import\n            @\"\\bos\\.\",                // OS module access\n            @\"\\bsubprocess\\.\",        // subprocess module\n            @\"\\bRuntime\\.getRuntime\", // Java runtime\n            @\"\\bProcess\\.\",           // Process class\n            @\"\\bProcessBuilder\\.\",    // ProcessBuilder\n            @\"import\\s+os\",           // OS import\n            @\"from\\s+os\\s+import\",    // OS import variations\n        };\n\n        return dangerousPatterns.Any(pattern => \n            Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline));\n    }\n\n    private ValidationResult ValidateCodeSubmission(string code, ValidationContext context)\n    {\n        var result = new ValidationResult();\n\n        // Check code length limits\n        if (code.Length > _configuration.GetValue<int>(\"Security:MaxCodeLength\", 10000))\n        {\n            result.AddError(\"Code submission exceeds maximum length\");\n            return result;\n        }\n\n        // Language-specific validation\n        var language = context.Language?.ToLowerInvariant();\n        switch (language)\n        {\n            case \"csharp\":\n                result = ValidateCSharpCode(code);\n                break;\n            case \"python\":\n                result = ValidatePythonCode(code);\n                break;\n            case \"java\":\n                result = ValidateJavaCode(code);\n                break;\n            case \"cpp\":\n                result = ValidateCppCode(code);\n                break;\n        }\n\n        return result;\n    }\n\n    private ValidationResult ValidateCSharpCode(string code)\n    {\n        var result = new ValidationResult();\n        var dangerousNamespaces = new[]\n        {\n            \"System.IO\",\n            \"System.Net\",\n            \"System.Diagnostics\",\n            \"System.Management\",\n            \"System.Runtime.InteropServices\",\n            \"System.Security\",\n            \"System.Web\"\n        };\n\n        foreach (var ns in dangerousNamespaces)\n        {\n            if (code.Contains($\"using {ns}\") || code.Contains($\"System.{ns.Split('.').Last()}\"))\n            {\n                result.AddError($\"Usage of {ns} namespace is not allowed\");\n            }\n        }\n\n        return result;\n    }\n}\n```\n\n### Rate Limiting & DDoS Protection\n\n#### Advanced Rate Limiting\n```csharp\npublic class AdvancedRateLimitingService\n{\n    private readonly IDistributedCache _cache;\n    private readonly ILogger<AdvancedRateLimitingService> _logger;\n\n    public async Task<RateLimitResult> CheckRateLimitAsync(RateLimitRequest request)\n    {\n        var rules = await GetRateLimitRules(request.Endpoint, request.UserRole);\n        var results = new List<RateLimitCheckResult>();\n\n        foreach (var rule in rules)\n        {\n            var result = await CheckIndividualRule(request, rule);\n            results.Add(result);\n\n            if (!result.Allowed)\n            {\n                await LogRateLimitViolation(request, rule, result);\n                return new RateLimitResult\n                {\n                    Allowed = false,\n                    RetryAfter = result.RetryAfter,\n                    Rule = rule,\n                    RemainingRequests = 0\n                };\n            }\n        }\n\n        var mostRestrictive = results.OrderBy(r => r.RemainingRequests).First();\n        return new RateLimitResult\n        {\n            Allowed = true,\n            RemainingRequests = mostRestrictive.RemainingRequests,\n            ResetTime = mostRestrictive.ResetTime\n        };\n    }\n\n    private async Task<RateLimitCheckResult> CheckIndividualRule(RateLimitRequest request, RateLimitRule rule)\n    {\n        var key = GenerateRateLimitKey(request, rule);\n        var window = GetTimeWindow(rule.WindowSize);\n        var currentCount = await GetCurrentCount(key, window);\n\n        if (currentCount >= rule.MaxRequests)\n        {\n            return new RateLimitCheckResult\n            {\n                Allowed = false,\n                RetryAfter = window.End - DateTime.UtcNow,\n                RemainingRequests = 0,\n                ResetTime = window.End\n            };\n        }\n\n        // Increment counter\n        await IncrementCounter(key, window);\n\n        return new RateLimitCheckResult\n        {\n            Allowed = true,\n            RemainingRequests = rule.MaxRequests - currentCount - 1,\n            ResetTime = window.End\n        };\n    }\n\n    private string GenerateRateLimitKey(RateLimitRequest request, RateLimitRule rule)\n    {\n        return rule.Scope switch\n        {\n            RateLimitScope.Global => $\"rate_limit:global:{rule.Endpoint}:{rule.WindowSize}\",\n            RateLimitScope.PerUser => $\"rate_limit:user:{request.UserId}:{rule.Endpoint}:{rule.WindowSize}\",\n            RateLimitScope.PerIP => $\"rate_limit:ip:{request.IpAddress}:{rule.Endpoint}:{rule.WindowSize}\",\n            RateLimitScope.PerUserAndIP => $\"rate_limit:user_ip:{request.UserId}:{request.IpAddress}:{rule.Endpoint}:{rule.WindowSize}\",\n            _ => throw new ArgumentException($\"Unknown rate limit scope: {rule.Scope}\")\n        };\n    }\n\n    // Sliding window implementation\n    private async Task<int> GetCurrentCount(string key, TimeWindow window)\n    {\n        var script = @\"\n            local key = KEYS[1]\n            local window_start = ARGV[1]\n            local window_end = ARGV[2]\n            \n            -- Remove old entries\n            redis.call('ZREMRANGEBYSCORE', key, '-inf', window_start)\n            \n            -- Count current entries\n            return redis.call('ZCARD', key)\n        \";\n\n        var result = await _cache.ExecuteScriptAsync(script, \n            new[] { key }, \n            new[] { window.Start.Ticks.ToString(), window.End.Ticks.ToString() });\n\n        return (int)result;\n    }\n\n    private async Task IncrementCounter(string key, TimeWindow window)\n    {\n        var script = @\"\n            local key = KEYS[1]\n            local timestamp = ARGV[1]\n            local ttl = ARGV[2]\n            \n            -- Add current timestamp\n            redis.call('ZADD', key, timestamp, timestamp)\n            \n            -- Set expiration\n            redis.call('EXPIRE', key, ttl)\n        \";\n\n        await _cache.ExecuteScriptAsync(script,\n            new[] { key },\n            new[] { DateTime.UtcNow.Ticks.ToString(), window.Duration.TotalSeconds.ToString() });\n    }\n}\n\n// DDoS Protection Middleware\npublic class DDoSProtectionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly IMemoryCache _cache;\n    private readonly ILogger<DDoSProtectionMiddleware> _logger;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var clientIP = GetClientIP(context);\n        var requestFingerprint = GenerateRequestFingerprint(context);\n\n        // Check for suspicious patterns\n        if (await IsSuspiciousTraffic(clientIP, requestFingerprint))\n        {\n            await HandleSuspiciousRequest(context, clientIP);\n            return;\n        }\n\n        // Track request patterns\n        await TrackRequest(clientIP, requestFingerprint);\n\n        await _next(context);\n    }\n\n    private async Task<bool> IsSuspiciousTraffic(string clientIP, string fingerprint)\n    {\n        var checks = new[]\n        {\n            CheckRequestFrequency(clientIP),\n            CheckRequestPatterns(clientIP, fingerprint),\n            CheckRequestSize(fingerprint),\n            CheckGeographicAnomaly(clientIP),\n            CheckUserAgentPatterns(fingerprint)\n        };\n\n        var suspiciousCount = (await Task.WhenAll(checks)).Count(x => x);\n        return suspiciousCount >= 2; // Multiple suspicious indicators\n    }\n\n    private async Task<bool> CheckRequestFrequency(string clientIP)\n    {\n        var key = $\"request_freq:{clientIP}\";\n        var count = await GetRequestCount(key, TimeSpan.FromMinutes(1));\n        \n        // More than 100 requests per minute is suspicious\n        return count > 100;\n    }\n\n    private async Task<bool> CheckRequestPatterns(string clientIP, string fingerprint)\n    {\n        // Check for repeating patterns that might indicate automated attacks\n        var recentFingerprints = await GetRecentFingerprints(clientIP, TimeSpan.FromMinutes(5));\n        var uniqueFingerprints = recentFingerprints.Distinct().Count();\n        var totalFingerprints = recentFingerprints.Count();\n\n        // If more than 80% of requests have identical fingerprints, it's suspicious\n        return totalFingerprints > 10 && (double)uniqueFingerprints / totalFingerprints < 0.2;\n    }\n\n    private async Task HandleSuspiciousRequest(HttpContext context, string clientIP)\n    {\n        await LogSecurityEvent(\"ddos_protection_triggered\", new { \n            clientIP, \n            userAgent = context.Request.Headers[\"User-Agent\"].ToString(),\n            path = context.Request.Path,\n            method = context.Request.Method\n        });\n\n        // Implement progressive response:\n        // 1. Rate limiting\n        // 2. CAPTCHA challenge\n        // 3. Temporary IP blocking\n        // 4. Permanent blocking for repeated offenses\n\n        var blockDuration = await GetBlockDuration(clientIP);\n        if (blockDuration > TimeSpan.Zero)\n        {\n            context.Response.StatusCode = 429;\n            context.Response.Headers.Add(\"Retry-After\", blockDuration.TotalSeconds.ToString());\n            await context.Response.WriteAsync(\"Too many requests. Please try again later.\");\n            return;\n        }\n\n        // Challenge with CAPTCHA\n        await ChallengeWithCaptcha(context);\n    }\n}\n```\n\n---\n\n## 🔒 Code Execution Security\n\n### Sandboxed Execution Environment\n\n#### Secure Docker Container Configuration\n```csharp\npublic class SecureDockerExecutionService : ICodeExecutionService\n{\n    private readonly DockerClient _dockerClient;\n    private readonly ISecurityAuditService _auditService;\n\n    public async Task<ExecutionResult> ExecuteCodeSecurelyAsync(CodeExecutionRequest request)\n    {\n        // Pre-execution security checks\n        await ValidateCodeSecurity(request);\n        \n        var containerId = string.Empty;\n        try\n        {\n            // Create highly restricted container\n            var containerConfig = CreateSecureContainerConfig(request);\n            var container = await _dockerClient.Containers.CreateContainerAsync(containerConfig);\n            containerId = container.ID;\n\n            // Set up security monitoring\n            var monitoringTask = MonitorContainerSecurity(containerId);\n\n            // Execute with strict timeout\n            var executionTask = ExecuteInContainer(containerId, request);\n            var timeoutTask = Task.Delay(TimeSpan.FromSeconds(request.TimeLimit));\n\n            var completedTask = await Task.WhenAny(executionTask, timeoutTask, monitoringTask);\n\n            if (completedTask == timeoutTask)\n            {\n                await _auditService.LogSecurityEvent(\"execution_timeout\", new { containerId, request.UserId });\n                throw new TimeoutException(\"Code execution timed out\");\n            }\n\n            if (completedTask == monitoringTask)\n            {\n                await _auditService.LogSecurityEvent(\"security_violation_detected\", new { containerId, request.UserId });\n                throw new SecurityException(\"Security violation detected during execution\");\n            }\n\n            return await executionTask;\n        }\n        finally\n        {\n            // Always cleanup, even if execution fails\n            await CleanupContainer(containerId);\n        }\n    }\n\n    private CreateContainerParameters CreateSecureContainerConfig(CodeExecutionRequest request)\n    {\n        var config = new CreateContainerParameters\n        {\n            Image = GetSecureImageForLanguage(request.Language),\n            \n            // Security: No network access\n            NetworkMode = \"none\",\n            \n            // Security: Run as non-privileged user\n            User = \"runner:runner\", // UID 1000:1000\n            \n            // Security: Read-only root filesystem\n            HostConfig = new HostConfig\n            {\n                ReadonlyRootfs = true,\n                \n                // Resource limits\n                Memory = request.MemoryLimit * 1024 * 1024, // Convert MB to bytes\n                MemorySwap = request.MemoryLimit * 1024 * 1024, // No swap\n                CpuQuota = 50000, // 50% of one CPU\n                CpuPeriod = 100000,\n                \n                // Process limits\n                PidsLimit = 64,\n                \n                // Security options\n                SecurityOpt = new[]\n                {\n                    \"no-new-privileges\", // Prevent privilege escalation\n                    \"seccomp=unconfined\" // Use custom seccomp profile\n                },\n                \n                // Capabilities - drop all, add only essential ones\n                CapDrop = new[] { \"ALL\" },\n                CapAdd = new[] { \"DAC_OVERRIDE\" }, // Minimal required capabilities\n                \n                // Temporary filesystems (writable areas)\n                Tmpfs = new Dictionary<string, string>\n                {\n                    { \"/tmp\", \"rw,noexec,nosuid,size=50m\" },\n                    { \"/var/tmp\", \"rw,noexec,nosuid,size=10m\" },\n                    { \"/home/runner\", \"rw,noexec,nosuid,size=100m\" }\n                },\n                \n                // Resource monitoring\n                OomKillDisable = false, // Allow OOM killer\n                \n                // Ulimits for additional resource control\n                Ulimits = new List<Ulimit>\n                {\n                    new() { Name = \"nproc\", Soft = 32, Hard = 32 },     // Process limit\n                    new() { Name = \"nofile\", Soft = 64, Hard = 64 },   // File descriptor limit\n                    new() { Name = \"fsize\", Soft = 10485760, Hard = 10485760 }, // 10MB file size limit\n                    new() { Name = \"cpu\", Soft = 5, Hard = 5 }         // 5 seconds CPU time\n                }\n            },\n            \n            // Environment variables (minimal)\n            Env = new[]\n            {\n                \"HOME=/home/runner\",\n                \"USER=runner\",\n                \"PATH=/usr/local/bin:/usr/bin:/bin\",\n                $\"TIMEOUT={request.TimeLimit}\",\n                $\"LANG={request.Language}\"\n            },\n            \n            // Working directory\n            WorkingDir = \"/home/runner\",\n            \n            // Command to execute\n            Cmd = GetSecureExecutionCommand(request),\n            \n            // Labels for tracking\n            Labels = new Dictionary<string, string>\n            {\n                { \"dsagrind.execution.user\", request.UserId },\n                { \"dsagrind.execution.problem\", request.ProblemId },\n                { \"dsagrind.execution.language\", request.Language },\n                { \"dsagrind.security.level\", \"high\" }\n            }\n        };\n\n        return config;\n    }\n\n    private async Task<ExecutionResult> ExecuteInContainer(string containerId, CodeExecutionRequest request)\n    {\n        // Start the container\n        await _dockerClient.Containers.StartContainerAsync(containerId, new ContainerStartParameters());\n\n        // Wait for completion with timeout\n        var result = await _dockerClient.Containers.WaitContainerAsync(containerId, CancellationToken.None);\n\n        // Get execution statistics\n        var stats = await _dockerClient.Containers.GetContainerStatsAsync(containerId, new ContainerStatsParameters { OneShot = true });\n\n        // Get logs (stdout/stderr)\n        var logs = await _dockerClient.Containers.GetContainerLogsAsync(containerId, new ContainerLogsParameters\n        {\n            ShowStdout = true,\n            ShowStderr = true,\n            Timestamps = false\n        });\n\n        var (stdout, stderr) = ParseDockerLogs(logs);\n\n        return new ExecutionResult\n        {\n            ExitCode = (int)result.StatusCode,\n            Output = stdout,\n            ErrorOutput = stderr,\n            ExecutionTime = TimeSpan.FromMilliseconds(stats.Read.Subtract(stats.PreRead).TotalMilliseconds),\n            MemoryUsed = stats.MemoryStats.Usage,\n            Success = result.StatusCode == 0 && string.IsNullOrEmpty(stderr)\n        };\n    }\n\n    private async Task MonitorContainerSecurity(string containerId)\n    {\n        var monitoringInterval = TimeSpan.FromSeconds(1);\n        \n        while (true)\n        {\n            try\n            {\n                var container = await _dockerClient.Containers.InspectContainerAsync(containerId);\n                \n                // Check if container is still running\n                if (!container.State.Running)\n                    break;\n\n                // Monitor resource usage\n                var stats = await _dockerClient.Containers.GetContainerStatsAsync(containerId, new ContainerStatsParameters { OneShot = true });\n                \n                // Check for suspicious behavior\n                await CheckForSuspiciousBehavior(containerId, stats);\n                \n                await Task.Delay(monitoringInterval);\n            }\n            catch (DockerContainerNotFoundException)\n            {\n                break; // Container was removed\n            }\n        }\n    }\n\n    private async Task CheckForSuspiciousBehavior(string containerId, ContainerStatsResponse stats)\n    {\n        // Check for excessive CPU usage\n        var cpuUsage = CalculateCpuUsage(stats);\n        if (cpuUsage > 0.9) // More than 90% CPU usage\n        {\n            await _auditService.LogSecurityEvent(\"excessive_cpu_usage\", new { containerId, cpuUsage });\n        }\n\n        // Check for memory usage spikes\n        var memoryUsage = (double)stats.MemoryStats.Usage / stats.MemoryStats.Limit;\n        if (memoryUsage > 0.95) // More than 95% memory usage\n        {\n            await _auditService.LogSecurityEvent(\"excessive_memory_usage\", new { containerId, memoryUsage });\n        }\n\n        // Check for too many processes\n        if (stats.PidsStats.Current > 32)\n        {\n            await _auditService.LogSecurityEvent(\"too_many_processes\", new { containerId, processCount = stats.PidsStats.Current });\n        }\n    }\n\n    private string GetSecureImageForLanguage(string language)\n    {\n        // Use custom-built, security-hardened images\n        return language.ToLowerInvariant() switch\n        {\n            \"csharp\" => \"dsagrind/dotnet-secure:8.0-runtime\",\n            \"python\" => \"dsagrind/python-secure:3.11-slim\",\n            \"java\" => \"dsagrind/openjdk-secure:17-jre\",\n            \"cpp\" => \"dsagrind/gcc-secure:latest\",\n            \"javascript\" => \"dsagrind/node-secure:18-alpine\",\n            _ => throw new NotSupportedException($\"Language {language} is not supported\")\n        };\n    }\n\n    private List<string> GetSecureExecutionCommand(CodeExecutionRequest request)\n    {\n        // All execution goes through a security wrapper script\n        return new List<string>\n        {\n            \"/usr/local/bin/secure-runner.sh\",\n            request.Language,\n            Convert.ToBase64String(Encoding.UTF8.GetBytes(request.Code)),\n            Convert.ToBase64String(Encoding.UTF8.GetBytes(request.Input ?? string.Empty))\n        };\n    }\n}\n\n// Security wrapper script (secure-runner.sh) content:\n/*\n#!/bin/bash\nset -euo pipefail\n\nLANGUAGE=\"$1\"\nCODE_B64=\"$2\"  \nINPUT_B64=\"$3\"\n\n# Decode inputs\nCODE=$(echo \"$CODE_B64\" | base64 -d)\nINPUT=$(echo \"$INPUT_B64\" | base64 -d)\n\n# Set strict ulimits\nulimit -v 131072    # 128MB virtual memory\nulimit -f 10240     # 10MB file size\nulimit -u 32        # 32 processes\nulimit -t 5         # 5 seconds CPU time\n\n# Create temporary working directory\nWORK_DIR=$(mktemp -d)\ncd \"$WORK_DIR\"\n\n# Language-specific execution with additional security\ncase \"$LANGUAGE\" in\n    \"csharp\")\n        echo \"$CODE\" > Program.cs\n        # Compile with security flags\n        dotnet new console -f net8.0 --no-restore\n        cp Program.cs .\n        dotnet run --no-restore < <(echo \"$INPUT\")\n        ;;\n    \"python\")\n        echo \"$CODE\" > solution.py\n        # Run with restricted modules\n        python3 -B -S -s solution.py < <(echo \"$INPUT\")\n        ;;\n    \"java\")\n        echo \"$CODE\" > Solution.java\n        javac Solution.java\n        java -Djava.security.manager -Djava.security.policy==/dev/null Solution < <(echo \"$INPUT\")\n        ;;\n    *)\n        echo \"Unsupported language: $LANGUAGE\" >&2\n        exit 1\n        ;;\nesac\n*/\n```\n\n### Static Code Analysis\n```csharp\npublic class StaticCodeAnalysisService\n{\n    public async Task<SecurityAnalysisResult> AnalyzeCodeSecurity(string code, string language)\n    {\n        var result = new SecurityAnalysisResult();\n        \n        switch (language.ToLowerInvariant())\n        {\n            case \"csharp\":\n                result = await AnalyzeCSharpSecurity(code);\n                break;\n            case \"python\":\n                result = await AnalyzePythonSecurity(code);\n                break;\n            case \"java\":\n                result = await AnalyzeJavaSecurity(code);\n                break;\n        }\n\n        return result;\n    }\n\n    private async Task<SecurityAnalysisResult> AnalyzeCSharpSecurity(string code)\n    {\n        var result = new SecurityAnalysisResult();\n        var issues = new List<SecurityIssue>();\n\n        // Parse the code using Roslyn\n        var syntaxTree = CSharpSyntaxTree.ParseText(code);\n        var root = await syntaxTree.GetRootAsync();\n\n        // Check for dangerous using statements\n        var usingDirectives = root.DescendantNodes().OfType<UsingDirectiveSyntax>();\n        foreach (var usingDirective in usingDirectives)\n        {\n            var namespaceName = usingDirective.Name.ToString();\n            if (IsDangerousNamespace(namespaceName))\n            {\n                issues.Add(new SecurityIssue\n                {\n                    Type = SecurityIssueType.DangerousNamespace,\n                    Severity = SecuritySeverity.High,\n                    Message = $\"Usage of potentially dangerous namespace: {namespaceName}\",\n                    Line = usingDirective.GetLocation().GetLineSpan().StartLinePosition.Line + 1\n                });\n            }\n        }\n\n        // Check for reflection usage\n        var identifiers = root.DescendantNodes().OfType<IdentifierNameSyntax>();\n        foreach (var identifier in identifiers)\n        {\n            if (IsReflectionMethod(identifier.Identifier.ValueText))\n            {\n                issues.Add(new SecurityIssue\n                {\n                    Type = SecurityIssueType.ReflectionUsage,\n                    Severity = SecuritySeverity.Medium,\n                    Message = $\"Reflection usage detected: {identifier.Identifier.ValueText}\",\n                    Line = identifier.GetLocation().GetLineSpan().StartLinePosition.Line + 1\n                });\n            }\n        }\n\n        // Check for unsafe code blocks\n        var unsafeStatements = root.DescendantNodes().OfType<UnsafeStatementSyntax>();\n        foreach (var unsafeStatement in unsafeStatements)\n        {\n            issues.Add(new SecurityIssue\n            {\n                Type = SecurityIssueType.UnsafeCode,\n                Severity = SecuritySeverity.High,\n                Message = \"Unsafe code block detected\",\n                Line = unsafeStatement.GetLocation().GetLineSpan().StartLinePosition.Line + 1\n            });\n        }\n\n        result.Issues = issues;\n        result.OverallSeverity = issues.Any() ? issues.Max(i => i.Severity) : SecuritySeverity.None;\n        \n        return result;\n    }\n\n    private bool IsDangerousNamespace(string namespaceName)\n    {\n        var dangerousNamespaces = new[]\n        {\n            \"System.IO\",\n            \"System.Net\",\n            \"System.Diagnostics\", \n            \"System.Management\",\n            \"System.Runtime.InteropServices\",\n            \"System.Security.Principal\",\n            \"System.Web\",\n            \"Microsoft.Win32\"\n        };\n\n        return dangerousNamespaces.Any(ns => namespaceName.StartsWith(ns));\n    }\n\n    private bool IsReflectionMethod(string methodName)\n    {\n        var reflectionMethods = new[]\n        {\n            \"GetType\",\n            \"typeof\",\n            \"Activator.CreateInstance\",\n            \"Assembly.Load\",\n            \"Assembly.LoadFrom\",\n            \"Type.GetType\",\n            \"MethodInfo.Invoke\"\n        };\n\n        return reflectionMethods.Contains(methodName);\n    }\n}\n```\n\n---\n\n## 💾 Data Protection & Privacy\n\n### Encryption Strategy\n\n#### Data Encryption at Rest\n```csharp\npublic class DataEncryptionService : IDataEncryptionService\n{\n    private readonly IKeyManagementService _keyService;\n    private readonly ILogger<DataEncryptionService> _logger;\n\n    public async Task<string> EncryptSensitiveDataAsync(string data, string dataType, string userId)\n    {\n        try\n        {\n            // Get user-specific encryption key\n            var encryptionKey = await _keyService.GetUserEncryptionKeyAsync(userId);\n            \n            // Add data type salt for additional security\n            var salt = await _keyService.GetDataTypeSaltAsync(dataType);\n            \n            using var aes = Aes.Create();\n            aes.Key = encryptionKey;\n            aes.IV = GenerateRandomIV();\n            aes.Mode = CipherMode.GCM; // Galois/Counter Mode for authenticated encryption\n            \n            using var encryptor = aes.CreateEncryptor();\n            var dataBytes = Encoding.UTF8.GetBytes(data);\n            var saltedData = CombineBytes(salt, dataBytes);\n            \n            var encryptedData = encryptor.TransformFinalBlock(saltedData, 0, saltedData.Length);\n            \n            // Combine IV + encrypted data + authentication tag\n            var result = CombineBytes(aes.IV, encryptedData);\n            \n            await LogEncryptionEvent(userId, dataType, \"encrypted\");\n            \n            return Convert.ToBase64String(result);\n        }\n        catch (Exception ex)\n        {\n            await _logger.LogErrorAsync(ex, \"Failed to encrypt data for user {UserId}\", userId);\n            throw new EncryptionException(\"Failed to encrypt sensitive data\", ex);\n        }\n    }\n\n    public async Task<string> DecryptSensitiveDataAsync(string encryptedData, string dataType, string userId)\n    {\n        try\n        {\n            var encryptionKey = await _keyService.GetUserEncryptionKeyAsync(userId);\n            var salt = await _keyService.GetDataTypeSaltAsync(dataType);\n            \n            var encryptedBytes = Convert.FromBase64String(encryptedData);\n            \n            using var aes = Aes.Create();\n            aes.Key = encryptionKey;\n            aes.Mode = CipherMode.GCM;\n            \n            // Extract IV and encrypted data\n            var iv = new byte[16];\n            var ciphertext = new byte[encryptedBytes.Length - 16];\n            Array.Copy(encryptedBytes, 0, iv, 0, 16);\n            Array.Copy(encryptedBytes, 16, ciphertext, 0, ciphertext.Length);\n            \n            aes.IV = iv;\n            \n            using var decryptor = aes.CreateDecryptor();\n            var decryptedBytes = decryptor.TransformFinalBlock(ciphertext, 0, ciphertext.Length);\n            \n            // Remove salt\n            var dataBytes = new byte[decryptedBytes.Length - salt.Length];\n            Array.Copy(decryptedBytes, salt.Length, dataBytes, 0, dataBytes.Length);\n            \n            await LogEncryptionEvent(userId, dataType, \"decrypted\");\n            \n            return Encoding.UTF8.GetString(dataBytes);\n        }\n        catch (Exception ex)\n        {\n            await _logger.LogErrorAsync(ex, \"Failed to decrypt data for user {UserId}\", userId);\n            throw new DecryptionException(\"Failed to decrypt sensitive data\", ex);\n        }\n    }\n}\n\n// Key Management Service\npublic class KeyManagementService : IKeyManagementService\n{\n    private readonly IDistributedCache _cache;\n    private readonly IConfiguration _configuration;\n\n    public async Task<byte[]> GetUserEncryptionKeyAsync(string userId)\n    {\n        var cacheKey = $\"encryption_key:{userId}\";\n        var cachedKey = await _cache.GetAsync(cacheKey);\n        \n        if (cachedKey != null)\n            return cachedKey;\n\n        // Generate user-specific key using PBKDF2\n        var masterKey = _configuration[\"Encryption:MasterKey\"];\n        var userSalt = Encoding.UTF8.GetBytes($\"user:{userId}\");\n        \n        using var pbkdf2 = new Rfc2898DeriveBytes(masterKey, userSalt, 100000, HashAlgorithmName.SHA256);\n        var userKey = pbkdf2.GetBytes(32); // 256-bit key\n        \n        // Cache the key for performance (with short TTL for security)\n        await _cache.SetAsync(cacheKey, userKey, new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30)\n        });\n        \n        return userKey;\n    }\n\n    public async Task RotateEncryptionKeysAsync()\n    {\n        // Implement key rotation strategy\n        var users = await GetAllUsersAsync();\n        \n        foreach (var user in users)\n        {\n            try\n            {\n                await RotateUserKeyAsync(user.Id);\n            }\n            catch (Exception ex)\n            {\n                await LogKeyRotationError(user.Id, ex);\n            }\n        }\n    }\n\n    private async Task RotateUserKeyAsync(string userId)\n    {\n        // Get current encrypted data\n        var encryptedData = await GetUserEncryptedDataAsync(userId);\n        \n        // Decrypt with old key\n        var oldKey = await GetUserEncryptionKeyAsync(userId);\n        var decryptedData = await DecryptAllUserDataAsync(encryptedData, oldKey);\n        \n        // Generate new key\n        var newKey = GenerateNewUserKey(userId);\n        await StoreNewUserKeyAsync(userId, newKey);\n        \n        // Re-encrypt with new key\n        var reencryptedData = await EncryptAllUserDataAsync(decryptedData, newKey);\n        await StoreReencryptedDataAsync(userId, reencryptedData);\n        \n        // Clear old key from cache\n        await _cache.RemoveAsync($\"encryption_key:{userId}\");\n        \n        await LogKeyRotationSuccess(userId);\n    }\n}\n```\n\n### Privacy Compliance (GDPR/CCPA)\n\n#### Data Privacy Management\n```csharp\npublic class DataPrivacyService : IDataPrivacyService\n{\n    public async Task<DataPortabilityResult> ExportUserDataAsync(string userId, ExportFormat format)\n    {\n        var userData = await CollectAllUserDataAsync(userId);\n        \n        // Validate user consent and legal basis\n        await ValidateExportRequest(userId);\n        \n        var exportData = new UserDataExport\n        {\n            UserId = userId,\n            ExportDate = DateTime.UtcNow,\n            Format = format,\n            Data = new Dictionary<string, object>\n            {\n                [\"profile\"] = userData.Profile,\n                [\"submissions\"] = userData.Submissions.Select(s => new\n                {\n                    s.Id,\n                    s.ProblemId,\n                    s.Code,\n                    s.Language,\n                    s.Status,\n                    s.SubmittedAt,\n                    s.ExecutionMetrics\n                }),\n                [\"analytics\"] = userData.Analytics,\n                [\"preferences\"] = userData.Preferences,\n                [\"subscription\"] = userData.Subscription\n            }\n        };\n\n        // Remove sensitive internal data\n        exportData = await SanitizeExportData(exportData);\n        \n        var exportFile = await GenerateExportFile(exportData, format);\n        \n        await LogDataExport(userId, format);\n        \n        return new DataPortabilityResult\n        {\n            ExportId = Guid.NewGuid().ToString(),\n            FileName = $\"dsagrind_data_export_{userId}_{DateTime.UtcNow:yyyyMMdd}.{format.ToString().ToLowerInvariant()}\",\n            FileContent = exportFile,\n            GeneratedAt = DateTime.UtcNow\n        };\n    }\n\n    public async Task<DataDeletionResult> DeleteUserDataAsync(string userId, DataDeletionRequest request)\n    {\n        // Validate deletion request\n        await ValidateDeletionRequest(userId, request);\n        \n        var deletionPlan = await CreateDataDeletionPlan(userId, request);\n        \n        try\n        {\n            // Phase 1: Soft delete (mark as deleted but keep for legal retention)\n            await SoftDeleteUserData(userId, deletionPlan);\n            \n            // Phase 2: Anonymize data that needs to be retained for analytics\n            await AnonymizeRetainedData(userId, deletionPlan);\n            \n            // Phase 3: Hard delete after retention period (scheduled job)\n            await ScheduleHardDeletion(userId, deletionPlan);\n            \n            await LogDataDeletion(userId, deletionPlan);\n            \n            return new DataDeletionResult\n            {\n                DeletionId = Guid.NewGuid().ToString(),\n                Status = DeletionStatus.Completed,\n                DeletedCategories = deletionPlan.CategoriesToDelete,\n                RetainedCategories = deletionPlan.CategoriesToRetain,\n                HardDeletionScheduledDate = DateTime.UtcNow.AddDays(deletionPlan.RetentionDays)\n            };\n        }\n        catch (Exception ex)\n        {\n            await LogDataDeletionError(userId, ex);\n            throw new DataDeletionException(\"Failed to delete user data\", ex);\n        }\n    }\n\n    private async Task<DataDeletionPlan> CreateDataDeletionPlan(string userId, DataDeletionRequest request)\n    {\n        var plan = new DataDeletionPlan { UserId = userId };\n        \n        // Determine what can be deleted immediately vs what needs retention\n        var userAccount = await GetUserAccountAsync(userId);\n        \n        // Check legal retention requirements\n        if (userAccount.HasActiveSubscription)\n        {\n            plan.CategoriesToRetain.Add(\"payment_records\");\n            plan.RetentionReasons.Add(\"active_subscription\");\n        }\n        \n        if (userAccount.HasRecentDisputes)\n        {\n            plan.CategoriesToRetain.Add(\"transaction_history\");\n            plan.RetentionReasons.Add(\"dispute_resolution\");\n        }\n        \n        // Check business retention requirements\n        if (request.DeleteSubmissions == false)\n        {\n            plan.CategoriesToRetain.Add(\"submissions\");\n            plan.RetentionReasons.Add(\"user_preference\");\n        }\n        \n        // Default categories to delete\n        plan.CategoriesToDelete.AddRange(new[]\n        {\n            \"personal_information\",\n            \"preferences\",\n            \"analytics_data\",\n            \"session_data\",\n            \"device_information\"\n        });\n        \n        // Remove overlaps\n        plan.CategoriesToDelete.RemoveAll(c => plan.CategoriesToRetain.Contains(c));\n        \n        return plan;\n    }\n\n    private async Task AnonymizeRetainedData(string userId, DataDeletionPlan plan)\n    {\n        foreach (var category in plan.CategoriesToRetain)\n        {\n            switch (category)\n            {\n                case \"submissions\":\n                    await AnonymizeSubmissions(userId);\n                    break;\n                case \"payment_records\":\n                    await AnonymizePaymentRecords(userId);\n                    break;\n                case \"analytics_data\":\n                    await AnonymizeAnalyticsData(userId);\n                    break;\n            }\n        }\n    }\n\n    private async Task AnonymizeSubmissions(string userId)\n    {\n        var anonymousId = $\"anon_{Guid.NewGuid():N}\";\n        \n        // Replace user ID with anonymous ID in submissions\n        var update = Builders<Submission>.Update\n            .Set(s => s.UserId, anonymousId)\n            .Set(s => s.IsAnonymized, true)\n            .Set(s => s.AnonymizedAt, DateTime.UtcNow);\n            \n        await _submissionRepository.UpdateManyAsync(\n            s => s.UserId == userId,\n            update\n        );\n    }\n\n    public async Task<ConsentManagementResult> UpdateDataProcessingConsentAsync(string userId, ConsentUpdateRequest request)\n    {\n        var currentConsent = await GetUserConsentAsync(userId);\n        \n        var newConsent = new UserConsent\n        {\n            UserId = userId,\n            MarketingEmails = request.MarketingEmails ?? currentConsent.MarketingEmails,\n            AnalyticsTracking = request.AnalyticsTracking ?? currentConsent.AnalyticsTracking,\n            PersonalizedContent = request.PersonalizedContent ?? currentConsent.PersonalizedContent,\n            ThirdPartySharing = request.ThirdPartySharing ?? currentConsent.ThirdPartySharing,\n            UpdatedAt = DateTime.UtcNow,\n            ConsentVersion = await GetLatestConsentVersionAsync()\n        };\n        \n        await StoreUserConsentAsync(newConsent);\n        \n        // Apply consent changes immediately\n        await ApplyConsentChanges(userId, currentConsent, newConsent);\n        \n        return new ConsentManagementResult\n        {\n            Success = true,\n            UpdatedConsent = newConsent,\n            ChangesApplied = await GetConsentChanges(currentConsent, newConsent)\n        };\n    }\n\n    private async Task ApplyConsentChanges(string userId, UserConsent oldConsent, UserConsent newConsent)\n    {\n        // Stop marketing emails if consent withdrawn\n        if (oldConsent.MarketingEmails && !newConsent.MarketingEmails)\n        {\n            await _emailService.UnsubscribeFromMarketingAsync(userId);\n        }\n        \n        // Stop analytics tracking if consent withdrawn\n        if (oldConsent.AnalyticsTracking && !newConsent.AnalyticsTracking)\n        {\n            await _analyticsService.StopTrackingUserAsync(userId);\n            await AnonymizeExistingAnalyticsDataAsync(userId);\n        }\n        \n        // Remove personalized data if consent withdrawn\n        if (oldConsent.PersonalizedContent && !newConsent.PersonalizedContent)\n        {\n            await _personalizationService.ClearUserDataAsync(userId);\n        }\n    }\n}\n```\n\nThis comprehensive security design provides multiple layers of protection covering all aspects of the DSAGrind platform, from user authentication to code execution security, ensuring the highest standards of security and privacy protection.","size_bytes":57863},"WIREFRAME_DOCUMENTATION.md":{"content":"# DSAGrind Platform - Wireframe Documentation\n\n## 📋 Document Information\n- **Version**: 1.0\n- **Created**: 2024\n- **System**: DSAGrind Competitive Programming Platform\n- **Focus**: User Interface Design and User Experience\n- **Design System**: Responsive, Mobile-First Approach\n\n---\n\n## 🎨 Design Overview\n\n### Visual Design Language\nDSAGrind follows a clean, modern design philosophy optimized for competitive programming:\n- **Typography**: Monospace fonts for code, Sans-serif for content\n- **Color Scheme**: Dark mode primary with light mode support\n- **Layout**: Clean, distraction-free interface\n- **Accessibility**: WCAG 2.1 AA compliant\n- **Responsive**: Mobile-first responsive design\n\n---\n\n## 🏠 Dashboard Interface\n\n![Dashboard Wireframe](attached_assets/generated_images/Dashboard_wireframe_for_DSAGrind_platform_2787b3be.png)\n\n### Dashboard Layout Components\n\n#### 1. **Header Navigation**\n```\nNavigation Bar Structure:\n├── Brand Logo (DSAGrind)\n├── Main Navigation\n│   ├── Problems\n│   ├── Practice\n│   ├── Contests\n│   ├── Leaderboard\n│   └── Learn\n├── Search Bar (Global problem search)\n├── User Menu\n│   ├── Profile\n│   ├── Submissions\n│   ├── Settings\n│   └── Logout\n└── Notifications (Bell icon with count)\n```\n\n**Interactive Elements:**\n- Hover states for all navigation items\n- Active page highlighting\n- Dropdown menus with smooth animations\n- Global search with autocomplete suggestions\n\n#### 2. **Main Content Area**\n\n##### Problem List Table\n```\nTable Structure:\n├── Column Headers (Sortable)\n│   ├── Status (✓ for completed, attempted indicator)\n│   ├── Title (Problem name with difficulty color coding)\n│   ├── Difficulty (Easy/Medium/Hard with color badges)\n│   ├── Acceptance Rate (Percentage with visual bar)\n│   ├── Tags (Clickable tag pills)\n│   └── Actions (Bookmark, Share buttons)\n├── Pagination Controls\n└── Results Per Page Selector\n```\n\n**User Experience Features:**\n- **Status Icons**: Clear visual indicators for completion status\n- **Difficulty Color Coding**: Green (Easy), Orange (Medium), Red (Hard)\n- **Hover Effects**: Row highlighting on mouse over\n- **Quick Actions**: Bookmark and share without page reload\n- **Keyboard Navigation**: Arrow keys for table navigation\n\n##### Filter Panel\n```\nFilter Controls:\n├── Difficulty Filter\n│   ├── All Difficulties (Default)\n│   ├── Easy (Checkbox)\n│   ├── Medium (Checkbox)\n│   └── Hard (Checkbox)\n├── Tags Filter\n│   ├── Search Tags Input\n│   ├── Popular Tags (Quick select chips)\n│   └── Selected Tags Display\n├── Status Filter\n│   ├── All Problems\n│   ├── Not Attempted\n│   ├── Attempted\n│   └── Completed\n└── Clear All Filters Button\n```\n\n#### 3. **Sidebar Components**\n\n##### User Statistics Card\n```\nStatistics Display:\n├── User Avatar and Name\n├── Current Subscription Badge\n├── Progress Overview\n│   ├── Total Problems Solved\n│   ├── Acceptance Rate (Circular progress)\n│   ├── Current Streak (Days)\n│   └── Ranking Position\n└── Quick Stats Grid\n    ├── Easy: 45/150 (30%)\n    ├── Medium: 23/400 (5.8%)\n    └── Hard: 8/200 (4%)\n```\n\n##### Recent Submissions\n```\nSubmission History:\n├── Submission Item (Last 5)\n│   ├── Problem Title\n│   ├── Status (Accepted/Wrong Answer/etc.)\n│   ├── Language Used\n│   ├── Submission Time\n│   └── Quick View Link\n└── View All Submissions Link\n```\n\n##### Recommended Problems\n```\nRecommendation Engine:\n├── Based on User Progress\n├── Problem Title\n├── Difficulty Level\n├── Match Percentage\n└── Start Problem Button\n```\n\n---\n\n## 💻 Code Editor Interface\n\n![Code Editor Wireframe](attached_assets/generated_images/Code_editor_wireframe_interface_1cde2269.png)\n\n### Code Editor Layout\n\n#### 1. **Problem Statement Panel (Left Side)**\n\n```\nProblem Panel Structure:\n├── Problem Header\n│   ├── Problem Title\n│   ├── Difficulty Badge\n│   ├── Problem Rating (Stars)\n│   └── Action Buttons (Bookmark, Share, Report)\n├── Problem Tabs\n│   ├── Description (Active by default)\n│   ├── Editorial (Premium feature)\n│   ├── Solutions (Community solutions)\n│   └── Discussions (Comments/questions)\n├── Problem Content\n│   ├── Problem Statement (Rich text with syntax highlighting)\n│   ├── Input/Output Examples\n│   │   ├── Example 1\n│   │   │   ├── Input: [Formatted code block]\n│   │   │   ├── Output: [Formatted code block]\n│   │   │   └── Explanation: [Text explanation]\n│   │   └── Additional Examples...\n│   ├── Constraints\n│   │   ├── Time Complexity Requirements\n│   │   ├── Space Complexity Requirements\n│   │   └── Input Constraints\n│   └── Tags (Clickable topic tags)\n└── Problem Statistics\n    ├── Total Submissions\n    ├── Acceptance Rate\n    └── Difficulty Distribution\n```\n\n**Interactive Features:**\n- **Collapsible Sections**: User can minimize/expand sections\n- **Copy Code Examples**: One-click copy for examples\n- **Tag Navigation**: Click tags to find similar problems\n- **Print-Friendly**: Clean print stylesheet\n\n#### 2. **Code Editor Panel (Right Side)**\n\n```\nEditor Panel Structure:\n├── Editor Header\n│   ├── Language Selector Dropdown\n│   │   ├── C# (Default)\n│   │   ├── Python\n│   │   ├── Java\n│   │   ├── C++\n│   │   └── JavaScript\n│   ├── Theme Toggle (Dark/Light)\n│   ├── Font Size Controls (+/-)\n│   └── Settings Gear (Editor preferences)\n├── Code Editor (Monaco Editor)\n│   ├── Line Numbers\n│   ├── Syntax Highlighting\n│   ├── Auto-completion\n│   ├── Error Highlighting\n│   ├── Code Folding\n│   └── Multiple Cursors Support\n├── Editor Controls\n│   ├── Run Code Button (Green)\n│   ├── Submit Solution Button (Blue)\n│   ├── Reset Code Button (Gray)\n│   └── AI Hint Button (Purple, Premium)\n└── Custom Input Panel (Collapsible)\n    ├── Input Textarea\n    ├── Expected Output Textarea\n    └── Test Custom Input Button\n```\n\n**Code Editor Features:**\n- **IntelliSense**: Auto-completion for programming languages\n- **Error Detection**: Real-time syntax error highlighting\n- **Code Formatting**: Auto-format on save\n- **Vim/Emacs Modes**: Keyboard shortcut customization\n- **Code Templates**: Starter templates for each language\n\n#### 3. **Results Panel (Bottom)**\n\n```\nResults Panel Structure:\n├── Execution Tabs\n│   ├── Test Results (Default active)\n│   ├── Custom Input Output\n│   ├── Error Messages\n│   └── Performance Metrics\n├── Test Results Display\n│   ├── Overall Status (Accepted/Wrong Answer/etc.)\n│   ├── Test Case Results Table\n│   │   ├── Test Case # (Hidden/Visible indicator)\n│   │   ├── Status (Pass/Fail with icons)\n│   │   ├── Input (Expandable)\n│   │   ├── Expected Output (Expandable)\n│   │   ├── Your Output (Expandable)\n│   │   └── Execution Time & Memory\n│   └── Summary Statistics\n│       ├── Passed: 8/10 test cases\n│       ├── Total Runtime: 145ms\n│       └── Memory Usage: 42.3MB\n├── Performance Metrics\n│   ├── Time Complexity Analysis\n│   ├── Space Complexity Analysis\n│   ├── Runtime Distribution Graph\n│   └── Memory Usage Graph\n└── Action Buttons\n    ├── Submit Again\n    ├── View Editorial (Premium)\n    └── Share Solution\n```\n\n---\n\n## 🔐 Authentication Flow Interface\n\n![Authentication Wireframes](attached_assets/generated_images/Authentication_flow_wireframes_2b7c7357.png)\n\n### Authentication Screens\n\n#### 1. **Login Screen**\n\n```\nLogin Form Structure:\n├── Brand Header (DSAGrind Logo)\n├── Welcome Message\n├── Login Form\n│   ├── Email/Username Input\n│   │   ├── Field Label\n│   │   ├── Input Field (Email or Username)\n│   │   ├── Validation Messages\n│   │   └── Field Icon (User icon)\n│   ├── Password Input\n│   │   ├── Field Label\n│   │   ├── Password Field (Hidden text)\n│   │   ├── Show/Hide Password Toggle\n│   │   ├── Validation Messages\n│   │   └── Field Icon (Lock icon)\n│   ├── Remember Me Checkbox\n│   ├── Forgot Password Link\n│   └── Login Button (Primary CTA)\n├── Social Login Options\n│   ├── Google Login Button\n│   ├── GitHub Login Button\n│   └── Discord Login Button\n├── Divider (\"or\" separator)\n└── Registration CTA\n    ├── \"Don't have an account?\" text\n    └── Sign Up Link\n```\n\n**Form Validation:**\n- **Real-time Validation**: Field validation on blur\n- **Error States**: Red borders and error messages\n- **Success States**: Green checkmarks for valid fields\n- **Loading States**: Button spinner during authentication\n\n#### 2. **Registration Screen**\n\n```\nRegistration Form Structure:\n├── Brand Header\n├── \"Create Your Account\" Title\n├── Registration Form\n│   ├── Personal Information\n│   │   ├── First Name Input (Required)\n│   │   ├── Last Name Input (Required)\n│   │   └── Country Selector (Optional)\n│   ├── Account Details\n│   │   ├── Email Input (Required, Unique)\n│   │   ├── Username Input (Required, Unique)\n│   │   └── Password Input (Required, Strong)\n│   ├── Password Confirmation\n│   │   ├── Confirm Password Input\n│   │   └── Password Match Indicator\n│   ├── Terms and Conditions\n│   │   ├── Agreement Checkbox (Required)\n│   │   ├── Terms of Service Link\n│   │   └── Privacy Policy Link\n│   └── Create Account Button (Primary CTA)\n├── Social Registration Options\n│   ├── Sign up with Google\n│   ├── Sign up with GitHub\n│   └── Sign up with Discord\n└── Login CTA\n    ├── \"Already have an account?\" text\n    └── Login Link\n```\n\n**Password Strength Indicator:**\n```\nPassword Requirements:\n├── Minimum 8 characters ✓\n├── At least one uppercase letter ✓\n├── At least one lowercase letter ✓\n├── At least one number ✓\n├── At least one special character ✓\n└── Strength Meter (Weak/Fair/Good/Strong)\n```\n\n#### 3. **Password Reset Flow**\n\n```\nReset Password Screens:\n├── Request Reset Screen\n│   ├── \"Reset Your Password\" Title\n│   ├── Email Input Field\n│   ├── Send Reset Link Button\n│   └── Back to Login Link\n├── Check Email Screen\n│   ├── Success Icon\n│   ├── \"Check Your Email\" Message\n│   ├── Instruction Text\n│   ├── Resend Email Button\n│   └── Change Email Address Link\n├── Reset Password Screen\n│   ├── New Password Input\n│   ├── Confirm Password Input\n│   ├── Password Strength Meter\n│   ├── Reset Password Button\n│   └── Cancel Link\n└── Success Screen\n    ├── Success Icon\n    ├── \"Password Reset Successfully\" Message\n    ├── Continue to Login Button\n    └── Auto-redirect Timer\n```\n\n#### 4. **User Profile Management**\n\n```\nProfile Screen Structure:\n├── Profile Header\n│   ├── User Avatar (Uploadable)\n│   ├── Username and Display Name\n│   ├── User Badge (Free/Premium/Pro)\n│   └── Edit Profile Button\n├── Profile Tabs\n│   ├── Overview (Default)\n│   ├── Statistics\n│   ├── Submissions\n│   ├── Settings\n│   └── Subscription (Premium features)\n├── Overview Tab Content\n│   ├── Personal Information\n│   │   ├── Full Name\n│   │   ├── Bio/Description\n│   │   ├── Location\n│   │   ├── Programming Languages\n│   │   └── Social Links\n│   ├── Achievement Badges\n│   │   ├── Problem Solver Badges\n│   │   ├── Streak Achievements\n│   │   └── Contest Achievements\n│   └── Recent Activity Feed\n│       ├── Recent Submissions\n│       ├── Problems Completed\n│       └── Contest Participations\n└── Statistics Tab Content\n    ├── Problem Solving Stats\n    │   ├── Total Problems Solved\n    │   ├── Difficulty Breakdown Chart\n    │   ├── Language Usage Chart\n    │   └── Acceptance Rate Trend\n    ├── Performance Metrics\n    │   ├── Average Submission Time\n    │   ├── Memory Efficiency Rating\n    │   └── Code Quality Score\n    └── Progress Tracking\n        ├── Current Streak\n        ├── Longest Streak\n        ├── Weekly Goal Progress\n        └── Monthly Challenge Status\n```\n\n---\n\n## 📱 Responsive Design Specifications\n\n### Mobile Layout (320px - 768px)\n\n#### Mobile Dashboard\n```\nMobile Layout Structure:\n├── Collapsible Header\n│   ├── Hamburger Menu (Navigation drawer)\n│   ├── DSAGrind Logo (Centered)\n│   └── User Avatar (Profile access)\n├── Content Area\n│   ├── Search Bar (Full width)\n│   ├── Quick Stats Cards (Horizontal scroll)\n│   ├── Problem List (Simplified table)\n│   │   ├── Problem Title + Difficulty\n│   │   ├── Status Icon\n│   │   └── Tags (Collapsed, expandable)\n│   └── Floating Action Button (Add/Submit)\n└── Bottom Navigation\n    ├── Problems Tab\n    ├── Practice Tab\n    ├── Profile Tab\n    └── More Tab\n```\n\n#### Mobile Code Editor\n```\nMobile Editor Layout:\n├── Problem Panel (Full screen, swipeable)\n├── Code Editor (Full screen, swipeable)\n│   ├── Language Selector (Top bar)\n│   ├── Editor Toolbar (Minimal)\n│   ├── Code Input Area (Optimized for touch)\n│   └── Virtual Keyboard Support\n├── Results Panel (Bottom sheet)\n└── Tab Navigation (Problem/Code/Results)\n```\n\n### Tablet Layout (768px - 1024px)\n```\nTablet Layout Features:\n├── Split View (Problem + Code side by side)\n├── Sidebar Navigation (Collapsible)\n├── Touch-optimized Controls\n├── Gesture Support (Swipe, pinch-to-zoom)\n└── Orientation Support (Portrait/Landscape)\n```\n\n### Desktop Layout (1024px+)\n```\nDesktop Layout Features:\n├── Full Three-Panel Layout\n├── Keyboard Shortcuts\n├── Multiple Monitor Support\n├── Advanced Editor Features\n│   ├── Multiple Tabs\n│   ├── Split Editor\n│   └── Advanced Debugging\n└── Rich Contextual Menus\n```\n\n---\n\n## 🎯 User Experience (UX) Patterns\n\n### Navigation Patterns\n\n#### 1. **Breadcrumb Navigation**\n```\nBreadcrumb Examples:\n├── Home > Problems > Arrays > Two Sum\n├── Home > Profile > Submissions > Submission #123\n└── Home > Contest > Weekly Contest 123 > Problem A\n```\n\n#### 2. **Progressive Disclosure**\n```\nInformation Hierarchy:\n├── Essential Information (Always visible)\n├── Important Details (Expandable sections)\n├── Advanced Options (Modal/drawer)\n└── Expert Features (Settings/preferences)\n```\n\n### Interaction Patterns\n\n#### 1. **Loading States**\n```\nLoading Indicators:\n├── Skeleton Screens (Initial load)\n├── Progress Bars (Known duration)\n├── Spinners (Unknown duration)\n├── Shimmer Effects (Content loading)\n└── Progressive Loading (Incremental content)\n```\n\n#### 2. **Error Handling**\n```\nError Communication:\n├── Inline Validation (Form fields)\n├── Toast Notifications (Non-blocking)\n├── Modal Alerts (Blocking/Critical)\n├── Banner Messages (System-wide)\n└── Empty States (No content scenarios)\n```\n\n#### 3. **Feedback Mechanisms**\n```\nUser Feedback:\n├── Success States (Green checkmarks, celebrations)\n├── Progress Tracking (Step indicators, completion %)\n├── Real-time Updates (Live status, typing indicators)\n├── Confirmation Dialogs (Destructive actions)\n└── Undo/Redo Options (Reversible actions)\n```\n\n---\n\n## 🎨 Design System Specifications\n\n### Typography Scale\n```\nFont Hierarchy:\n├── H1: 2.5rem (40px) - Page Titles\n├── H2: 2rem (32px) - Section Headers\n├── H3: 1.5rem (24px) - Subsection Headers\n├── H4: 1.25rem (20px) - Component Headers\n├── Body Large: 1.125rem (18px) - Important content\n├── Body Regular: 1rem (16px) - Default text\n├── Body Small: 0.875rem (14px) - Secondary text\n└── Caption: 0.75rem (12px) - Labels, metadata\n```\n\n### Color Palette\n```\nPrimary Colors:\n├── Primary-50: #f0f9ff (Lightest blue)\n├── Primary-500: #3b82f6 (Main brand blue)\n├── Primary-900: #1e3a8a (Darkest blue)\n\nSemantic Colors:\n├── Success: #10b981 (Green for accepted solutions)\n├── Warning: #f59e0b (Orange for medium difficulty)\n├── Error: #ef4444 (Red for wrong answers)\n├── Info: #6366f1 (Purple for hints/info)\n\nDifficulty Colors:\n├── Easy: #22c55e (Green)\n├── Medium: #f59e0b (Orange)\n└── Hard: #ef4444 (Red)\n\nNeutral Grays:\n├── Gray-50: #f9fafb (Background)\n├── Gray-200: #e5e7eb (Borders)\n├── Gray-500: #6b7280 (Text secondary)\n├── Gray-900: #111827 (Text primary)\n```\n\n### Spacing System\n```\nSpacing Scale (Based on 4px grid):\n├── xs: 0.25rem (4px)\n├── sm: 0.5rem (8px)\n├── md: 1rem (16px)\n├── lg: 1.5rem (24px)\n├── xl: 2rem (32px)\n├── 2xl: 3rem (48px)\n└── 3xl: 4rem (64px)\n```\n\n### Component Library\n\n#### Buttons\n```\nButton Variants:\n├── Primary Button (Blue background, white text)\n├── Secondary Button (Gray background, dark text)\n├── Outline Button (Transparent background, colored border)\n├── Ghost Button (Transparent background, no border)\n├── Danger Button (Red background, white text)\n└── Icon Button (Square, icon only)\n\nButton Sizes:\n├── Small: 32px height, 12px padding\n├── Medium: 40px height, 16px padding\n├── Large: 48px height, 20px padding\n└── Extra Large: 56px height, 24px padding\n```\n\n#### Form Elements\n```\nInput Components:\n├── Text Input (Single line text)\n├── Textarea (Multi-line text)\n├── Select Dropdown (Single/multiple selection)\n├── Checkbox (Boolean selection)\n├── Radio Button (Single selection from group)\n├── Toggle Switch (Boolean toggle)\n├── Slider (Range selection)\n└── File Upload (File selection)\n\nInput States:\n├── Default (Normal state)\n├── Focus (Active input)\n├── Error (Invalid input)\n├── Success (Valid input)\n├── Disabled (Non-interactive)\n└── Loading (Processing state)\n```\n\n#### Data Display\n```\nDisplay Components:\n├── Tables (Sortable, filterable data)\n├── Cards (Content containers)\n├── Lists (Ordered/unordered items)\n├── Statistics Cards (Numeric displays)\n├── Progress Bars (Completion indicators)\n├── Charts (Data visualization)\n├── Badges (Status indicators)\n└── Avatars (User representations)\n```\n\n---\n\n## 📊 Accessibility Specifications\n\n### WCAG 2.1 AA Compliance\n\n#### Color Contrast\n```\nContrast Requirements:\n├── Normal Text: 4.5:1 minimum ratio\n├── Large Text: 3:1 minimum ratio\n├── UI Components: 3:1 minimum ratio\n└── Non-text Elements: 3:1 minimum ratio\n```\n\n#### Keyboard Navigation\n```\nKeyboard Support:\n├── Tab Order (Logical focus sequence)\n├── Focus Indicators (Visible focus states)\n├── Keyboard Shortcuts (Power user efficiency)\n├── Skip Links (Content navigation)\n└── Escape Handling (Modal/menu closure)\n```\n\n#### Screen Reader Support\n```\nAccessibility Features:\n├── Semantic HTML (Proper element usage)\n├── ARIA Labels (Descriptive labels)\n├── Alt Text (Image descriptions)\n├── Role Attributes (Element purposes)\n├── Live Regions (Dynamic content announcements)\n└── Heading Structure (Logical hierarchy)\n```\n\n#### Motor Accessibility\n```\nMotor Impairment Support:\n├── Large Click Targets (44px minimum)\n├── Generous Spacing (Avoid accidental clicks)\n├── Drag and Drop Alternatives\n├── Timeout Extensions\n└── Motion Reduction (Respect prefers-reduced-motion)\n```\n\nThis wireframe documentation provides comprehensive user interface specifications for building an accessible, user-friendly competitive programming platform that works seamlessly across all devices and user contexts.","size_bytes":21038},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Fix all compilation errors in .NET backend\n    - Created PaymentDTOs.cs with all missing DTOs\n    - Fixed PaymentController interface mismatches\n    - Added ISubscriptionService dependency injection  \n    - Created SubscriptionService implementation\n    - Removed duplicate DTOs from service files\n    - Fixed logging interface conflicts\n[x] 3. Restart workflows and verify project builds\n    - Frontend React App: ✅ Running on port 3000\n    - Gateway API: ✅ Running on port 5000  \n    - Start application: ❌ Fixed workflow configuration\n[x] 4. Configure environment variable system\n    - ✅ Updated all appsettings.json files to use ${ENV_VAR} syntax\n    - ✅ Created centralized environment loading system \n    - ✅ Added DotNetEnv package for .env file support\n    - ✅ Updated Program.cs files to load environment variables\n    - ✅ Removed all hardcoded secrets from configuration files\n[x] 5. Configure RabbitMQ and Serilog logging with local fallbacks\n    - ✅ Added RabbitMQ configuration to Auth, Gateway, and Payments services\n    - ✅ Enhanced environment extensions with local fallback logging\n    - ✅ Added comprehensive Serilog configuration for all services\n    - ✅ Updated .env.example with RabbitMQ and Elasticsearch logging variables\n    - ✅ Fixed JSON parsing issues and ensured proper string formatting\n[ ] 6. Verify the project is working using the feedback tool\n[ ] 7. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":1586},"backend/src/Shared/DSAGrind.Common/Extensions/EnvironmentExtensions.cs":{"content":"using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing DotNetEnv;\n\nnamespace DSAGrind.Common.Extensions;\n\npublic static class EnvironmentExtensions\n{\n    /// <summary>\n    /// Loads environment variables from .env file if it exists and adds them to configuration\n    /// This method should be called early in the application startup process\n    /// </summary>\n    /// <param name=\"builder\">The configuration builder</param>\n    /// <param name=\"environment\">The hosting environment</param>\n    /// <returns>The configuration builder for chaining</returns>\n    public static IConfigurationBuilder AddEnvironmentVariables(this IConfigurationBuilder builder, IHostEnvironment? environment = null)\n    {\n        // Load .env file if it exists (development)\n        var envFile = Path.Combine(Directory.GetCurrentDirectory(), \".env\");\n        if (File.Exists(envFile))\n        {\n            Env.Load(envFile);\n        }\n\n        // Load environment-specific .env file\n        if (environment != null)\n        {\n            var envSpecificFile = Path.Combine(Directory.GetCurrentDirectory(), $\".env.{environment.EnvironmentName.ToLower()}\");\n            if (File.Exists(envSpecificFile))\n            {\n                Env.Load(envSpecificFile);\n            }\n        }\n\n        // Add environment variables to configuration (this will override appsettings values)\n        builder.AddEnvironmentVariables();\n\n        return builder;\n    }\n\n    /// <summary>\n    /// Loads environment variables from .env files (should be called in Program.cs)\n    /// </summary>\n    public static void LoadEnvFile()\n    {\n        // Get the root directory (traverse up from service directory to find backend folder)\n        var currentDir = Directory.GetCurrentDirectory();\n        var backendDir = FindBackendDirectory(currentDir);\n        \n        if (backendDir != null)\n        {\n            // Load .env file from backend directory\n            var envFile = Path.Combine(backendDir, \".env\");\n            if (File.Exists(envFile))\n            {\n                Env.Load(envFile);\n                Console.WriteLine($\"Loaded environment variables from: {envFile}\");\n            }\n            else\n            {\n                Console.WriteLine($\"Environment file not found: {envFile}\");\n            }\n\n            // Load .env.development file if it exists\n            var devEnvFile = Path.Combine(backendDir, \".env.development\");\n            if (File.Exists(devEnvFile))\n            {\n                Env.Load(devEnvFile);\n                Console.WriteLine($\"Loaded development environment variables from: {devEnvFile}\");\n            }\n        }\n        else\n        {\n            // Fallback to current directory (for compatibility)\n            var envFile = Path.Combine(Directory.GetCurrentDirectory(), \".env\");\n            if (File.Exists(envFile))\n            {\n                Env.Load(envFile);\n                Console.WriteLine($\"Loaded environment variables from current directory: {envFile}\");\n            }\n        }\n    }\n\n    private static string? FindBackendDirectory(string startPath)\n    {\n        var current = new DirectoryInfo(startPath);\n        \n        while (current != null)\n        {\n            // Check if current directory is backend or contains backend folder\n            if (current.Name.Equals(\"backend\", StringComparison.OrdinalIgnoreCase))\n            {\n                return current.FullName;\n            }\n            \n            // Check if current directory contains a backend folder\n            var backendSubDir = Path.Combine(current.FullName, \"backend\");\n            if (Directory.Exists(backendSubDir))\n            {\n                return backendSubDir;\n            }\n            \n            current = current.Parent;\n        }\n        \n        return null;\n    }\n\n    /// <summary>\n    /// Gets an environment variable with a fallback to appsettings configuration\n    /// </summary>\n    /// <param name=\"configuration\">The configuration</param>\n    /// <param name=\"key\">The configuration key</param>\n    /// <param name=\"defaultValue\">Default value if not found</param>\n    /// <param name=\"logger\">Optional logger for fallback notifications</param>\n    /// <returns>The configuration value</returns>\n    public static string GetConfigurationValue(this IConfiguration configuration, string key, string? defaultValue = null, ILogger? logger = null)\n    {\n        // First check environment variables\n        var envValue = Environment.GetEnvironmentVariable(key);\n        if (!string.IsNullOrEmpty(envValue))\n        {\n            return envValue;\n        }\n\n        // Then check configuration (appsettings.json)\n        var configValue = configuration[key];\n        if (!string.IsNullOrEmpty(configValue))\n        {\n            // Log that we're using local configuration instead of environment variable\n            logger?.LogInformation(\"⚠️  Using local configuration value for {Key} from appsettings.json (consider setting environment variable)\", key);\n            return configValue;\n        }\n\n        // Return default value with logging\n        if (defaultValue != null)\n        {\n            logger?.LogWarning(\"⚠️  Using local fallback value for {Key}: {DefaultValue}\", key, defaultValue);\n            return defaultValue;\n        }\n\n        // Log error and throw exception\n        logger?.LogError(\"❌ Configuration key '{Key}' not found in environment variables or appsettings\", key);\n        throw new InvalidOperationException($\"Configuration key '{key}' not found in environment variables or appsettings\");\n    }\n\n    /// <summary>\n    /// Validates that all required environment variables are present\n    /// </summary>\n    /// <param name=\"configuration\">The configuration</param>\n    /// <param name=\"requiredKeys\">Array of required configuration keys</param>\n    /// <exception cref=\"InvalidOperationException\">Thrown when required keys are missing</exception>\n    public static void ValidateRequiredConfiguration(this IConfiguration configuration, params string[] requiredKeys)\n    {\n        var missingKeys = new List<string>();\n\n        foreach (var key in requiredKeys)\n        {\n            var value = Environment.GetEnvironmentVariable(key) ?? configuration[key];\n            if (string.IsNullOrEmpty(value))\n            {\n                missingKeys.Add(key);\n            }\n        }\n\n        if (missingKeys.Any())\n        {\n            throw new InvalidOperationException(\n                $\"Required configuration keys are missing: {string.Join(\", \", missingKeys)}. \" +\n                \"Please set these as environment variables or in appsettings.json\");\n        }\n    }\n}","size_bytes":6706}},"version":1}